
ECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00005438  000054cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800172  00800172  000055de  2**0
                  ALLOC
  3 .stab         00006570  00000000  00000000  000055e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000034f4  00000000  00000000  0000bb50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000f044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000f456  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00011ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0001330f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000146f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  000148f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00014bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_6>
      1c:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_7>
      20:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_8>
      24:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_9>
      28:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__vector_10>
      2c:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 28 	call	0x5094	; 0x5094 <main>
      8a:	0c 94 1a 2a 	jmp	0x5434	; 0x5434 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 29 	jmp	0x533c	; 0x533c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 29 	jmp	0x538c	; 0x538c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 29 	jmp	0x538c	; 0x538c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 29 	jmp	0x533c	; 0x533c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c6 29 	jmp	0x538c	; 0x538c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c6 29 	jmp	0x538c	; 0x538c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c6 29 	jmp	0x538c	; 0x538c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 c6 29 	jmp	0x538c	; 0x538c <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 ca 29 	jmp	0x5394	; 0x5394 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <TIMER1_uint16CalculateTimer1PreloadVal>:
/* Description     : Calculate Timer1 preload value     			  */
/* Input Arguments : float32 Copy_float32Delay_s , uint32 Copy_uint32OverflowNum	          */
/* Return          : uint16						          */
/**********************************************************************************/
static uint16 TIMER1_uint16CalculateTimer1PreloadVal(float32 Copy_float32Delay_s , uint32 Copy_uint32OverflowNum)
{
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	2a 97       	sbiw	r28, 0x0a	; 10
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	6b 83       	std	Y+3, r22	; 0x03
     f68:	7c 83       	std	Y+4, r23	; 0x04
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	2f 83       	std	Y+7, r18	; 0x07
     f70:	38 87       	std	Y+8, r19	; 0x08
     f72:	49 87       	std	Y+9, r20	; 0x09
     f74:	5a 87       	std	Y+10, r21	; 0x0a
	/* Define Some Local Variables */
	uint16 Local_uint16PreloadValue; 	/* Variable to hold preload value to be put in TCNT1 register before Timer1 starts */

	/* Check if passed delay is greater, less or equal to overflow time  */
	if(Copy_float32Delay_s > Global_float32Timer1OverflowTime)
     f76:	20 91 68 01 	lds	r18, 0x0168
     f7a:	30 91 69 01 	lds	r19, 0x0169
     f7e:	40 91 6a 01 	lds	r20, 0x016A
     f82:	50 91 6b 01 	lds	r21, 0x016B
     f86:	6b 81       	ldd	r22, Y+3	; 0x03
     f88:	7c 81       	ldd	r23, Y+4	; 0x04
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
     f92:	18 16       	cp	r1, r24
     f94:	9c f5       	brge	.+102    	; 0xffc <TIMER1_uint16CalculateTimer1PreloadVal+0xb2>
	{
		Local_uint16PreloadValue = TIMER1_OVERFLOW_TICKS * ((float32)Copy_uint32OverflowNum-(Copy_float32Delay_s/Global_float32Timer1OverflowTime));
     f96:	6f 81       	ldd	r22, Y+7	; 0x07
     f98:	78 85       	ldd	r23, Y+8	; 0x08
     f9a:	89 85       	ldd	r24, Y+9	; 0x09
     f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
     fa2:	7b 01       	movw	r14, r22
     fa4:	8c 01       	movw	r16, r24
     fa6:	20 91 68 01 	lds	r18, 0x0168
     faa:	30 91 69 01 	lds	r19, 0x0169
     fae:	40 91 6a 01 	lds	r20, 0x016A
     fb2:	50 91 6b 01 	lds	r21, 0x016B
     fb6:	6b 81       	ldd	r22, Y+3	; 0x03
     fb8:	7c 81       	ldd	r23, Y+4	; 0x04
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9c 01       	movw	r18, r24
     fc8:	ad 01       	movw	r20, r26
     fca:	c8 01       	movw	r24, r16
     fcc:	b7 01       	movw	r22, r14
     fce:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	3f c0       	rjmp	.+126    	; 0x107a <TIMER1_uint16CalculateTimer1PreloadVal+0x130>
	}
	else if(Copy_float32Delay_s < Global_float32Timer1OverflowTime)
     ffc:	20 91 68 01 	lds	r18, 0x0168
    1000:	30 91 69 01 	lds	r19, 0x0169
    1004:	40 91 6a 01 	lds	r20, 0x016A
    1008:	50 91 6b 01 	lds	r21, 0x016B
    100c:	6b 81       	ldd	r22, Y+3	; 0x03
    100e:	7c 81       	ldd	r23, Y+4	; 0x04
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	6c f5       	brge	.+90     	; 0x1076 <TIMER1_uint16CalculateTimer1PreloadVal+0x12c>
	{
		Local_uint16PreloadValue = TIMER1_OVERFLOW_TICKS * (1.0f-(Copy_float32Delay_s/Global_float32Timer1OverflowTime));
    101c:	20 91 68 01 	lds	r18, 0x0168
    1020:	30 91 69 01 	lds	r19, 0x0169
    1024:	40 91 6a 01 	lds	r20, 0x016A
    1028:	50 91 6b 01 	lds	r21, 0x016B
    102c:	6b 81       	ldd	r22, Y+3	; 0x03
    102e:	7c 81       	ldd	r23, Y+4	; 0x04
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9c 01       	movw	r18, r24
    103e:	ad 01       	movw	r20, r26
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	9f e3       	ldi	r25, 0x3F	; 63
    1048:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	57 e4       	ldi	r21, 0x47	; 71
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	02 c0       	rjmp	.+4      	; 0x107a <TIMER1_uint16CalculateTimer1PreloadVal+0x130>
	}
	else
	{
		Local_uint16PreloadValue = 0;
    1076:	1a 82       	std	Y+2, r1	; 0x02
    1078:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_uint16PreloadValue;
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    107e:	2a 96       	adiw	r28, 0x0a	; 10
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	08 95       	ret

00001098 <TIMER1_uint8SetDutyCycleChA>:
/*		     channel A							  */
/* Input Arguments : uint8 Copy_uint8DutyCycleChA			 	          */
/* Return          : uint8						                  */
/**********************************************************************************/
static uint8 TIMER1_uint8SetDutyCycleChA(uint8 Copy_uint8DutyCycleChA)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <TIMER1_uint8SetDutyCycleChA+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <TIMER1_uint8SetDutyCycleChA+0x8>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	8c 83       	std	Y+4, r24	; 0x04
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;     		/* A variable to hold function error status */
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_uint8DutyCycleChA <= 100)
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	85 36       	cpi	r24, 0x65	; 101
    10ae:	28 f4       	brcc	.+10     	; 0x10ba <TIMER1_uint8SetDutyCycleChA+0x22>
			#endif
		#endif


		/* Set Calculated Compare Match Value of Channel A */
		TIMER1_vidSetCompareMatchAValue(Local_uint16CompareMatchAValue);
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	0e 94 32 09 	call	0x1264	; 0x1264 <TIMER1_vidSetCompareMatchAValue>
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <TIMER1_uint8SetDutyCycleChA+0x24>

	}
	else
	{
		/* Function is not working as expected */
		Local_uint8ErrorStatus = RT_NOK;
    10ba:	1b 82       	std	Y+3, r1	; 0x03
	}

	return Local_uint8ErrorStatus;
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <TIMER1_uint8SetDutyCycleChB>:
/*		     channel B							  */
/* Input Arguments : uint8 Copy_uint8DutyCycleChB			 	          */
/* Return          : uint8						                  */
/**********************************************************************************/
static uint8 TIMER1_uint8SetDutyCycleChB(uint8 Copy_uint8DutyCycleChB)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <TIMER1_uint8SetDutyCycleChB+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <TIMER1_uint8SetDutyCycleChB+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	8c 83       	std	Y+4, r24	; 0x04
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;     		/* A variable to hold function error status */
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_uint8DutyCycleChB <= 100)
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	85 36       	cpi	r24, 0x65	; 101
    10e2:	28 f4       	brcc	.+10     	; 0x10ee <TIMER1_uint8SetDutyCycleChB+0x22>
			#endif
		#endif


		/* Set Calculated Compare Match Value of Channel B */
		TIMER1_vidSetCompareMatchBValue(Local_uint16CompareMatchBValue);
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	0e 94 44 09 	call	0x1288	; 0x1288 <TIMER1_vidSetCompareMatchBValue>
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <TIMER1_uint8SetDutyCycleChB+0x24>

	}
	else
	{
		/* Function is not working as expected */
		Local_uint8ErrorStatus = RT_NOK;
    10ee:	1b 82       	std	Y+3, r1	; 0x03
	}

	return Local_uint8ErrorStatus;
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <TIMER1_vidInit>:
/* 		     config file						  */
/* Input Arguments : void						          */
/* Return          : void						          */
/**********************************************************************************/
void TIMER1_vidInit(void)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	/******************************************Set TIMER1 Operating Mode*****************************************/
	/* Clear waveform generation bits */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1108:	af e4       	ldi	r26, 0x4F	; 79
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ef e4       	ldi	r30, 0x4F	; 79
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1116:	af e4       	ldi	r26, 0x4F	; 79
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ef e4       	ldi	r30, 0x4F	; 79
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8d 7f       	andi	r24, 0xFD	; 253
    1122:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    1124:	ae e4       	ldi	r26, 0x4E	; 78
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ee e4       	ldi	r30, 0x4E	; 78
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	87 7f       	andi	r24, 0xF7	; 247
    1130:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    1132:	ae e4       	ldi	r26, 0x4E	; 78
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ee e4       	ldi	r30, 0x4E	; 78
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8f 7e       	andi	r24, 0xEF	; 239
    113e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
	#elif TIMER1_MODE == CTC_OCR1A_MODE
		/* Set Timer1 to work in CTC mode with OCR1A value as top */
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1140:	af e4       	ldi	r26, 0x4F	; 79
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ef e4       	ldi	r30, 0x4F	; 79
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8e 7f       	andi	r24, 0xFE	; 254
    114c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    114e:	af e4       	ldi	r26, 0x4F	; 79
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ef e4       	ldi	r30, 0x4F	; 79
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8d 7f       	andi	r24, 0xFD	; 253
    115a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    115c:	ae e4       	ldi	r26, 0x4E	; 78
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ee e4       	ldi	r30, 0x4E	; 78
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 60       	ori	r24, 0x08	; 8
    1168:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8f 7e       	andi	r24, 0xEF	; 239
    1176:	8c 93       	st	X, r24
	#endif


	/******************************************Set Timer1 Output Compare Match Pin Mode for both channels A & B*****************************************/
	/* Clear Timer1 output compare match pin mode bits for channel A */
	TCCR1A &= TIMER1_OUTPUT_COMPARE_PIN_CHA_MODE_MASK;
    1178:	af e4       	ldi	r26, 0x4F	; 79
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8f 73       	andi	r24, 0x3F	; 63
    1184:	8c 93       	st	X, r24

	/* Clear Timer1 output compare match pin mode bits for channel B */
	TCCR1A &= TIMER1_OUTPUT_COMPARE_PIN_CHB_MODE_MASK;
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 7c       	andi	r24, 0xCF	; 207
    1192:	8c 93       	st	X, r24
	#if   TIMER1_MODE == OVERFLOW_MODE || TIMER1_MODE == CTC_OCR1A_MODE || TIMER1_MODE == CTC_ICR1_MODE
		/* Check selected Timer1 output compare match channel */
		#if   TIMER1_OUTPUT_COMPARE_MATCH_CHANNEL == CHANNELA
			#if   TIMER1_NON_PWM_OUTPUT_COMPARE_PIN_CHA_MODE == DISCONNECTED
				/* Disconnect Timer1 OC1A Pin */
				TCCR1A |= TIMER1_NON_PWM_OUTPUT_COMPARE_PIN_CHA_DISCONNECTED;
    1194:	af e4       	ldi	r26, 0x4F	; 79
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e4       	ldi	r30, 0x4F	; 79
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8c 93       	st	X, r24
	/* Check if Timer1 Hardware ICU Mode is Enabled or Not  */
	#if TIMER1_ICU_ENABLE == ENABLE
		/* Check selected Timer1 mode from config file */
		#if TIMER1_MODE != PHASE_FREQUENCY_CORRECT_PWM_ICR1_MODE && TIMER1_MODE != PHASE_CORRECT_PWM_ICR1_MODE && TIMER1_MODE != CTC_ICR1_MODE && TIMER1_MODE != FAST_PWM_ICR1_MODE
				/* Clear ICES1 Bit in TCCR1B */
				CLEAR_BIT(TCCR1B,TCCR1B_ICES1);
    11a0:	ae e4       	ldi	r26, 0x4E	; 78
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	ee e4       	ldi	r30, 0x4E	; 78
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7b       	andi	r24, 0xBF	; 191
    11ac:	8c 93       	st	X, r24

				/* Check Timer1 Input Capture Event Trigger Edge Type */
				#if   TIMER1_ICU_TRIGGER_EDGE == FALLING_EDGE
					/* Set Timer1 Input Capture Event Trigger Edge as Falling Edge */
					CLEAR_BIT(TCCR1B,TCCR1B_ICES1);
    11ae:	ae e4       	ldi	r26, 0x4E	; 78
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	ee e4       	ldi	r30, 0x4E	; 78
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 7b       	andi	r24, 0xBF	; 191
    11ba:	8c 93       	st	X, r24
	#if   TIMER1_OVERFLOW_INTERRUPT_ENABLE == ENABLE
				/* Enable Timer1 Overflow Interrupt */
				SET_BIT(TIMSK,TIMSK_TOIE1);
	#elif TIMER1_OVERFLOW_INTERRUPT_ENABLE == DISABLE
				/* Disable Timer1 Overflow Interrupt */
				CLEAR_BIT(TIMSK,TIMSK_TOIE1);
    11bc:	a9 e5       	ldi	r26, 0x59	; 89
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e9 e5       	ldi	r30, 0x59	; 89
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8b 7f       	andi	r24, 0xFB	; 251
    11c8:	8c 93       	st	X, r24
	#endif

	/* Check if Timer1 compare match for channel A interrupt is enabled or not from config file */
	#if   TIMER1_COMPARE_MATCH_A_INTERRUPT_ENABLE == ENABLE
				/* Enable Timer1 compare match for channel A interrupt */
				SET_BIT(TIMSK,TIMSK_OCIE1A);
    11ca:	a9 e5       	ldi	r26, 0x59	; 89
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e9 e5       	ldi	r30, 0x59	; 89
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	80 61       	ori	r24, 0x10	; 16
    11d6:	8c 93       	st	X, r24
	#if   TIMER1_COMPARE_MATCH_B_INTERRUPT_ENABLE == ENABLE
				/* Enable Timer1 compare match for channel B interrupt */
				SET_BIT(TIMSK,TIMSK_OCIE1B);
	#elif TIMER1_COMPARE_MATCH_B_INTERRUPT_ENABLE == DISABLE
				/* Disable Timer1 compare match for channel B interrupt */
				CLEAR_BIT(TIMSK,TIMSK_OCIE1B);
    11d8:	a9 e5       	ldi	r26, 0x59	; 89
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e9 e5       	ldi	r30, 0x59	; 89
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	87 7f       	andi	r24, 0xF7	; 247
    11e4:	8c 93       	st	X, r24
	#if   TIMER1_CAPTURE_EVENT_INTERRUPT_ENABLE == ENABLE
				/* Enable Timer1 capture event interrupt */
				SET_BIT(TIMSK,TIMSK_TICIE1);
	#elif TIMER1_CAPTURE_EVENT_INTERRUPT_ENABLE == DISABLE
				/* Disable Timer1 capture event interrupt */
				CLEAR_BIT(TIMSK,TIMSK_TICIE1);
    11e6:	a9 e5       	ldi	r26, 0x59	; 89
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e9 e5       	ldi	r30, 0x59	; 89
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7d       	andi	r24, 0xDF	; 223
    11f2:	8c 93       	st	X, r24
	#else
		#error
	#endif
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TIMER1_vidStart>:
/* 		     config file					          */
/* Input Arguments : void						          */
/* Return          : void						          */
/**********************************************************************************/
void TIMER1_vidStart(void)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer1 Clock Selection Bits */
	TCCR1B &= TIMER1_CLK_MASK;
    1202:	ae e4       	ldi	r26, 0x4E	; 78
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ee e4       	ldi	r30, 0x4E	; 78
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	88 7f       	andi	r24, 0xF8	; 248
    120e:	8c 93       	st	X, r24
	#elif TIMER1_PRESCALER == CLK_DIV_BY_256
		/* Set Timer1 clock to be system clock but divided by 256 prescaler */
		TCCR1B |= TIMER1_CLK_DIV_BY_256;
	#elif TIMER1_PRESCALER == CLK_DIV_BY_1024
		/* Set Timer1 clock to be system clock but divided by 1024 prescaler */
		TCCR1B |= TIMER1_CLK_DIV_BY_1024;
    1210:	ae e4       	ldi	r26, 0x4E	; 78
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ee e4       	ldi	r30, 0x4E	; 78
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	85 60       	ori	r24, 0x05	; 5
    121c:	8c 93       	st	X, r24
		/* Set Timer1 to work on external clock source on T1 pin (clock on rising edge) */
		TCCR1B |= TIMER1_EXT_CLK_RISING_EDGE;
	#else
			#error
#endif
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <TIMER1_vidStop>:
/* Description     : Stop Timer1  					          */
/* Input Arguments : void						          */
/* Return          : void						          */
/**********************************************************************************/
void TIMER1_vidStop(void)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer1 Clock Selection Bits (Stop Timer1) */
	TCCR1B &= TIMER1_CLK_MASK;
    122c:	ae e4       	ldi	r26, 0x4E	; 78
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ee e4       	ldi	r30, 0x4E	; 78
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	88 7f       	andi	r24, 0xF8	; 248
    1238:	8c 93       	st	X, r24
}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <TIMER1_vidSetPreloadValue>:
/* Description     : Set preload value					          */
/* Input Arguments : uint16 Copy_uint16PreloadValue                                     */
/* Return          : void                                		          */
/**********************************************************************************/
void TIMER1_vidSetPreloadValue(uint16 Copy_uint16PreloadValue)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <TIMER1_vidSetPreloadValue+0x6>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer1 Preload Value in TCNT1 Register  */
	TCNT1 = Copy_uint16PreloadValue;
    124e:	ec e4       	ldi	r30, 0x4C	; 76
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TIMER1_vidSetCompareMatchAValue>:
/* Description     : Set compare match A value				          */
/* Input Arguments : uint16 Copy_uint16CompareMatchAValue                               */
/* Return          : void                                		          */
/**********************************************************************************/
void TIMER1_vidSetCompareMatchAValue(uint16 Copy_uint16CompareMatchAValue)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <TIMER1_vidSetCompareMatchAValue+0x6>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer1 Compare Match Value for Channel A in OCR1A Register */
	OCR1A = Copy_uint16CompareMatchAValue;
    1272:	ea e4       	ldi	r30, 0x4A	; 74
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <TIMER1_vidSetCompareMatchBValue>:
/* Description     : Set compare match B value				          */
/* Input Arguments : uint16 Copy_uint16CompareMatchBValue                               */
/* Return          : void                                		          */
/**********************************************************************************/
void TIMER1_vidSetCompareMatchBValue(uint16 Copy_uint16CompareMatchBValue)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <TIMER1_vidSetCompareMatchBValue+0x6>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer1 Compare Match Value for Channel B in OCR1B Register */
	OCR1B = Copy_uint16CompareMatchBValue;
    1296:	e8 e4       	ldi	r30, 0x48	; 72
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <TIMER1_vidSetInputCaptureValue>:
/* Description     : Set input capture value				          */
/* Input Arguments : uint16 Copy_uint16InputCaptureValue                                */
/* Return          : void                                		          */
/**********************************************************************************/
void TIMER1_vidSetInputCaptureValue(uint16 Copy_uint16InputCaptureValue)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <TIMER1_vidSetInputCaptureValue+0x6>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer1 Input Capture Value in ICR1 Register */
	ICR1 = Copy_uint16InputCaptureValue;
    12ba:	e6 e4       	ldi	r30, 0x46	; 70
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <TIMER1_uint16ReadTimerValue>:
/* Description     : Read Timer/Counter1 Value				          */
/* Input Arguments : void                                                         */
/* Return          : uint16                                		          */
/**********************************************************************************/
uint16 TIMER1_uint16ReadTimerValue(void)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	/* Return Timer/Counter1 Value */
	return TCNT1;
    12d8:	ec e4       	ldi	r30, 0x4C	; 76
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <TIMER1_uint16ReadInputCaptureValue>:
/* Description     : Read Timer1 Input Capture Value			          */
/* Input Arguments : void                                                         */
/* Return          : void                                		          */
/**********************************************************************************/
uint16 TIMER1_uint16ReadInputCaptureValue(void)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	/* Return Timer1 Input Capture Value */
	return ICR1;
    12ee:	e6 e4       	ldi	r30, 0x46	; 70
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <TIMER1_vidEnableOverflowInterrupt>:
/* Description     : Enable Timer1 Overflow Interrupt			          */
/* Input Arguments : void                                                         */
/* Return          : void                                		          */
/**********************************************************************************/
void TIMER1_vidEnableOverflowInterrupt(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer1 Overflow Interrupt */
	SET_BIT(TIMSK,TIMSK_TOIE1);
    1304:	a9 e5       	ldi	r26, 0x59	; 89
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e9 e5       	ldi	r30, 0x59	; 89
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	84 60       	ori	r24, 0x04	; 4
    1310:	8c 93       	st	X, r24
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <TIMER1_vidDisableOverflowInterrupt>:
/* Description     : Disable Timer1 Overflow Interrupt			          */
/* Input Arguments : void                        			          */
/* Return          : void                               	                  */
/**********************************************************************************/
void TIMER1_vidDisableOverflowInterrupt(void)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 Overflow Interrupt */
	CLEAR_BIT(TIMSK,TIMSK_TOIE1);
    1320:	a9 e5       	ldi	r26, 0x59	; 89
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e9 e5       	ldi	r30, 0x59	; 89
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8b 7f       	andi	r24, 0xFB	; 251
    132c:	8c 93       	st	X, r24
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <TIMER1_vidEnableCompareMatchAInterrupt>:
/* Description     : Enable Timer1 Compare Match A Interrupt		          */
/* Input Arguments : void                            		    	          */
/* Return          : void                       		                  */
/**********************************************************************************/
void TIMER1_vidEnableCompareMatchAInterrupt(void)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer1 compare match for channel A interrupt */
	SET_BIT(TIMSK,TIMSK_OCIE1A);
    133c:	a9 e5       	ldi	r26, 0x59	; 89
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e9 e5       	ldi	r30, 0x59	; 89
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 61       	ori	r24, 0x10	; 16
    1348:	8c 93       	st	X, r24
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <TIMER1_vidDisableCompareMatchAInterrupt>:
/* Description     : Disable Timer1 Compare Match A Interrupt		          */
/* Input Arguments : void                       				  */
/* Return          : void                    			                  */
/**********************************************************************************/
void TIMER1_vidDisableCompareMatchAInterrupt(void)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 compare match for channel A interrupt */
	CLEAR_BIT(TIMSK,TIMSK_OCIE1A);
    1358:	a9 e5       	ldi	r26, 0x59	; 89
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e9 e5       	ldi	r30, 0x59	; 89
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8f 7e       	andi	r24, 0xEF	; 239
    1364:	8c 93       	st	X, r24
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <TIMER1_vidEnableCompareMatchBInterrupt>:
/* Description     : Enable Timer1 Compare Match B Interrupt		          */
/* Input Arguments : void                            		    	          */
/* Return          : void                       		                  */
/**********************************************************************************/
void TIMER1_vidEnableCompareMatchBInterrupt(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer1 compare match for channel B interrupt */
	SET_BIT(TIMSK,TIMSK_OCIE1B);
    1374:	a9 e5       	ldi	r26, 0x59	; 89
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e9 e5       	ldi	r30, 0x59	; 89
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	88 60       	ori	r24, 0x08	; 8
    1380:	8c 93       	st	X, r24
}
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <TIMER1_vidDisableCompareMatchBInterrupt>:
/* Description     : Disable Timer1 Compare Match B Interrupt		          */
/* Input Arguments : void                       				  */
/* Return          : void                    			                  */
/**********************************************************************************/
void TIMER1_vidDisableCompareMatchBInterrupt(void)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 compare match for channel B interrupt */
	CLEAR_BIT(TIMSK,TIMSK_OCIE1B);
    1390:	a9 e5       	ldi	r26, 0x59	; 89
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e9 e5       	ldi	r30, 0x59	; 89
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	87 7f       	andi	r24, 0xF7	; 247
    139c:	8c 93       	st	X, r24
}
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <TIMER1_vidEnableCaptureEventInterrupt>:
/* Description     : Enable Timer1 Capture Event Interrupt		          */
/* Input Arguments : void                            		    	          */
/* Return          : void                       		                  */
/**********************************************************************************/
void TIMER1_vidEnableCaptureEventInterrupt(void)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer1 capture event interrupt */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    13ac:	a9 e5       	ldi	r26, 0x59	; 89
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e9 e5       	ldi	r30, 0x59	; 89
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 62       	ori	r24, 0x20	; 32
    13b8:	8c 93       	st	X, r24
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <TIMER1_vidDisableCaptureEventInterrupt>:
/* Description     : Disable Timer1 Capture Event Interrupt		          */
/* Input Arguments : void                       				  */
/* Return          : void                    			                  */
/**********************************************************************************/
void TIMER1_vidDisableCaptureEventInterrupt(void)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 capture event interrupt */
	CLEAR_BIT(TIMSK,TIMSK_TICIE1);
    13c8:	a9 e5       	ldi	r26, 0x59	; 89
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e9 e5       	ldi	r30, 0x59	; 89
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8f 7d       	andi	r24, 0xDF	; 223
    13d4:	8c 93       	st	X, r24
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <TIMER1_uint8SetInputCaptureEventEdge>:
/* 		     (Rising or Falling) Edge				          */
/* Input Arguments : TIMER1_ICUTriggerEdge_e Copy_EdgeType_e         	          */
/* Return          : uint8                   			                  */
/**********************************************************************************/
uint8 TIMER1_uint8SetInputCaptureEventEdge(TIMER1_ICUTriggerEdge_e Copy_EdgeType_e)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <TIMER1_uint8SetInputCaptureEventEdge+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <TIMER1_uint8SetInputCaptureEventEdge+0x8>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	8b 83       	std	Y+3, r24	; 0x03
	/* Local Variables Definitions */
	uint8 Local_uint8ErrorStatus = RT_OK;   	/* A variable to hold function error status */
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8TCCR1BTemp; 			/* Temporary Variable to Hold Current TCCR1B Register Value */

	/* Read Current Value of TCCR1B Register then Assign it to Local_uint8TCCR1BTemp */
	Local_uint8TCCR1BTemp = TCCR1B;
    13f0:	ee e4       	ldi	r30, 0x4E	; 78
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	89 83       	std	Y+1, r24	; 0x01

	/* Clear ICES1 Bit in TCCR1B */
	CLEAR_BIT(Local_uint8TCCR1BTemp,TCCR1B_ICES1);
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	8f 7b       	andi	r24, 0xBF	; 191
    13fc:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed value is valid or not */
	switch(Copy_EdgeType_e)
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3d 83       	std	Y+5, r19	; 0x05
    1406:	2c 83       	std	Y+4, r18	; 0x04
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	31 f0       	breq	.+12     	; 0x141e <TIMER1_uint8SetInputCaptureEventEdge+0x42>
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	3d 81       	ldd	r19, Y+5	; 0x05
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	49 f0       	breq	.+18     	; 0x142e <TIMER1_uint8SetInputCaptureEventEdge+0x52>
    141c:	10 c0       	rjmp	.+32     	; 0x143e <TIMER1_uint8SetInputCaptureEventEdge+0x62>
	{
	case TIMER1_ICU_FALLING_EDGE:

		/* Set Timer1 Input Capture Event Trigger Edge as Falling Edge */
		CLEAR_BIT(Local_uint8TCCR1BTemp,TCCR1B_ICES1);
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	89 83       	std	Y+1, r24	; 0x01

		/* Write Modified Value of Local_uint8TCCR1BTemp Back Again to TCCR1B Register */
		TCCR1B = Local_uint8TCCR1BTemp;
    1424:	ee e4       	ldi	r30, 0x4E	; 78
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	80 83       	st	Z, r24
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <TIMER1_uint8SetInputCaptureEventEdge+0x64>
		break;

	case TIMER1_ICU_RISING_EDGE:

		/* Set Timer1 Input Capture Event Trigger Edge as Falling Edge */
		SET_BIT(Local_uint8TCCR1BTemp,TCCR1B_ICES1);
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	80 64       	ori	r24, 0x40	; 64
    1432:	89 83       	std	Y+1, r24	; 0x01

		/* Write Modified Value of Local_uint8TCCR1BTemp Back Again to TCCR1B Register */
		TCCR1B = Local_uint8TCCR1BTemp;
    1434:	ee e4       	ldi	r30, 0x4E	; 78
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <TIMER1_uint8SetInputCaptureEventEdge+0x64>
		break;

	default:

	         /* Function is not working as expected */
	         Local_uint8ErrorStatus = RT_NOK;
    143e:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_uint8ErrorStatus;
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <TIMER1_uint8SetOverflowCallback>:
/*		     immediately once Timer1 overflow ISR is triggered		  */
/* Input Arguments : void(*Copy_pvTIMER1OverflowFunc)(void)		          */
/* Return          : uint8						                  */
/**********************************************************************************/
uint8 TIMER1_uint8SetOverflowCallback(void(*Copy_pvTIMER1OverflowFunc)(void))
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <TIMER1_uint8SetOverflowCallback+0x6>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;   /* A variable to hold function error status */
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pvTIMER1OverflowFunc == NULL)
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	11 f4       	brne	.+4      	; 0x1472 <TIMER1_uint8SetOverflowCallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_uint8ErrorStatus = NULL_POINTER;
    146e:	19 82       	std	Y+1, r1	; 0x01
    1470:	06 c0       	rjmp	.+12     	; 0x147e <TIMER1_uint8SetOverflowCallback+0x2c>
	}
	else
	{
		/* Register Timer1 Overflow Callback Function */
		TIMER1_pvCaptureEventCallbackFunc = Copy_pvTIMER1OverflowFunc;
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	9b 81       	ldd	r25, Y+3	; 0x03
    1476:	90 93 79 01 	sts	0x0179, r25
    147a:	80 93 78 01 	sts	0x0178, r24
	}
	return Local_uint8ErrorStatus;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TIMER1_uint8SetCompareMatchACallback>:
/*		     immediately once Timer1 compare match A ISR is triggered	  */
/* Input Arguments : void(*Copy_pvTIMER1CompareMatchAFunc)(void)		  */
/* Return          : uint8						                  */
/**********************************************************************************/
uint8 TIMER1_uint8SetCompareMatchACallback(void(*Copy_pvTIMER1CompareMatchAFunc)(void))
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <TIMER1_uint8SetCompareMatchACallback+0x6>
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	9b 83       	std	Y+3, r25	; 0x03
    149a:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;   /* A variable to hold function error status */
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pvTIMER1CompareMatchAFunc == NULL)
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	11 f4       	brne	.+4      	; 0x14ac <TIMER1_uint8SetCompareMatchACallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_uint8ErrorStatus = NULL_POINTER;
    14a8:	19 82       	std	Y+1, r1	; 0x01
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <TIMER1_uint8SetCompareMatchACallback+0x2c>
	}
	else
	{
		/* Register Timer1 Compare Match For Channel A Function */
		TIMER1_pvComapareMatchACallbackFunc = Copy_pvTIMER1CompareMatchAFunc;
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	90 93 75 01 	sts	0x0175, r25
    14b4:	80 93 74 01 	sts	0x0174, r24
	}
	return Local_uint8ErrorStatus;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <TIMER1_uint8SetCompareMatchBCallback>:
/*		     immediately once Timer1 compare match B ISR is triggered	  */
/* Input Arguments : void(*Copy_pvTIMER1CompareMatchBFunc)(void)		  */
/* Return          : uint8						                  */
/**********************************************************************************/
uint8 TIMER1_uint8SetCompareMatchBCallback(void(*Copy_pvTIMER1CompareMatchBFunc)(void))
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <TIMER1_uint8SetCompareMatchBCallback+0x6>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	9b 83       	std	Y+3, r25	; 0x03
    14d4:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;   /* A variable to hold function error status */
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pvTIMER1CompareMatchBFunc == NULL)
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <TIMER1_uint8SetCompareMatchBCallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_uint8ErrorStatus = NULL_POINTER;
    14e2:	19 82       	std	Y+1, r1	; 0x01
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <TIMER1_uint8SetCompareMatchBCallback+0x2c>
	}
	else
	{
		/* Register Timer1 Compare Match For Channel A Function */
		TIMER1_pvComapareMatchBCallbackFunc = Copy_pvTIMER1CompareMatchBFunc;
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	90 93 77 01 	sts	0x0177, r25
    14ee:	80 93 76 01 	sts	0x0176, r24
	}
	return Local_uint8ErrorStatus;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <TIMER1_uint8SetCaptureEventCallback>:
/*		     immediately once Timer1 capture event ISR is triggered	  */
/* Input Arguments : void(*Copy_pvTIMER1CaptureEventFunc)(void)		 	  */
/* Return          : uint8						                  */
/**********************************************************************************/
uint8 TIMER1_uint8SetCaptureEventCallback(void(*Copy_pvTIMER1CaptureEventFunc)(void))
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <TIMER1_uint8SetCaptureEventCallback+0x6>
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	9b 83       	std	Y+3, r25	; 0x03
    150e:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;   /* A variable to hold function error status */
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pvTIMER1CaptureEventFunc == NULL)
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	11 f4       	brne	.+4      	; 0x1520 <TIMER1_uint8SetCaptureEventCallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_uint8ErrorStatus = NULL_POINTER;
    151c:	19 82       	std	Y+1, r1	; 0x01
    151e:	06 c0       	rjmp	.+12     	; 0x152c <TIMER1_uint8SetCaptureEventCallback+0x2c>
	}
	else
	{
		/* Register Timer1 Capture Event Function */
		TIMER1_pvCaptureEventCallbackFunc = Copy_pvTIMER1CaptureEventFunc;
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	9b 81       	ldd	r25, Y+3	; 0x03
    1524:	90 93 79 01 	sts	0x0179, r25
    1528:	80 93 78 01 	sts	0x0178, r24
	}
	return Local_uint8ErrorStatus;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <TIMER1_uint8SetBusyWait_ms>:
/*		     milli-second based on passed value of time in milli-second   */
/* Input Arguments : uint32 Copy_uint32DelayTime_ms				          */
/* Return          : uint8                                                	          */
/**********************************************************************************/
uint8 TIMER1_uint8SetBusyWait_ms(uint32 Copy_uint32DelayTime_ms)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	63 97       	sbiw	r28, 0x13	; 19
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	68 8b       	std	Y+16, r22	; 0x10
    1550:	79 8b       	std	Y+17, r23	; 0x11
    1552:	8a 8b       	std	Y+18, r24	; 0x12
    1554:	9b 8b       	std	Y+19, r25	; 0x13
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;	   /* A variable to hold function error status */
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	8f 87       	std	Y+15, r24	; 0x0f
	{
		float32 Local_float32DelayTime_s;               /* A variable to hold passed delay time in seconds */

		uint32 Local_uint32OverflowNum;		/* A variable to hold number of overflows required for Timer1 to achieve passed delay */

		uint32 Local_uint32OverflowCounter = 0;	/* A variable to count the number of overflows */
    155a:	1b 82       	std	Y+3, r1	; 0x03
    155c:	1c 82       	std	Y+4, r1	; 0x04
    155e:	1d 82       	std	Y+5, r1	; 0x05
    1560:	1e 82       	std	Y+6, r1	; 0x06

		uint16 Local_uint16PreloadValue ;		/* A variable to hold preload value to be calculated */

		/* Convert passed delay from milli-second to second */
		Local_float32DelayTime_s = (float32)Copy_uint32DelayTime_ms * 0.001f;
    1562:	68 89       	ldd	r22, Y+16	; 0x10
    1564:	79 89       	ldd	r23, Y+17	; 0x11
    1566:	8a 89       	ldd	r24, Y+18	; 0x12
    1568:	9b 89       	ldd	r25, Y+19	; 0x13
    156a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	2f e6       	ldi	r18, 0x6F	; 111
    1578:	32 e1       	ldi	r19, 0x12	; 18
    157a:	43 e8       	ldi	r20, 0x83	; 131
    157c:	5a e3       	ldi	r21, 0x3A	; 58
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8b 87       	std	Y+11, r24	; 0x0b
    1588:	9c 87       	std	Y+12, r25	; 0x0c
    158a:	ad 87       	std	Y+13, r26	; 0x0d
    158c:	be 87       	std	Y+14, r27	; 0x0e

		/* Get number of overflows required for Timer1 to reach passed delay */
//		Local_uint32OverflowNum = SERV_uint32CeilDev(Local_float32DelayTime_s,Global_float32Timer1OverflowTime);

		/* Get Preload Value */
		Local_uint16PreloadValue = TIMER1_uint16CalculateTimer1PreloadVal(Local_float32DelayTime_s,Local_uint32OverflowNum);
    158e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1590:	9c 85       	ldd	r25, Y+12	; 0x0c
    1592:	ad 85       	ldd	r26, Y+13	; 0x0d
    1594:	be 85       	ldd	r27, Y+14	; 0x0e
    1596:	2f 81       	ldd	r18, Y+7	; 0x07
    1598:	38 85       	ldd	r19, Y+8	; 0x08
    159a:	49 85       	ldd	r20, Y+9	; 0x09
    159c:	5a 85       	ldd	r21, Y+10	; 0x0a
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TIMER1_uint16CalculateTimer1PreloadVal>
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01

		/* Set Preload Value */
		TIMER1_vidSetPreloadValue(Local_uint16PreloadValue);
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	0e 94 20 09 	call	0x1240	; 0x1240 <TIMER1_vidSetPreloadValue>

		/* Start Timer 1 */
		TIMER1_vidStart();
    15b2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TIMER1_vidStart>
    15b6:	20 c0       	rjmp	.+64     	; 0x15f8 <TIMER1_uint8SetBusyWait_ms+0xbe>

		/* Wait until the delay is finished */
		while(Local_uint32OverflowCounter < Local_uint32OverflowNum)
		{
			/* Wait until TOV1 Flag is set by hardware */
			while(GET_BIT(TIFR,TIFR_TOV1) != 1);
    15b8:	e8 e5       	ldi	r30, 0x58	; 88
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	84 70       	andi	r24, 0x04	; 4
    15c4:	90 70       	andi	r25, 0x00	; 0
    15c6:	95 95       	asr	r25
    15c8:	87 95       	ror	r24
    15ca:	95 95       	asr	r25
    15cc:	87 95       	ror	r24
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	91 f7       	brne	.-28     	; 0x15b8 <TIMER1_uint8SetBusyWait_ms+0x7e>

			/* Clear TOV1 Flag by writing 1 to its bit in TIFR Register */
			SET_BIT(TIFR,TIFR_TOV1);
    15d4:	a8 e5       	ldi	r26, 0x58	; 88
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e5       	ldi	r30, 0x58	; 88
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	8c 93       	st	X, r24

			/* Increment Overflow Counter */
			Local_uint32OverflowCounter++;
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	ad 81       	ldd	r26, Y+5	; 0x05
    15e8:	be 81       	ldd	r27, Y+6	; 0x06
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	a1 1d       	adc	r26, r1
    15ee:	b1 1d       	adc	r27, r1
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	ad 83       	std	Y+5, r26	; 0x05
    15f6:	be 83       	std	Y+6, r27	; 0x06

		/* Start Timer 1 */
		TIMER1_vidStart();

		/* Wait until the delay is finished */
		while(Local_uint32OverflowCounter < Local_uint32OverflowNum)
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	4d 81       	ldd	r20, Y+5	; 0x05
    15fe:	5e 81       	ldd	r21, Y+6	; 0x06
    1600:	8f 81       	ldd	r24, Y+7	; 0x07
    1602:	98 85       	ldd	r25, Y+8	; 0x08
    1604:	a9 85       	ldd	r26, Y+9	; 0x09
    1606:	ba 85       	ldd	r27, Y+10	; 0x0a
    1608:	28 17       	cp	r18, r24
    160a:	39 07       	cpc	r19, r25
    160c:	4a 07       	cpc	r20, r26
    160e:	5b 07       	cpc	r21, r27
    1610:	98 f2       	brcs	.-90     	; 0x15b8 <TIMER1_uint8SetBusyWait_ms+0x7e>
			/* Increment Overflow Counter */
			Local_uint32OverflowCounter++;
		}

		/* Stop Timer1 */
		TIMER1_vidStop();
    1612:	0e 94 12 09 	call	0x1224	; 0x1224 <TIMER1_vidStop>
	else
	{
		/* Function is not working as expected */
		Local_uint8ErrorStatus = RT_NOK;
	}
	return Local_uint8ErrorStatus;
    1616:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1618:	63 96       	adiw	r28, 0x13	; 19
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <TIMER1_uint8StartPWMChannelA>:
/*		     Channel A						          */
/* Input Arguments : uint8 Copy_uint8DutyCyclePercentage				  */
/* Return          : void						          */
/**********************************************************************************/
uint8 TIMER1_uint8StartPWMChannelA(uint8 Copy_uint8DutyCyclePercentage)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <TIMER1_uint8StartPWMChannelA+0x6>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	8a 83       	std	Y+2, r24	; 0x02

	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;   /* A variable to hold function error status */
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed value is out of range or not */
	if(Copy_uint8DutyCyclePercentage <= 100)
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	85 36       	cpi	r24, 0x65	; 101
    163e:	30 f4       	brcc	.+12     	; 0x164c <TIMER1_uint8StartPWMChannelA+0x22>
	{
		/* Set Duty Cycle Percentage */
		TIMER1_uint8SetDutyCycleChA(Copy_uint8DutyCyclePercentage);
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	0e 94 4c 08 	call	0x1098	; 0x1098 <TIMER1_uint8SetDutyCycleChA>

		/* Start Timer1 */
		TIMER1_vidStart();
    1646:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TIMER1_vidStart>
    164a:	01 c0       	rjmp	.+2      	; 0x164e <TIMER1_uint8StartPWMChannelA+0x24>
	}
	else
	{
		/* Function is not working as expected */
		Local_uint8ErrorStatus = RT_NOK;
    164c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_uint8ErrorStatus;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <TIMER1_uint8StartPWMChannelB>:
/*		     Channel B						          */
/* Input Arguments : uint8 Copy_uint8DutyCyclePercentage				  */
/* Return          : void						          */
/**********************************************************************************/
uint8 TIMER1_uint8StartPWMChannelB(uint8 Copy_uint8DutyCyclePercentage)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <TIMER1_uint8StartPWMChannelB+0x6>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_uint8ErrorStatus = RT_OK;   /* A variable to hold function error status */
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed value is out of range or not */
	if(Copy_uint8DutyCyclePercentage <= 100)
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	85 36       	cpi	r24, 0x65	; 101
    166e:	30 f4       	brcc	.+12     	; 0x167c <TIMER1_uint8StartPWMChannelB+0x22>
	{
		/* Set Duty Cycle Percentage */
		TIMER1_uint8SetDutyCycleChB(Copy_uint8DutyCyclePercentage);
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	0e 94 66 08 	call	0x10cc	; 0x10cc <TIMER1_uint8SetDutyCycleChB>

		/* Start Timer1 */
		TIMER1_vidStart();
    1676:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TIMER1_vidStart>
    167a:	01 c0       	rjmp	.+2      	; 0x167e <TIMER1_uint8StartPWMChannelB+0x24>
	}
	else
	{
		/* Function is not working as expected */
		Local_uint8ErrorStatus = RT_NOK;
    167c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_uint8ErrorStatus;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <__vector_6>:
/************************************************/
/*   Timer/Counter1 Capture Event Interrupt	*/
/************************************************/
void __vector_6 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_6 (void)
{
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	/* Check if Timer1 capture event function is registered or not */
	if(TIMER1_pvCaptureEventCallbackFunc != NULL)
    16b4:	80 91 78 01 	lds	r24, 0x0178
    16b8:	90 91 79 01 	lds	r25, 0x0179
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	29 f0       	breq	.+10     	; 0x16ca <__vector_6+0x40>
	{
		/* Invoke Timer1 capture event function */
		TIMER1_pvCaptureEventCallbackFunc();
    16c0:	e0 91 78 01 	lds	r30, 0x0178
    16c4:	f0 91 79 01 	lds	r31, 0x0179
    16c8:	09 95       	icall
	}
}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <__vector_7>:
/************************************************/
/*   Timer/Counter1 Compare Match A Interrupt	*/
/************************************************/
void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_7 (void)
{
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	2f 93       	push	r18
    16fc:	3f 93       	push	r19
    16fe:	4f 93       	push	r20
    1700:	5f 93       	push	r21
    1702:	6f 93       	push	r22
    1704:	7f 93       	push	r23
    1706:	8f 93       	push	r24
    1708:	9f 93       	push	r25
    170a:	af 93       	push	r26
    170c:	bf 93       	push	r27
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	/* Check if Timer1 compare match for channel A function is registered or not */
	if(TIMER1_pvComapareMatchACallbackFunc != NULL)
    171a:	80 91 74 01 	lds	r24, 0x0174
    171e:	90 91 75 01 	lds	r25, 0x0175
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	29 f0       	breq	.+10     	; 0x1730 <__vector_7+0x40>
	{
		/* Invoke Timer1 compare match for channel A function */
		TIMER1_pvComapareMatchACallbackFunc();
    1726:	e0 91 74 01 	lds	r30, 0x0174
    172a:	f0 91 75 01 	lds	r31, 0x0175
    172e:	09 95       	icall
	}
}
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_8>:
/************************************************/
/*   Timer/Counter1 Compare Match B Interrupt	*/
/************************************************/
ISR(VECTOR_8)
{
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	/* Check if Timer1 compare match for channel B function is registered or not */
	if(TIMER1_pvComapareMatchBCallbackFunc != NULL)
    1780:	80 91 76 01 	lds	r24, 0x0176
    1784:	90 91 77 01 	lds	r25, 0x0177
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	29 f0       	breq	.+10     	; 0x1796 <__vector_8+0x40>
	{
		/* Invoke Timer1 compare match for channel B function */
		TIMER1_pvComapareMatchBCallbackFunc();
    178c:	e0 91 76 01 	lds	r30, 0x0176
    1790:	f0 91 77 01 	lds	r31, 0x0177
    1794:	09 95       	icall
	}
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	ff 91       	pop	r31
    179c:	ef 91       	pop	r30
    179e:	bf 91       	pop	r27
    17a0:	af 91       	pop	r26
    17a2:	9f 91       	pop	r25
    17a4:	8f 91       	pop	r24
    17a6:	7f 91       	pop	r23
    17a8:	6f 91       	pop	r22
    17aa:	5f 91       	pop	r21
    17ac:	4f 91       	pop	r20
    17ae:	3f 91       	pop	r19
    17b0:	2f 91       	pop	r18
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <__vector_9>:
/************************************************/
/* 	Timer/Counter1 Overflow Interrupt	*/
/************************************************/
ISR(VECTOR_9)
{
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	11 24       	eor	r1, r1
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	ef 93       	push	r30
    17dc:	ff 93       	push	r31
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
	/* Check if Timer1 overflow function is registered or not */
	if(TIMER1_pvOverflowCallbackFunc != NULL)
    17e6:	80 91 72 01 	lds	r24, 0x0172
    17ea:	90 91 73 01 	lds	r25, 0x0173
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	29 f0       	breq	.+10     	; 0x17fc <__vector_9+0x40>
	{
		/* Invoke Timer1 overflow function */
		TIMER1_pvOverflowCallbackFunc();
    17f2:	e0 91 72 01 	lds	r30, 0x0172
    17f6:	f0 91 73 01 	lds	r31, 0x0173
    17fa:	09 95       	icall
	}
}
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	bf 91       	pop	r27
    1806:	af 91       	pop	r26
    1808:	9f 91       	pop	r25
    180a:	8f 91       	pop	r24
    180c:	7f 91       	pop	r23
    180e:	6f 91       	pop	r22
    1810:	5f 91       	pop	r21
    1812:	4f 91       	pop	r20
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <TIMER0_u8CalculateTimer0PreloadVal>:
 Description     : Calculate Timer0 preload value     			  
 Input Arguments : f32 Copy_f32Delay_s , u32 Copy_u32OverflowNum	      
 Return          : uint8							          
 =============================================================================================================*/
static uint8 TIMER0_u8CalculateTimer0PreloadVal(float32 Copy_f32Delay_s , float32 Copy_u32OverflowNum)
{	/* Variable to hold preload value to be put in TCNT0 register before Timer0 starts */
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	29 97       	sbiw	r28, 0x09	; 9
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	6a 83       	std	Y+2, r22	; 0x02
    1838:	7b 83       	std	Y+3, r23	; 0x03
    183a:	8c 83       	std	Y+4, r24	; 0x04
    183c:	9d 83       	std	Y+5, r25	; 0x05
    183e:	2e 83       	std	Y+6, r18	; 0x06
    1840:	3f 83       	std	Y+7, r19	; 0x07
    1842:	48 87       	std	Y+8, r20	; 0x08
    1844:	59 87       	std	Y+9, r21	; 0x09
	uint8 Local_u8PreloadValue = 0; 	
    1846:	19 82       	std	Y+1, r1	; 0x01
	/* Check if passed delay is greater, less or equal to overflow time  */
	if(Copy_f32Delay_s > Global_f32Timer0OverflowTime)
    1848:	20 91 6c 01 	lds	r18, 0x016C
    184c:	30 91 6d 01 	lds	r19, 0x016D
    1850:	40 91 6e 01 	lds	r20, 0x016E
    1854:	50 91 6f 01 	lds	r21, 0x016F
    1858:	6a 81       	ldd	r22, Y+2	; 0x02
    185a:	7b 81       	ldd	r23, Y+3	; 0x03
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1864:	18 16       	cp	r1, r24
    1866:	64 f5       	brge	.+88     	; 0x18c0 <TIMER0_u8CalculateTimer0PreloadVal+0x9e>
	{
		Local_u8PreloadValue = TIMER0_OVERFLOW_TICKS * ((float32)Copy_u32OverflowNum-(Copy_f32Delay_s/Global_f32Timer0OverflowTime));
    1868:	20 91 6c 01 	lds	r18, 0x016C
    186c:	30 91 6d 01 	lds	r19, 0x016D
    1870:	40 91 6e 01 	lds	r20, 0x016E
    1874:	50 91 6f 01 	lds	r21, 0x016F
    1878:	6a 81       	ldd	r22, Y+2	; 0x02
    187a:	7b 81       	ldd	r23, Y+3	; 0x03
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	9d 81       	ldd	r25, Y+5	; 0x05
    1880:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9c 01       	movw	r18, r24
    188a:	ad 01       	movw	r20, r26
    188c:	6e 81       	ldd	r22, Y+6	; 0x06
    188e:	7f 81       	ldd	r23, Y+7	; 0x07
    1890:	88 85       	ldd	r24, Y+8	; 0x08
    1892:	99 85       	ldd	r25, Y+9	; 0x09
    1894:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	53 e4       	ldi	r21, 0x43	; 67
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	3d c0       	rjmp	.+122    	; 0x193a <TIMER0_u8CalculateTimer0PreloadVal+0x118>
	}
	else if(Copy_f32Delay_s < Global_f32Timer0OverflowTime)
    18c0:	20 91 6c 01 	lds	r18, 0x016C
    18c4:	30 91 6d 01 	lds	r19, 0x016D
    18c8:	40 91 6e 01 	lds	r20, 0x016E
    18cc:	50 91 6f 01 	lds	r21, 0x016F
    18d0:	6a 81       	ldd	r22, Y+2	; 0x02
    18d2:	7b 81       	ldd	r23, Y+3	; 0x03
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	64 f5       	brge	.+88     	; 0x1938 <TIMER0_u8CalculateTimer0PreloadVal+0x116>
	{
		Local_u8PreloadValue = TIMER0_OVERFLOW_TICKS * (1.0f-(Copy_f32Delay_s/Global_f32Timer0OverflowTime));
    18e0:	20 91 6c 01 	lds	r18, 0x016C
    18e4:	30 91 6d 01 	lds	r19, 0x016D
    18e8:	40 91 6e 01 	lds	r20, 0x016E
    18ec:	50 91 6f 01 	lds	r21, 0x016F
    18f0:	6a 81       	ldd	r22, Y+2	; 0x02
    18f2:	7b 81       	ldd	r23, Y+3	; 0x03
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9c 01       	movw	r18, r24
    1902:	ad 01       	movw	r20, r26
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	80 e8       	ldi	r24, 0x80	; 128
    190a:	9f e3       	ldi	r25, 0x3F	; 63
    190c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	53 e4       	ldi	r21, 0x43	; 67
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	01 c0       	rjmp	.+2      	; 0x193a <TIMER0_u8CalculateTimer0PreloadVal+0x118>
	}
	else
	{
		Local_u8PreloadValue = 0;
    1938:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8PreloadValue;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
}
    193c:	29 96       	adiw	r28, 0x09	; 9
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <TIMER0_u8SetDutyCycle>:
 Description     : Set duty cycle value of PWM to be generated by Timer0        
 Input Arguments : u8 Copy_u8DutyCycle			 	       
 Return          : u8						                
 =============================================================================================================*/
uint8 TIMER0_u8SetDutyCycle(uint8 Copy_u8DutyCycle)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <TIMER0_u8SetDutyCycle+0x6>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	8b 83       	std	Y+3, r24	; 0x03
	/* Define Some Local Variables */
	uint8 Local_u8ErrorState = TRUE;     		/* A variable to hold function error status */
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_u8DutyCycle <= 100)
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	85 36       	cpi	r24, 0x65	; 101
    1964:	50 f5       	brcc	.+84     	; 0x19ba <TIMER0_u8SetDutyCycle+0x6c>
			#endif
		#elif TIMER0_MODE == PHASE_CORRECT_PWM_MODE

			#if   TIMER0_PHASE_CORRECT_PWM_OUTPUT_COMPARE_PIN_MODE == NON_INVERTED_MODE

			Local_u8CompareMatchValue = TIMER0_OVERFLOW_TICKS * ((float32)Copy_u8DutyCycle * 0.01f);
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	2a e0       	ldi	r18, 0x0A	; 10
    1982:	37 ed       	ldi	r19, 0xD7	; 215
    1984:	43 e2       	ldi	r20, 0x23	; 35
    1986:	5c e3       	ldi	r21, 0x3C	; 60
    1988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	53 e4       	ldi	r21, 0x43	; 67
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	89 83       	std	Y+1, r24	; 0x01

			#endif
		#endif

		/* Set Calculated Compare Match Value in OC0 Register */
		TIMER0_vidSetCompareMatchValue(Local_u8CompareMatchValue);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <TIMER0_vidSetCompareMatchValue>
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <TIMER0_u8SetDutyCycle+0x6e>
	}
	else
	{
		/* Function is not working as expected */
		Local_u8ErrorState = FALSE;
    19ba:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <TIMER0_vidInit>:
		     config file						
Input Arguments : void						    
Return          : void						 
=============================================================================================================*/
void TIMER0_vidInit(void)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	/* =========================================================================================================
	                                          Set TIMER0 Operating Mode
	 =========================================================================================================*/
	/* Clear waveform generation bits */
	TCCR0 &= TIMER0_WAVEFORM_GENERATION_MASK;
    19d2:	a3 e5       	ldi	r26, 0x53	; 83
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e3 e5       	ldi	r30, 0x53	; 83
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	87 7b       	andi	r24, 0xB7	; 183
    19de:	8c 93       	st	X, r24
        #elif TIMER0_MODE == FAST_PWM_MODE
		/* Set Timer0 to work in fast PWM mode */
		TCCR0 |= TIMER0_FAST_PWM_MODE;
        #elif TIMER0_MODE == PHASE_CORRECT_PWM_MODE
		/* Set Timer0 to work in phase correct PWM mode */
		TCCR0 |= TIMER0_PHASE_CORRECT_PWM_MODE;
    19e0:	a3 e5       	ldi	r26, 0x53	; 83
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e3 e5       	ldi	r30, 0x53	; 83
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 64       	ori	r24, 0x40	; 64
    19ec:	8c 93       	st	X, r24

	/* =========================================================================================================
	                                    Set Timer0 Output Compare Match Pin Mode
	 =========================================================================================================*/
        /* Clear Timer0 Output Compare Match Pin Mode Bits */
	TCCR0 &= TIMER0_OUTPUT_COMPARE_PIN_MODE_MASK;
    19ee:	a3 e5       	ldi	r26, 0x53	; 83
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e3 e5       	ldi	r30, 0x53	; 83
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7c       	andi	r24, 0xCF	; 207
    19fa:	8c 93       	st	X, r24
	      #if   TIMER0_PHASE_CORRECT_PWM_OUTPUT_COMPARE_PIN_MODE == DISCONNECTED
		    /* Disconnect Timer0 output compare match pin */
		    TCCR0 |= TIMER0_PHASE_CORRECT_PWM_OUTPUT_COMPARE_PIN_DISCONNECTED;
	      #elif TIMER0_PHASE_CORRECT_PWM_OUTPUT_COMPARE_PIN_MODE == NON_INVERTED_MODE
		    /* Set Timer0 Phase Correct PWM to Operate in Non Inverted Mode */
		    TCCR0 |= TIMER0_PHASE_CORRECT_PWM_OUTPUT_COMPARE_PIN_NON_INVERTED_MODE;
    19fc:	a3 e5       	ldi	r26, 0x53	; 83
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e3 e5       	ldi	r30, 0x53	; 83
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 62       	ori	r24, 0x20	; 32
    1a08:	8c 93       	st	X, r24
	                                Enable/Disable Timer0 Overflow and Compare Match Interrupts
		 =========================================================================================================
        Check if Timer0 overflow interrupt is enabled or not from config file */
       #if   TIMER0_OVERFLOW_INTERRUPT_ENABLE == ENABLE
		    /* Enable Timer0 Overflow Interrupt */
		    SET_BIT(TIMSK,TOIE0);
    1a0a:	a9 e5       	ldi	r26, 0x59	; 89
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e9 e5       	ldi	r30, 0x59	; 89
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	81 60       	ori	r24, 0x01	; 1
    1a16:	8c 93       	st	X, r24
       #endif
	   
       /* Check if Timer0 compare match interrupt is enabled or not from config file */
       #if   TIMER0_COMPARE_MATCH_INTERRUPT_ENABLE == ENABLE
		    /* Enable Timer0 Compare Match Interrupt */
		    SET_BIT(TIMSK,OCIE0);
    1a18:	a9 e5       	ldi	r26, 0x59	; 89
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e9 e5       	ldi	r30, 0x59	; 89
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	82 60       	ori	r24, 0x02	; 2
    1a24:	8c 93       	st	X, r24
		    /* Disable Timer0 Compare Match Interrupt */
		    CLEAR_BIT(TIMSK,OCIE0);
       #else
       	       #error "Wrong Timer0 Compare Match Interrupt Enable Signal Configuration !"
       #endif
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <TIMER0_vidStart>:
 Description     : Start Timer0 by setting Timer0 prescaler selected from  config file					         
 Input Arguments : void						          
 Return          : void						        
 =============================================================================================================*/
void TIMER0_vidStart(void)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer0 Clock Selection Bits */
	TCCR0 &= TIMER0_CLK_MASK;
    1a34:	a3 e5       	ldi	r26, 0x53	; 83
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e3 e5       	ldi	r30, 0x53	; 83
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 7f       	andi	r24, 0xF8	; 248
    1a40:	8c 93       	st	X, r24
	#elif TIMER0_PRESCALER == CLK_DIV_BY_8
	        /* Set Timer0 clock to be system clock but divided by 8 prescaler */
		TCCR0 |= TIMER0_CLK_DIV_BY_8;
	#elif TIMER0_PRESCALER == CLK_DIV_BY_64
	        /* Set Timer0 clock to be system clock but divided by 64 prescaler */
		TCCR0 |= TIMER0_CLK_DIV_BY_64;
    1a42:	a3 e5       	ldi	r26, 0x53	; 83
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e3 e5       	ldi	r30, 0x53	; 83
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	83 60       	ori	r24, 0x03	; 3
    1a4e:	8c 93       	st	X, r24
	      	/* Set Timer0 to work on external clock source on T0 pin (clock on rising edge) */
		TCCR0 |= TIMER0_EXT_CLK_RISING_EDGE;
	#else
        	#error "Wrong Prescaler Configuration !"
	#endif
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <TIMER0_vidStop>:
 Description     : Stop Timer0  					          
 Input Arguments : void						          
 Return          : void						          
 =============================================================================================================*/
void TIMER0_vidStop(void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer0 Clock Selection Bits (Stop Timer0) */
	TCCR0 &= TIMER0_CLK_MASK;
    1a5e:	a3 e5       	ldi	r26, 0x53	; 83
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e3 e5       	ldi	r30, 0x53	; 83
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	88 7f       	andi	r24, 0xF8	; 248
    1a6a:	8c 93       	st	X, r24
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <TIMER0_vidSetPreloadValue>:
 Description     : Set preload value					          
 Input Arguments : u8 Copy_u8PreloadValue                                       
 Return          : void                                		          
 =============================================================================================================*/
void TIMER0_vidSetPreloadValue(uint8 Copy_u8PreloadValue)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer0 Preload Value in TCNT0 Register */
	TCNT0 = Copy_u8PreloadValue;
    1a7e:	e2 e5       	ldi	r30, 0x52	; 82
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	80 83       	st	Z, r24
}
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <TIMER0_vidSetCompareMatchValue>:
 Description     : Set compare match value				          
 Input Arguments : u8 Copy_u8CompareMatchValue                                  
 Return          : void                                		          
 =============================================================================================================*/
void TIMER0_vidSetCompareMatchValue(uint8 Copy_u8CompareMatchValue)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	89 83       	std	Y+1, r24	; 0x01
	/* Set Compare Match Value in OCR0 Register */
	OCR0 = Copy_u8CompareMatchValue;
    1a9a:	ec e5       	ldi	r30, 0x5C	; 92
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	80 83       	st	Z, r24
}
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <TIMER0_u8ReadTimerValue>:
 Description     : Read Timer/Counter0 Value				          
 Input Arguments : void                                                         
 Return          : u8	                                		          
 =============================================================================================================*/
uint8 TIMER0_u8ReadTimerValue(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	/* Return Timer/Counter0 Value */
	return TCNT0;
    1ab2:	e2 e5       	ldi	r30, 0x52	; 82
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <TIMER0_vidEnableOverflowInterrupt>:
 Description     : Enable Timer0 Overflow Interrupt			          
 Input Arguments : void                                                         
 Return          : void                                		          
 =============================================================================================================*/
void TIMER0_vidEnableOverflowInterrupt(void)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer0 Overflow Interrupt */
	SET_BIT(TIMSK,TOIE0);
    1ac6:	a9 e5       	ldi	r26, 0x59	; 89
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e9 e5       	ldi	r30, 0x59	; 89
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	81 60       	ori	r24, 0x01	; 1
    1ad2:	8c 93       	st	X, r24
}
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <TIMER0_vidDisableOverflowInterrupt>:
 Description     : Disable Timer0 Overflow Interrupt
 Input Arguments : void
 Return          : void
 =============================================================================================================*/
void TIMER0_vidDisableOverflowInterrupt(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer0 Overflow Interrupt */
	CLEAR_BIT(TIMSK,TOIE0);
    1ae2:	a9 e5       	ldi	r26, 0x59	; 89
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e9 e5       	ldi	r30, 0x59	; 89
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8e 7f       	andi	r24, 0xFE	; 254
    1aee:	8c 93       	st	X, r24
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <TIMER0_vidEnableCompareMatchInterrupt>:
 Description     : Enable Timer0 Compare Match Interrupt		          
 Input Arguments : void                            		    	          
 Return          : void                       		                  
 =============================================================================================================*/
void TIMER0_vidEnableCompareMatchInterrupt(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer0 Compare Match Interrupt */
	SET_BIT(TIMSK,OCIE0);
    1afe:	a9 e5       	ldi	r26, 0x59	; 89
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e9 e5       	ldi	r30, 0x59	; 89
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	82 60       	ori	r24, 0x02	; 2
    1b0a:	8c 93       	st	X, r24
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <TIMER0_vidDisableCompareMatchInterrupt>:
 Description     : Disable Timer0 Compare Match Interrupt		          
 Input Arguments : void                       				  
 Return          : void                    			                  
 =============================================================================================================*/
void TIMER0_vidDisableCompareMatchInterrupt(void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer0 Compare Match Interrupt */
	CLEAR_BIT(TIMSK,OCIE0);
    1b1a:	a9 e5       	ldi	r26, 0x59	; 89
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e9 e5       	ldi	r30, 0x59	; 89
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8d 7f       	andi	r24, 0xFD	; 253
    1b26:	8c 93       	st	X, r24
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <TIMER0_u8SetOverflowCallback>:
		     immediately once Timer0 overflow ISR is triggered		  
 Input Arguments : void(*Copy_pvTIMER0OverflowFunc)(void)		          
 Return          : u8						                  
 =============================================================================================================*/
uint8 TIMER0_u8SetOverflowCallback(void(*Copy_pvTIMER0OverflowFunc)(void))
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <TIMER0_u8SetOverflowCallback+0x6>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	9b 83       	std	Y+3, r25	; 0x03
    1b3c:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_u8ErrorState = TRUE;     /* A variable to hold function error status */
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer to function is null pointer or not */
	if(Copy_pvTIMER0OverflowFunc == NULL)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	9b 81       	ldd	r25, Y+3	; 0x03
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	11 f4       	brne	.+4      	; 0x1b4e <TIMER0_u8SetOverflowCallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_u8ErrorState = NULL;
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <TIMER0_u8SetOverflowCallback+0x2c>
	}
	else
	{
		/* Register Timer0 Overflow Callback Function */
		TIMER0_pvOverflowCallbakFunc = Copy_pvTIMER0OverflowFunc;
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	9b 81       	ldd	r25, Y+3	; 0x03
    1b52:	90 93 7b 01 	sts	0x017B, r25
    1b56:	80 93 7a 01 	sts	0x017A, r24
	}

	return Local_u8ErrorState;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <TIMER0_u8SetCompareMatchCallback>:
		     immediately once Timer0 compare match ISR is triggered	  
 Input Arguments : void(*Copy_pvTIMER0CompareMatchFunc)(void)		          
 Return          : u8						                  
 =============================================================================================================*/
uint8 TIMER0_u8SetCompareMatchCallback(void(*Copy_pvTIMER0CompareMatchFunc)(void))
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <TIMER0_u8SetCompareMatchCallback+0x6>
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	9b 83       	std	Y+3, r25	; 0x03
    1b76:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_u8ErrorStatus = TRUE;     /* A variable to hold function error status */
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer to function is null pointer or not */
	if(Copy_pvTIMER0CompareMatchFunc == NULL)
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	11 f4       	brne	.+4      	; 0x1b88 <TIMER0_u8SetCompareMatchCallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_u8ErrorStatus = NULL;
    1b84:	19 82       	std	Y+1, r1	; 0x01
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <TIMER0_u8SetCompareMatchCallback+0x2c>
	}
	else
	{
		/* Register Timer0 Overflow Callback Function */
		TIMER0_pvComapareMatchCallbakFunc = Copy_pvTIMER0CompareMatchFunc;
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	90 93 7d 01 	sts	0x017D, r25
    1b90:	80 93 7c 01 	sts	0x017C, r24
	}

	return Local_u8ErrorStatus;
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <TIMER0_u8SetBusyWait_ms>:
 Description     : A function used to delay the processor for some time in milli-second based on passed value of time in milli-second   
 Input Arguments : u32 Copy_u32DelayTime_ms				          
 Return          : u8                                                	          
 =============================================================================================================*/
uint8 TIMER0_u8SetBusyWait_ms(uint32 Copy_u32DelayTime_ms)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	62 97       	sbiw	r28, 0x12	; 18
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	6f 87       	std	Y+15, r22	; 0x0f
    1bb8:	78 8b       	std	Y+16, r23	; 0x10
    1bba:	89 8b       	std	Y+17, r24	; 0x11
    1bbc:	9a 8b       	std	Y+18, r25	; 0x12
	/* Define Some Local Variables */
	uint8 Local_u8ErrorStatus = TRUE;     		/* A variable to hold function error status */
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	8e 87       	std	Y+14, r24	; 0x0e
	{
		float32 Local_f32DelayTime_s;           /* A variable to hold passed delay time in seconds */

		uint32 Local_u32OverflowNum;		/* A variable to hold number of overflows required for Timer0 to achieve passed delay */

		uint32 Local_u32OverflowCounter = 0;	/* A variable to count the number of overflows */
    1bc2:	1a 82       	std	Y+2, r1	; 0x02
    1bc4:	1b 82       	std	Y+3, r1	; 0x03
    1bc6:	1c 82       	std	Y+4, r1	; 0x04
    1bc8:	1d 82       	std	Y+5, r1	; 0x05

		uint8 Local_u8PreloadValue = 0 ;		/* A variable to hold preload value to be calculated */
    1bca:	19 82       	std	Y+1, r1	; 0x01

		/* Convert passed delay from milli-second to second */
		Local_f32DelayTime_s = (float32)Copy_u32DelayTime_ms * 0.001f;
    1bcc:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bce:	78 89       	ldd	r23, Y+16	; 0x10
    1bd0:	89 89       	ldd	r24, Y+17	; 0x11
    1bd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	2f e6       	ldi	r18, 0x6F	; 111
    1be2:	32 e1       	ldi	r19, 0x12	; 18
    1be4:	43 e8       	ldi	r20, 0x83	; 131
    1be6:	5a e3       	ldi	r21, 0x3A	; 58
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8a 87       	std	Y+10, r24	; 0x0a
    1bf2:	9b 87       	std	Y+11, r25	; 0x0b
    1bf4:	ac 87       	std	Y+12, r26	; 0x0c
    1bf6:	bd 87       	std	Y+13, r27	; 0x0d

		/* Get number of overflows required for Timer0 to reach passed delay */
		/*Local_u32OverflowNum = SERV_u32CeilDev(Local_f32DelayTime_s,Global_f32Timer0OverflowTime);*/

		/* Get Preload Value */
		Local_u8PreloadValue = TIMER0_u8CalculateTimer0PreloadVal(Local_f32DelayTime_s,Local_u32OverflowNum);
    1bf8:	6e 81       	ldd	r22, Y+6	; 0x06
    1bfa:	7f 81       	ldd	r23, Y+7	; 0x07
    1bfc:	88 85       	ldd	r24, Y+8	; 0x08
    1bfe:	99 85       	ldd	r25, Y+9	; 0x09
    1c00:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c0c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c0e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 11 0c 	call	0x1822	; 0x1822 <TIMER0_u8CalculateTimer0PreloadVal>
    1c18:	89 83       	std	Y+1, r24	; 0x01

		/* Set Timer0 Preload Value Before Timer0 Starts */
		TIMER0_vidSetPreloadValue(Local_u8PreloadValue);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TIMER0_vidSetPreloadValue>

		/* Start Timer0 */
		TIMER0_vidStart();
    1c20:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <TIMER0_vidStart>
    1c24:	1b c0       	rjmp	.+54     	; 0x1c5c <TIMER0_u8SetBusyWait_ms+0xba>

		/* Wait until the delay is finished */
		while(Local_u32OverflowCounter < Local_u32OverflowNum)
		{
			/* Wait until TOV0 Flag is set by hardware */
			while(GET_BIT(TIFR,TOV0) != 1);
    1c26:	e8 e5       	ldi	r30, 0x58	; 88
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	81 70       	andi	r24, 0x01	; 1
    1c32:	90 70       	andi	r25, 0x00	; 0
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	b9 f3       	breq	.-18     	; 0x1c26 <TIMER0_u8SetBusyWait_ms+0x84>

			/* Clear TOV0 Flag by writing 1 to its bit in TIFR Register */
			SET_BIT(TIFR,TOV0);
    1c38:	a8 e5       	ldi	r26, 0x58	; 88
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e8 e5       	ldi	r30, 0x58	; 88
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	81 60       	ori	r24, 0x01	; 1
    1c44:	8c 93       	st	X, r24

			/* Increment Overflow Counter */
			Local_u32OverflowCounter++;
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	ac 81       	ldd	r26, Y+4	; 0x04
    1c4c:	bd 81       	ldd	r27, Y+5	; 0x05
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	a1 1d       	adc	r26, r1
    1c52:	b1 1d       	adc	r27, r1
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	9b 83       	std	Y+3, r25	; 0x03
    1c58:	ac 83       	std	Y+4, r26	; 0x04
    1c5a:	bd 83       	std	Y+5, r27	; 0x05

		/* Start Timer0 */
		TIMER0_vidStart();

		/* Wait until the delay is finished */
		while(Local_u32OverflowCounter < Local_u32OverflowNum)
    1c5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c60:	4c 81       	ldd	r20, Y+4	; 0x04
    1c62:	5d 81       	ldd	r21, Y+5	; 0x05
    1c64:	8e 81       	ldd	r24, Y+6	; 0x06
    1c66:	9f 81       	ldd	r25, Y+7	; 0x07
    1c68:	a8 85       	ldd	r26, Y+8	; 0x08
    1c6a:	b9 85       	ldd	r27, Y+9	; 0x09
    1c6c:	28 17       	cp	r18, r24
    1c6e:	39 07       	cpc	r19, r25
    1c70:	4a 07       	cpc	r20, r26
    1c72:	5b 07       	cpc	r21, r27
    1c74:	c0 f2       	brcs	.-80     	; 0x1c26 <TIMER0_u8SetBusyWait_ms+0x84>
			/* Increment Overflow Counter */
			Local_u32OverflowCounter++;
		}

		/* Stop Timer0 */
		TIMER0_vidStop();
    1c76:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <TIMER0_vidStop>
	{
		/* Function is not working as expected */
		Local_u8ErrorStatus = FALSE;
	}

	return Local_u8ErrorStatus;
    1c7a:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    1c7c:	62 96       	adiw	r28, 0x12	; 18
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <TIMER0_u8StartPWM>:
 Description     : Start to generate PWM from Timer0			          
 Input Arguments : uu8 Copy_u8DutyCyclePercentage			          
 Return          : void						          
 =============================================================================================================*/
uint8 TIMER0_u8StartPWM(uint8 Copy_u8DutyCyclePercentage)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <TIMER0_u8StartPWM+0x6>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_u8ErrorStatus = TRUE;     		/* A variable to hold function error status */
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DutyCyclePercentage <= 100)
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	85 36       	cpi	r24, 0x65	; 101
    1ca2:	30 f4       	brcc	.+12     	; 0x1cb0 <TIMER0_u8StartPWM+0x22>
	{
		/* Set Duty Cycle Percentage */
		TIMER0_u8SetDutyCycle(Copy_u8DutyCyclePercentage);
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	0e 94 a7 0c 	call	0x194e	; 0x194e <TIMER0_u8SetDutyCycle>

		/* Start Timer */
		TIMER0_vidStart();
    1caa:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <TIMER0_vidStart>
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <TIMER0_u8StartPWM+0x24>
	}
	else
	{
		/* Function is not working as expected */
		Local_u8ErrorStatus = FALSE;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorStatus;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <TIMER0_vidClearOvfFlag>:
 Description     : Clear Timer0 overflow flag
 Input Arguments : void
 Return          : void
 =============================================================================================================*/
void TIMER0_vidClearOvfFlag(void)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	  /* Clear TOV0 bit in TIFR Register by Writing Logical 1 to it */
	  TIFR |= (1 << TOV0);
    1cc6:	a8 e5       	ldi	r26, 0x58	; 88
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e8 e5       	ldi	r30, 0x58	; 88
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	81 60       	ori	r24, 0x01	; 1
    1cd2:	8c 93       	st	X, r24
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <__vector_11>:
/* =============================================================================================================
 				        Timer/Counter0 Overflow Interrupt
 =============================================================================================================*/

ISR(VECTOR_11)
{
    1cda:	1f 92       	push	r1
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	0f 92       	push	r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	2f 93       	push	r18
    1ce6:	3f 93       	push	r19
    1ce8:	4f 93       	push	r20
    1cea:	5f 93       	push	r21
    1cec:	6f 93       	push	r22
    1cee:	7f 93       	push	r23
    1cf0:	8f 93       	push	r24
    1cf2:	9f 93       	push	r25
    1cf4:	af 93       	push	r26
    1cf6:	bf 93       	push	r27
    1cf8:	ef 93       	push	r30
    1cfa:	ff 93       	push	r31
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
	/*Check if Timer0 overflow function is registered or not*/
	if(TIMER0_pvOverflowCallbakFunc != NULL)
    1d04:	80 91 7a 01 	lds	r24, 0x017A
    1d08:	90 91 7b 01 	lds	r25, 0x017B
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	29 f0       	breq	.+10     	; 0x1d1a <__vector_11+0x40>
	{
		/*Invoke Timer0 overflow function*/
		TIMER0_pvOverflowCallbakFunc();
    1d10:	e0 91 7a 01 	lds	r30, 0x017A
    1d14:	f0 91 7b 01 	lds	r31, 0x017B
    1d18:	09 95       	icall
	}
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	ff 91       	pop	r31
    1d20:	ef 91       	pop	r30
    1d22:	bf 91       	pop	r27
    1d24:	af 91       	pop	r26
    1d26:	9f 91       	pop	r25
    1d28:	8f 91       	pop	r24
    1d2a:	7f 91       	pop	r23
    1d2c:	6f 91       	pop	r22
    1d2e:	5f 91       	pop	r21
    1d30:	4f 91       	pop	r20
    1d32:	3f 91       	pop	r19
    1d34:	2f 91       	pop	r18
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	0f 90       	pop	r0
    1d3c:	1f 90       	pop	r1
    1d3e:	18 95       	reti

00001d40 <__vector_10>:

/* =============================================================================================================
				     Timer/Counter0 Compare Match Interrupt
 =============================================================================================================*/
ISR(VECTOR_10)
{
    1d40:	1f 92       	push	r1
    1d42:	0f 92       	push	r0
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	0f 92       	push	r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	2f 93       	push	r18
    1d4c:	3f 93       	push	r19
    1d4e:	4f 93       	push	r20
    1d50:	5f 93       	push	r21
    1d52:	6f 93       	push	r22
    1d54:	7f 93       	push	r23
    1d56:	8f 93       	push	r24
    1d58:	9f 93       	push	r25
    1d5a:	af 93       	push	r26
    1d5c:	bf 93       	push	r27
    1d5e:	ef 93       	push	r30
    1d60:	ff 93       	push	r31
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
	/* Check if Timer0 compare match function is registered or not */
	if(TIMER0_pvComapareMatchCallbakFunc != NULL)
    1d6a:	80 91 7c 01 	lds	r24, 0x017C
    1d6e:	90 91 7d 01 	lds	r25, 0x017D
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <__vector_10+0x40>
	{
		/* Invoke Timer0 compare match function */
		TIMER0_pvComapareMatchCallbakFunc();
    1d76:	e0 91 7c 01 	lds	r30, 0x017C
    1d7a:	f0 91 7d 01 	lds	r31, 0x017D
    1d7e:	09 95       	icall
	}
}
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	ff 91       	pop	r31
    1d86:	ef 91       	pop	r30
    1d88:	bf 91       	pop	r27
    1d8a:	af 91       	pop	r26
    1d8c:	9f 91       	pop	r25
    1d8e:	8f 91       	pop	r24
    1d90:	7f 91       	pop	r23
    1d92:	6f 91       	pop	r22
    1d94:	5f 91       	pop	r21
    1d96:	4f 91       	pop	r20
    1d98:	3f 91       	pop	r19
    1d9a:	2f 91       	pop	r18
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	0f 90       	pop	r0
    1da2:	1f 90       	pop	r1
    1da4:	18 95       	reti

00001da6 <TWI_vidMasterInit>:
/* Description     : Initialize this node as TWI master                           */
/* Input Arguments : void						          */
/* Return          : void						          */
/**********************************************************************************/
void TWI_vidMasterInit(void)
{
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	/******************************************Calculate Bit Rate Based on Selected TWI Prescaler from Config File*****************************************/
	/* Check Selected TWI Prescaler from Config File */
	#if   TWI_Prescaler_VAL == _1_PRESCALER

		/* Set Selected TWI Prescaler */
		CLEAR_BIT(TWSR,TWSR_TWPS0);
    1db2:	a1 e2       	ldi	r26, 0x21	; 33
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e1 e2       	ldi	r30, 0x21	; 33
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8e 7f       	andi	r24, 0xFE	; 254
    1dbe:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR,TWSR_TWPS1);
    1dc0:	a1 e2       	ldi	r26, 0x21	; 33
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e1 e2       	ldi	r30, 0x21	; 33
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8d 7f       	andi	r24, 0xFD	; 253
    1dcc:	8c 93       	st	X, r24

		/* Calculate Bit Rate to be set in TWBR register */
		TWBR = (uint8)((TWI_FCPU - (16UL * TWI_SCL)) / (2UL * SERV_u32Pow(4,TWI_Prescaler_VAL) * TWI_SCL));
    1dce:	00 e2       	ldi	r16, 0x20	; 32
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	64 e0       	ldi	r22, 0x04	; 4
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <SERV_u32Pow>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	35 e3       	ldi	r19, 0x35	; 53
    1dee:	4c e0       	ldi	r20, 0x0C	; 12
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 5d 29 	call	0x52ba	; 0x52ba <__mulsi3>
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	9c e7       	ldi	r25, 0x7C	; 124
    1e02:	a2 e9       	ldi	r26, 0x92	; 146
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__udivmodsi4>
    1e0e:	da 01       	movw	r26, r20
    1e10:	c9 01       	movw	r24, r18
    1e12:	f8 01       	movw	r30, r16
    1e14:	80 83       	st	Z, r24
	/******************************************Enable/Disable TWI Acknowledge Bit for this Node Based on Config File*****************************************/
	/* Check if TWI Acknowledge Bit is Enabled or Not for this Node from Config File */
	#if   TWI_ACK_BIT_ENABLE == ENABLE

		/* Enable Acknowledge Bit */
		SET_BIT(TWCR,TWCR_TWEA);
    1e16:	a6 e5       	ldi	r26, 0x56	; 86
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e6 e5       	ldi	r30, 0x56	; 86
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 64       	ori	r24, 0x40	; 64
    1e22:	8c 93       	st	X, r24
		SET_BIT(TWCR,TWCR_TWIE);

	#elif TWI_INTERRUPT_ENABLE == DISABLE

		/* Disable TWI Interrupt */
		CLEAR_BIT(TWCR,TWCR_TWIE);
    1e24:	a6 e5       	ldi	r26, 0x56	; 86
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e6 e5       	ldi	r30, 0x56	; 86
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8e 7f       	andi	r24, 0xFE	; 254
    1e30:	8c 93       	st	X, r24
		SET_BIT(TWAR,TWAR_TWGCE);

	#elif TWI_GENERAL_CALL_RECOGNITION_ENABLE == DISABLE

		/* Disable TWI General Call Recognition */
		CLEAR_BIT(TWAR,TWAR_TWGCE);
    1e32:	a2 e2       	ldi	r26, 0x22	; 34
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e2 e2       	ldi	r30, 0x22	; 34
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8e 7f       	andi	r24, 0xFE	; 254
    1e3e:	8c 93       	st	X, r24
		#error " Wrong TWI Interrupt Enable Signal Configuration ! "
	#endif


	/******************************************Enable TWI*****************************************/
	SET_BIT(TWCR,TWCR_TWEN);
    1e40:	a6 e5       	ldi	r26, 0x56	; 86
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e6 e5       	ldi	r30, 0x56	; 86
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	84 60       	ori	r24, 0x04	; 4
    1e4c:	8c 93       	st	X, r24
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <TWI_vidSlaveInit>:
/* Description     : Initialize this node as TWI slave                            */
/* Input Arguments : u8 Copy_u8SlaveAddress				          */
/* Return          : void						          */
/**********************************************************************************/
void TWI_vidSlaveInit(uint8 Copy_u8SlaveAddress)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	89 83       	std	Y+1, r24	; 0x01
	/******************************************Set Passed Slave Address to Be the Own Address of this Node*****************************************/
	/* Load Passed Slave Address to the Most Significant 7 Bits of TWAR Register */
	TWAR |= (Copy_u8SlaveAddress << 1);
    1e64:	a2 e2       	ldi	r26, 0x22	; 34
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e2 e2       	ldi	r30, 0x22	; 34
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	82 2b       	or	r24, r18
    1e7c:	8c 93       	st	X, r24
	/******************************************Enable/Disable TWI Acknowledge Bit for this Node Based on Config File*****************************************/
	/* Check if TWI Acknowledge Bit is Enabled or Not for this Node from Config File */
	#if   TWI_ACK_BIT_ENABLE == ENABLE

		/* Enable Acknowledge Bit */
		SET_BIT(TWCR,TWCR_TWEA);
    1e7e:	a6 e5       	ldi	r26, 0x56	; 86
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e6 e5       	ldi	r30, 0x56	; 86
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	80 64       	ori	r24, 0x40	; 64
    1e8a:	8c 93       	st	X, r24
		SET_BIT(TWCR,TWCR_TWIE);

	#elif TWI_INTERRUPT_ENABLE == DISABLE

		/* Disable TWI Interrupt */
		CLEAR_BIT(TWCR,TWCR_TWIE);
    1e8c:	a6 e5       	ldi	r26, 0x56	; 86
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e5       	ldi	r30, 0x56	; 86
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8e 7f       	andi	r24, 0xFE	; 254
    1e98:	8c 93       	st	X, r24
		SET_BIT(TWAR,TWAR_TWGCE);

	#elif TWI_GENERAL_CALL_RECOGNITION_ENABLE == DISABLE

		/* Disable TWI General Call Recognition */
		CLEAR_BIT(TWAR,TWAR_TWGCE);
    1e9a:	a2 e2       	ldi	r26, 0x22	; 34
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e2 e2       	ldi	r30, 0x22	; 34
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8e 7f       	andi	r24, 0xFE	; 254
    1ea6:	8c 93       	st	X, r24
		#error " Wrong TWI Interrupt Enable Signal Configuration ! "
	#endif


	/******************************************Enable TWI*****************************************/
	SET_BIT(TWCR,TWCR_TWEN);
    1ea8:	a6 e5       	ldi	r26, 0x56	; 86
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e6 e5       	ldi	r30, 0x56	; 86
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	84 60       	ori	r24, 0x04	; 4
    1eb4:	8c 93       	st	X, r24
}
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <TWI_vidEnableInterrupt>:
/* Description     : Enable TWI Interrupt                                         */
/* Input Arguments : void 						          */
/* Return          : void						          */
/**********************************************************************************/
void TWI_vidEnableInterrupt(void)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	/* Enable TWI Interrupt */
	SET_BIT(TWCR,TWCR_TWIE);
    1ec6:	a6 e5       	ldi	r26, 0x56	; 86
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e6 e5       	ldi	r30, 0x56	; 86
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 60       	ori	r24, 0x01	; 1
    1ed2:	8c 93       	st	X, r24
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <TWI_vidDisableInterrupt>:
/* Description     : Disable TWI Interrupt                                        */
/* Input Arguments : void 						          */
/* Return          : void						          */
/**********************************************************************************/
void TWI_vidDisableInterrupt(void)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	/* Disable TWI Interrupt */
	CLEAR_BIT(TWCR,TWCR_TWIE);
    1ee2:	a6 e5       	ldi	r26, 0x56	; 86
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e6 e5       	ldi	r30, 0x56	; 86
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	8e 7f       	andi	r24, 0xFE	; 254
    1eee:	8c 93       	st	X, r24
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <TWI_SendStartCondition>:
/*		     SCL is in high state					  */
/* Input Arguments : void						          */
/* Return          : TWI_ErrorStatus_e			             	          */
/**********************************************************************************/
TWI_ErrorStatus_e TWI_SendStartCondition(void)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <TWI_SendStartCondition+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <TWI_SendStartCondition+0x8>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
	/* Local Variables Definitions */
	TWI_ErrorStatus_e Local_ErrorStatus = NO_ERROR;   /* A variable to hold TWI error status */
    1f04:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeOutCounter = 0;  		  /* A variable to hold TWI Timeout count */
    1f06:	19 82       	std	Y+1, r1	; 0x01
    1f08:	1a 82       	std	Y+2, r1	; 0x02
    1f0a:	1b 82       	std	Y+3, r1	; 0x03
    1f0c:	1c 82       	std	Y+4, r1	; 0x04

	/* Send start condition on the bus to initiate the communication */
	SET_BIT(TWCR,TWCR_TWSTA);
    1f0e:	a6 e5       	ldi	r26, 0x56	; 86
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e6 e5       	ldi	r30, 0x56	; 86
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	80 62       	ori	r24, 0x20	; 32
    1f1a:	8c 93       	st	X, r24

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    1f1c:	a6 e5       	ldi	r26, 0x56	; 86
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e6 e5       	ldi	r30, 0x56	; 86
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 68       	ori	r24, 0x80	; 128
    1f28:	8c 93       	st	X, r24
    1f2a:	0b c0       	rjmp	.+22     	; 0x1f42 <TWI_SendStartCondition+0x4c>

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
	{
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	ab 81       	ldd	r26, Y+3	; 0x03
    1f32:	bc 81       	ldd	r27, Y+4	; 0x04
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	a1 1d       	adc	r26, r1
    1f38:	b1 1d       	adc	r27, r1
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	ab 83       	std	Y+3, r26	; 0x03
    1f40:	bc 83       	std	Y+4, r27	; 0x04

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
    1f42:	e6 e5       	ldi	r30, 0x56	; 86
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	88 1f       	adc	r24, r24
    1f4a:	88 27       	eor	r24, r24
    1f4c:	88 1f       	adc	r24, r24
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	90 70       	andi	r25, 0x00	; 0
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	61 f4       	brne	.+24     	; 0x1f70 <TWI_SendStartCondition+0x7a>
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f5e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f60:	80 34       	cpi	r24, 0x40	; 64
    1f62:	2b e4       	ldi	r18, 0x4B	; 75
    1f64:	92 07       	cpc	r25, r18
    1f66:	2c e4       	ldi	r18, 0x4C	; 76
    1f68:	a2 07       	cpc	r26, r18
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	b2 07       	cpc	r27, r18
    1f6e:	f0 f2       	brcs	.-68     	; 0x1f2c <TWI_SendStartCondition+0x36>
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
	}

	/* Check if TWI Reached Timeout or Not */
	if(Local_u32TimeOutCounter == TWI_TIMEOUT)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	ab 81       	ldd	r26, Y+3	; 0x03
    1f76:	bc 81       	ldd	r27, Y+4	; 0x04
    1f78:	80 34       	cpi	r24, 0x40	; 64
    1f7a:	2b e4       	ldi	r18, 0x4B	; 75
    1f7c:	92 07       	cpc	r25, r18
    1f7e:	2c e4       	ldi	r18, 0x4C	; 76
    1f80:	a2 07       	cpc	r26, r18
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	b2 07       	cpc	r27, r18
    1f86:	19 f4       	brne	.+6      	; 0x1f8e <TWI_SendStartCondition+0x98>
	{
		Local_ErrorStatus = TIMEOUT;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	0c c0       	rjmp	.+24     	; 0x1fa6 <TWI_SendStartCondition+0xb0>
	}
	else
	{
		/* Check if TWI Start Condition is Sent on the Bus or Not */
		if ((TWSR & TWI_STATUS_MASK) != TWI_MASTER_START_CONDITION_STATUS)
    1f8e:	e1 e2       	ldi	r30, 0x21	; 33
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	88 7f       	andi	r24, 0xF8	; 248
    1f9a:	90 70       	andi	r25, 0x00	; 0
    1f9c:	88 30       	cpi	r24, 0x08	; 8
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	11 f0       	breq	.+4      	; 0x1fa6 <TWI_SendStartCondition+0xb0>
		{
			/* Return Error */
			Local_ErrorStatus = StartConditionError;
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
		}
	}

	return Local_ErrorStatus;
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <TWI_SendRepeatedStartCondition>:
/*		     current communication and initiating new one	          */
/* Input Arguments : void						          */
/* Return          : TWI_ErrorStatus_e			             	          */
/**********************************************************************************/
TWI_ErrorStatus_e TWI_SendRepeatedStartCondition(void)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <TWI_SendRepeatedStartCondition+0x6>
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <TWI_SendRepeatedStartCondition+0x8>
    1fc0:	0f 92       	push	r0
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
	/* Local Variables Definitions */
	TWI_ErrorStatus_e Local_ErrorStatus = NO_ERROR;   /* A variable to hold TWI error status */
    1fc6:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeOutCounter = 0;  		  /* A variable to hold TWI Timeout count */
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	1a 82       	std	Y+2, r1	; 0x02
    1fcc:	1b 82       	std	Y+3, r1	; 0x03
    1fce:	1c 82       	std	Y+4, r1	; 0x04

	/* Send start condition on the bus to initiate the communication */
	SET_BIT(TWCR,TWCR_TWSTA);
    1fd0:	a6 e5       	ldi	r26, 0x56	; 86
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e6 e5       	ldi	r30, 0x56	; 86
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 62       	ori	r24, 0x20	; 32
    1fdc:	8c 93       	st	X, r24

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    1fde:	a6 e5       	ldi	r26, 0x56	; 86
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e6 e5       	ldi	r30, 0x56	; 86
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	80 68       	ori	r24, 0x80	; 128
    1fea:	8c 93       	st	X, r24
    1fec:	0b c0       	rjmp	.+22     	; 0x2004 <TWI_SendRepeatedStartCondition+0x4c>

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
	{
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ff4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	b1 1d       	adc	r27, r1
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	ab 83       	std	Y+3, r26	; 0x03
    2002:	bc 83       	std	Y+4, r27	; 0x04

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
    2004:	e6 e5       	ldi	r30, 0x56	; 86
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	88 1f       	adc	r24, r24
    200c:	88 27       	eor	r24, r24
    200e:	88 1f       	adc	r24, r24
    2010:	88 2f       	mov	r24, r24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	90 70       	andi	r25, 0x00	; 0
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	61 f4       	brne	.+24     	; 0x2032 <TWI_SendRepeatedStartCondition+0x7a>
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	ab 81       	ldd	r26, Y+3	; 0x03
    2020:	bc 81       	ldd	r27, Y+4	; 0x04
    2022:	80 34       	cpi	r24, 0x40	; 64
    2024:	2b e4       	ldi	r18, 0x4B	; 75
    2026:	92 07       	cpc	r25, r18
    2028:	2c e4       	ldi	r18, 0x4C	; 76
    202a:	a2 07       	cpc	r26, r18
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	b2 07       	cpc	r27, r18
    2030:	f0 f2       	brcs	.-68     	; 0x1fee <TWI_SendRepeatedStartCondition+0x36>
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
	}

	/* Check if TWI Reached Timeout or Not */
	if(Local_u32TimeOutCounter == TWI_TIMEOUT)
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	9a 81       	ldd	r25, Y+2	; 0x02
    2036:	ab 81       	ldd	r26, Y+3	; 0x03
    2038:	bc 81       	ldd	r27, Y+4	; 0x04
    203a:	80 34       	cpi	r24, 0x40	; 64
    203c:	2b e4       	ldi	r18, 0x4B	; 75
    203e:	92 07       	cpc	r25, r18
    2040:	2c e4       	ldi	r18, 0x4C	; 76
    2042:	a2 07       	cpc	r26, r18
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	b2 07       	cpc	r27, r18
    2048:	19 f4       	brne	.+6      	; 0x2050 <TWI_SendRepeatedStartCondition+0x98>
	{
		Local_ErrorStatus = TIMEOUT;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	0c c0       	rjmp	.+24     	; 0x2068 <TWI_SendRepeatedStartCondition+0xb0>
	}
	else
	{
		/* Check if TWI Repeated Start Condition is Sent on the Bus or Not */
		if ((TWSR & TWI_STATUS_MASK) != TWI_MASTER_REPEATED_START_CONDITION_STATUS)
    2050:	e1 e2       	ldi	r30, 0x21	; 33
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	88 7f       	andi	r24, 0xF8	; 248
    205c:	90 70       	andi	r25, 0x00	; 0
    205e:	80 31       	cpi	r24, 0x10	; 16
    2060:	91 05       	cpc	r25, r1
    2062:	11 f0       	breq	.+4      	; 0x2068 <TWI_SendRepeatedStartCondition+0xb0>
		{
			/* Return Error */
			Local_ErrorStatus = RepeatedStartConditionError;
    2064:	83 e0       	ldi	r24, 0x03	; 3
    2066:	8d 83       	std	Y+5, r24	; 0x05
		}
	}

	return Local_ErrorStatus;
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <TWI_SendSlaveAddressWithWrite>:
/* Description     : Send desired slave address on the bus with write option	  */
/* Input Arguments : u8 Copy_u8SlaveAddress				          */
/* Return          : TWI_ErrorStatus_e			             	          */
/**********************************************************************************/
TWI_ErrorStatus_e TWI_SendSlaveAddressWithWrite(uint8 Copy_u8SlaveAddress)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <TWI_SendSlaveAddressWithWrite+0x6>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <TWI_SendSlaveAddressWithWrite+0x8>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <TWI_SendSlaveAddressWithWrite+0xa>
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	8e 83       	std	Y+6, r24	; 0x06
	/* Local Variables Definitions */
	TWI_ErrorStatus_e Local_ErrorStatus = NO_ERROR;   /* A variable to hold TWI error status */
    208a:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeOutCounter = 0;  		  /* A variable to hold TWI Timeout count */
    208c:	19 82       	std	Y+1, r1	; 0x01
    208e:	1a 82       	std	Y+2, r1	; 0x02
    2090:	1b 82       	std	Y+3, r1	; 0x03
    2092:	1c 82       	std	Y+4, r1	; 0x04

	/* Write passed slave address on the bus through setting it in the most significant 7 bits of TWDR register */
	TWDR = (Copy_u8SlaveAddress << 1);
    2094:	e3 e2       	ldi	r30, 0x23	; 35
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
    209a:	88 0f       	add	r24, r24
    209c:	80 83       	st	Z, r24

	/* Clear LSB of TWDR register to send write option on the bus */
	CLEAR_BIT(TWDR,TWDR_TWD0);
    209e:	a3 e2       	ldi	r26, 0x23	; 35
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e3 e2       	ldi	r30, 0x23	; 35
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8e 7f       	andi	r24, 0xFE	; 254
    20aa:	8c 93       	st	X, r24

	/* Clear TWI Start Condition (TWSTA) bit in TWCR register after Repeated Start Condition has been transmitted */
	CLEAR_BIT(TWCR,TWCR_TWSTA);
    20ac:	a6 e5       	ldi	r26, 0x56	; 86
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e6 e5       	ldi	r30, 0x56	; 86
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8f 7d       	andi	r24, 0xDF	; 223
    20b8:	8c 93       	st	X, r24

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    20ba:	a6 e5       	ldi	r26, 0x56	; 86
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e6 e5       	ldi	r30, 0x56	; 86
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	80 68       	ori	r24, 0x80	; 128
    20c6:	8c 93       	st	X, r24
    20c8:	0b c0       	rjmp	.+22     	; 0x20e0 <TWI_SendSlaveAddressWithWrite+0x66>

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
	{
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	ab 81       	ldd	r26, Y+3	; 0x03
    20d0:	bc 81       	ldd	r27, Y+4	; 0x04
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	a1 1d       	adc	r26, r1
    20d6:	b1 1d       	adc	r27, r1
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	ab 83       	std	Y+3, r26	; 0x03
    20de:	bc 83       	std	Y+4, r27	; 0x04

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
    20e0:	e6 e5       	ldi	r30, 0x56	; 86
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	88 1f       	adc	r24, r24
    20e8:	88 27       	eor	r24, r24
    20ea:	88 1f       	adc	r24, r24
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	90 70       	andi	r25, 0x00	; 0
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	61 f4       	brne	.+24     	; 0x210e <TWI_SendSlaveAddressWithWrite+0x94>
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	ab 81       	ldd	r26, Y+3	; 0x03
    20fc:	bc 81       	ldd	r27, Y+4	; 0x04
    20fe:	80 34       	cpi	r24, 0x40	; 64
    2100:	2b e4       	ldi	r18, 0x4B	; 75
    2102:	92 07       	cpc	r25, r18
    2104:	2c e4       	ldi	r18, 0x4C	; 76
    2106:	a2 07       	cpc	r26, r18
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	b2 07       	cpc	r27, r18
    210c:	f0 f2       	brcs	.-68     	; 0x20ca <TWI_SendSlaveAddressWithWrite+0x50>
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
	}

	/* Check if TWI Reached Timeout or Not */
	if(Local_u32TimeOutCounter == TWI_TIMEOUT)
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	ab 81       	ldd	r26, Y+3	; 0x03
    2114:	bc 81       	ldd	r27, Y+4	; 0x04
    2116:	80 34       	cpi	r24, 0x40	; 64
    2118:	2b e4       	ldi	r18, 0x4B	; 75
    211a:	92 07       	cpc	r25, r18
    211c:	2c e4       	ldi	r18, 0x4C	; 76
    211e:	a2 07       	cpc	r26, r18
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	b2 07       	cpc	r27, r18
    2124:	19 f4       	brne	.+6      	; 0x212c <TWI_SendSlaveAddressWithWrite+0xb2>
	{
		Local_ErrorStatus = TIMEOUT;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	0c c0       	rjmp	.+24     	; 0x2144 <TWI_SendSlaveAddressWithWrite+0xca>
	}
	else
	{
		/* Check if Sent TWI Slave Address Plus Write With ACK Received Packet is Sent on the Bus or Not */
		if ((TWSR & TWI_STATUS_MASK) != TWI_TMASTER_SLAVE_ADDRESS_PLUS_WRITE_ACK_STATUS)
    212c:	e1 e2       	ldi	r30, 0x21	; 33
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	88 7f       	andi	r24, 0xF8	; 248
    2138:	90 70       	andi	r25, 0x00	; 0
    213a:	88 31       	cpi	r24, 0x18	; 24
    213c:	91 05       	cpc	r25, r1
    213e:	11 f0       	breq	.+4      	; 0x2144 <TWI_SendSlaveAddressWithWrite+0xca>
		{
			/* Return Error */
			Local_ErrorStatus = SlaveAddressWithWriteAckError;
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	8d 83       	std	Y+5, r24	; 0x05
		}
	}

	return Local_ErrorStatus;
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2146:	26 96       	adiw	r28, 0x06	; 6
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <TWI_SendSlaveAddressWithRead>:
/* Description     : Send desired slave address on the bus with read option	  */
/* Input Arguments : u8 Copy_u8SlaveAddress				          */
/* Return          : TWI_ErrorStatus_e			             	          */
/**********************************************************************************/
TWI_ErrorStatus_e TWI_SendSlaveAddressWithRead(uint8 Copy_u8SlaveAddress)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <TWI_SendSlaveAddressWithRead+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <TWI_SendSlaveAddressWithRead+0x8>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <TWI_SendSlaveAddressWithRead+0xa>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	8e 83       	std	Y+6, r24	; 0x06
	/* Local Variables Definitions */
	TWI_ErrorStatus_e Local_ErrorStatus = NO_ERROR;   /* A variable to hold TWI error status */
    2168:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeOutCounter = 0;  		  /* A variable to hold TWI Timeout count */
    216a:	19 82       	std	Y+1, r1	; 0x01
    216c:	1a 82       	std	Y+2, r1	; 0x02
    216e:	1b 82       	std	Y+3, r1	; 0x03
    2170:	1c 82       	std	Y+4, r1	; 0x04

	/* Write passed slave address on the bus through setting it in the most significant 7 bits of TWDR register */
	TWDR = (Copy_u8SlaveAddress << 1);
    2172:	e3 e2       	ldi	r30, 0x23	; 35
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	88 0f       	add	r24, r24
    217a:	80 83       	st	Z, r24

	/* Set LSB of TWDR register to send read option on the bus */
	SET_BIT(TWDR,TWDR_TWD0);
    217c:	a3 e2       	ldi	r26, 0x23	; 35
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e3 e2       	ldi	r30, 0x23	; 35
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	81 60       	ori	r24, 0x01	; 1
    2188:	8c 93       	st	X, r24

	/* Clear TWI Start Condition (TWSTA) bit in TWCR register after Repeated Start Condition has been transmitted */
	CLEAR_BIT(TWCR,TWCR_TWSTA);
    218a:	a6 e5       	ldi	r26, 0x56	; 86
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e6 e5       	ldi	r30, 0x56	; 86
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	8f 7d       	andi	r24, 0xDF	; 223
    2196:	8c 93       	st	X, r24

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2198:	a6 e5       	ldi	r26, 0x56	; 86
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e6 e5       	ldi	r30, 0x56	; 86
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	80 68       	ori	r24, 0x80	; 128
    21a4:	8c 93       	st	X, r24
    21a6:	0b c0       	rjmp	.+22     	; 0x21be <TWI_SendSlaveAddressWithRead+0x66>

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
	{
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	ab 81       	ldd	r26, Y+3	; 0x03
    21ae:	bc 81       	ldd	r27, Y+4	; 0x04
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	a1 1d       	adc	r26, r1
    21b4:	b1 1d       	adc	r27, r1
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	ab 83       	std	Y+3, r26	; 0x03
    21bc:	bc 83       	std	Y+4, r27	; 0x04

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
    21be:	e6 e5       	ldi	r30, 0x56	; 86
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	88 1f       	adc	r24, r24
    21c6:	88 27       	eor	r24, r24
    21c8:	88 1f       	adc	r24, r24
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	90 70       	andi	r25, 0x00	; 0
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	61 f4       	brne	.+24     	; 0x21ec <TWI_SendSlaveAddressWithRead+0x94>
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	ab 81       	ldd	r26, Y+3	; 0x03
    21da:	bc 81       	ldd	r27, Y+4	; 0x04
    21dc:	80 34       	cpi	r24, 0x40	; 64
    21de:	2b e4       	ldi	r18, 0x4B	; 75
    21e0:	92 07       	cpc	r25, r18
    21e2:	2c e4       	ldi	r18, 0x4C	; 76
    21e4:	a2 07       	cpc	r26, r18
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	b2 07       	cpc	r27, r18
    21ea:	f0 f2       	brcs	.-68     	; 0x21a8 <TWI_SendSlaveAddressWithRead+0x50>
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
	}

	/* Check if TWI Reached Timeout or Not */
	if(Local_u32TimeOutCounter == TWI_TIMEOUT)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	ab 81       	ldd	r26, Y+3	; 0x03
    21f2:	bc 81       	ldd	r27, Y+4	; 0x04
    21f4:	80 34       	cpi	r24, 0x40	; 64
    21f6:	2b e4       	ldi	r18, 0x4B	; 75
    21f8:	92 07       	cpc	r25, r18
    21fa:	2c e4       	ldi	r18, 0x4C	; 76
    21fc:	a2 07       	cpc	r26, r18
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	b2 07       	cpc	r27, r18
    2202:	19 f4       	brne	.+6      	; 0x220a <TWI_SendSlaveAddressWithRead+0xb2>
	{
		Local_ErrorStatus = TIMEOUT;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	0c c0       	rjmp	.+24     	; 0x2222 <TWI_SendSlaveAddressWithRead+0xca>
	}
	else
	{
		/* Check if Sent TWI Slave Address Plus Read With ACK Received Packet is Sent on the Bus or Not */
		if ((TWSR & TWI_STATUS_MASK) != TWI_RMASTER_SLAVE_ADDRESS_PLUS_READ_ACK_STATUS)
    220a:	e1 e2       	ldi	r30, 0x21	; 33
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	88 7f       	andi	r24, 0xF8	; 248
    2216:	90 70       	andi	r25, 0x00	; 0
    2218:	80 34       	cpi	r24, 0x40	; 64
    221a:	91 05       	cpc	r25, r1
    221c:	11 f0       	breq	.+4      	; 0x2222 <TWI_SendSlaveAddressWithRead+0xca>
		{
			/* Return Error */
			Local_ErrorStatus = SlaveAddressWithReadAckError;
    221e:	85 e0       	ldi	r24, 0x05	; 5
    2220:	8d 83       	std	Y+5, r24	; 0x05
		}
	}

	return Local_ErrorStatus;
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2224:	26 96       	adiw	r28, 0x06	; 6
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <TWI_MasterSendDataByte>:
/*		     slave node on the bus					  */
/* Input Arguments : u8 Copy_u8DataByteToBeSend				          */
/* Return          : TWI_ErrorStatus_e			             	          */
/**********************************************************************************/
TWI_ErrorStatus_e TWI_MasterSendDataByte(uint8 Copy_u8DataByteToBeSend)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <TWI_MasterSendDataByte+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <TWI_MasterSendDataByte+0x8>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <TWI_MasterSendDataByte+0xa>
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	8e 83       	std	Y+6, r24	; 0x06
	/* Local Variables Definitions */
	TWI_ErrorStatus_e Local_ErrorStatus = NO_ERROR;   /* A variable to hold TWI error status */
    2246:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeOutCounter = 0;  		  /* A variable to hold TWI Timeout count */
    2248:	19 82       	std	Y+1, r1	; 0x01
    224a:	1a 82       	std	Y+2, r1	; 0x02
    224c:	1b 82       	std	Y+3, r1	; 0x03
    224e:	1c 82       	std	Y+4, r1	; 0x04

	/* Write data byte to be sent in TWDR register */
	TWDR = Copy_u8DataByteToBeSend;
    2250:	e3 e2       	ldi	r30, 0x23	; 35
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	8e 81       	ldd	r24, Y+6	; 0x06
    2256:	80 83       	st	Z, r24

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    2258:	a6 e5       	ldi	r26, 0x56	; 86
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e6 e5       	ldi	r30, 0x56	; 86
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	80 68       	ori	r24, 0x80	; 128
    2264:	8c 93       	st	X, r24
    2266:	0b c0       	rjmp	.+22     	; 0x227e <TWI_MasterSendDataByte+0x48>

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
	{
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	ab 81       	ldd	r26, Y+3	; 0x03
    226e:	bc 81       	ldd	r27, Y+4	; 0x04
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	a1 1d       	adc	r26, r1
    2274:	b1 1d       	adc	r27, r1
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	ab 83       	std	Y+3, r26	; 0x03
    227c:	bc 83       	std	Y+4, r27	; 0x04

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
    227e:	e6 e5       	ldi	r30, 0x56	; 86
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	88 1f       	adc	r24, r24
    2286:	88 27       	eor	r24, r24
    2288:	88 1f       	adc	r24, r24
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	90 70       	andi	r25, 0x00	; 0
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	61 f4       	brne	.+24     	; 0x22ac <TWI_MasterSendDataByte+0x76>
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	ab 81       	ldd	r26, Y+3	; 0x03
    229a:	bc 81       	ldd	r27, Y+4	; 0x04
    229c:	80 34       	cpi	r24, 0x40	; 64
    229e:	2b e4       	ldi	r18, 0x4B	; 75
    22a0:	92 07       	cpc	r25, r18
    22a2:	2c e4       	ldi	r18, 0x4C	; 76
    22a4:	a2 07       	cpc	r26, r18
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	b2 07       	cpc	r27, r18
    22aa:	f0 f2       	brcs	.-68     	; 0x2268 <TWI_MasterSendDataByte+0x32>
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
	}

	/* Check if TWI Reached Timeout or Not */
	if(Local_u32TimeOutCounter == TWI_TIMEOUT)
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	ab 81       	ldd	r26, Y+3	; 0x03
    22b2:	bc 81       	ldd	r27, Y+4	; 0x04
    22b4:	80 34       	cpi	r24, 0x40	; 64
    22b6:	2b e4       	ldi	r18, 0x4B	; 75
    22b8:	92 07       	cpc	r25, r18
    22ba:	2c e4       	ldi	r18, 0x4C	; 76
    22bc:	a2 07       	cpc	r26, r18
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	b2 07       	cpc	r27, r18
    22c2:	19 f4       	brne	.+6      	; 0x22ca <TWI_MasterSendDataByte+0x94>
	{
		Local_ErrorStatus = TIMEOUT;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	8d 83       	std	Y+5, r24	; 0x05
    22c8:	0c c0       	rjmp	.+24     	; 0x22e2 <TWI_MasterSendDataByte+0xac>
	}
	else
	{
		/* Check if Sent TWI Data Byte With ACK Received Packet is Sent on the Bus or Not */
		if ((TWSR & TWI_STATUS_MASK) != TWI_TMASTER_DATA_BYTE_ACK_STATUS)
    22ca:	e1 e2       	ldi	r30, 0x21	; 33
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	88 7f       	andi	r24, 0xF8	; 248
    22d6:	90 70       	andi	r25, 0x00	; 0
    22d8:	88 32       	cpi	r24, 0x28	; 40
    22da:	91 05       	cpc	r25, r1
    22dc:	11 f0       	breq	.+4      	; 0x22e2 <TWI_MasterSendDataByte+0xac>
		{
			/* Return Error */
			Local_ErrorStatus = MasterWriteDataByteAckError;
    22de:	86 e0       	ldi	r24, 0x06	; 6
    22e0:	8d 83       	std	Y+5, r24	; 0x05
		}
	}

	return Local_ErrorStatus;
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    22e4:	26 96       	adiw	r28, 0x06	; 6
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <TWI_MasterReadDataByte>:
/*		     desired slave node on the bus				  */
/* Input Arguments : u8* Copy_pu8DataByteToBeReceived				  */
/* Return          : TWI_ErrorStatus_e			             	          */
/**********************************************************************************/
TWI_ErrorStatus_e TWI_MasterReadDataByte(uint8* Copy_pu8DataByteToBeReceived)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	27 97       	sbiw	r28, 0x07	; 7
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	9f 83       	std	Y+7, r25	; 0x07
    230c:	8e 83       	std	Y+6, r24	; 0x06
	/* Local Variables Definitions */
	TWI_ErrorStatus_e Local_ErrorStatus = NO_ERROR;   /* A variable to hold TWI error status */
    230e:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeOutCounter = 0;  		  /* A variable to hold TWI Timeout count */
    2310:	19 82       	std	Y+1, r1	; 0x01
    2312:	1a 82       	std	Y+2, r1	; 0x02
    2314:	1b 82       	std	Y+3, r1	; 0x03
    2316:	1c 82       	std	Y+4, r1	; 0x04

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start receiving data from addressed slave node */
	SET_BIT(TWCR,TWCR_TWINT);
    2318:	a6 e5       	ldi	r26, 0x56	; 86
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e6 e5       	ldi	r30, 0x56	; 86
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	80 68       	ori	r24, 0x80	; 128
    2324:	8c 93       	st	X, r24
    2326:	0b c0       	rjmp	.+22     	; 0x233e <TWI_MasterReadDataByte+0x48>

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
	{
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	ab 81       	ldd	r26, Y+3	; 0x03
    232e:	bc 81       	ldd	r27, Y+4	; 0x04
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	a1 1d       	adc	r26, r1
    2334:	b1 1d       	adc	r27, r1
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	ab 83       	std	Y+3, r26	; 0x03
    233c:	bc 83       	std	Y+4, r27	; 0x04

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start receiving data from addressed slave node */
	SET_BIT(TWCR,TWCR_TWINT);

	/* Wait until TWI Interrupt Flag is raised again indicating that previous operation is completed through busy-waiting over TWI interrupt flag (TWINT) bit in TWCR register */
	while((GET_BIT(TWCR,TWCR_TWINT) == 0) && (Local_u32TimeOutCounter < TWI_TIMEOUT))
    233e:	e6 e5       	ldi	r30, 0x56	; 86
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	88 1f       	adc	r24, r24
    2346:	88 27       	eor	r24, r24
    2348:	88 1f       	adc	r24, r24
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	90 70       	andi	r25, 0x00	; 0
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	61 f4       	brne	.+24     	; 0x236c <TWI_MasterReadDataByte+0x76>
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	ab 81       	ldd	r26, Y+3	; 0x03
    235a:	bc 81       	ldd	r27, Y+4	; 0x04
    235c:	80 34       	cpi	r24, 0x40	; 64
    235e:	2b e4       	ldi	r18, 0x4B	; 75
    2360:	92 07       	cpc	r25, r18
    2362:	2c e4       	ldi	r18, 0x4C	; 76
    2364:	a2 07       	cpc	r26, r18
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	b2 07       	cpc	r27, r18
    236a:	f0 f2       	brcs	.-68     	; 0x2328 <TWI_MasterReadDataByte+0x32>
		/* Increment TWI Timeout Counter */
		Local_u32TimeOutCounter ++;
	}

	/* Check if TWI Reached Timeout or Not */
	if(Local_u32TimeOutCounter == TWI_TIMEOUT)
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	ab 81       	ldd	r26, Y+3	; 0x03
    2372:	bc 81       	ldd	r27, Y+4	; 0x04
    2374:	80 34       	cpi	r24, 0x40	; 64
    2376:	2b e4       	ldi	r18, 0x4B	; 75
    2378:	92 07       	cpc	r25, r18
    237a:	2c e4       	ldi	r18, 0x4C	; 76
    237c:	a2 07       	cpc	r26, r18
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	b2 07       	cpc	r27, r18
    2382:	19 f4       	brne	.+6      	; 0x238a <TWI_MasterReadDataByte+0x94>
	{
		Local_ErrorStatus = TIMEOUT;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	13 c0       	rjmp	.+38     	; 0x23b0 <TWI_MasterReadDataByte+0xba>
	}
	else
	{
		/* Check if Received TWI Data Byte With ACK Returned Packet is Sent on the Bus or Not */
		if ((TWSR & TWI_STATUS_MASK) != TWI_RMASTER_DATA_BYTE_ACK_STATUS)
    238a:	e1 e2       	ldi	r30, 0x21	; 33
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	88 7f       	andi	r24, 0xF8	; 248
    2396:	90 70       	andi	r25, 0x00	; 0
    2398:	80 35       	cpi	r24, 0x50	; 80
    239a:	91 05       	cpc	r25, r1
    239c:	19 f0       	breq	.+6      	; 0x23a4 <TWI_MasterReadDataByte+0xae>
		{
			/* Return Error */
			Local_ErrorStatus = MasterReadDataByteAckError;
    239e:	87 e0       	ldi	r24, 0x07	; 7
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	06 c0       	rjmp	.+12     	; 0x23b0 <TWI_MasterReadDataByte+0xba>
		}
		else
		{
			/* Receive Data Sent By Slave Node Through Reading TWDR Register */
			*Copy_pu8DataByteToBeReceived = TWDR;
    23a4:	e3 e2       	ldi	r30, 0x23	; 35
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	ee 81       	ldd	r30, Y+6	; 0x06
    23ac:	ff 81       	ldd	r31, Y+7	; 0x07
    23ae:	80 83       	st	Z, r24
		}
	}

	return Local_ErrorStatus;
    23b0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    23b2:	27 96       	adiw	r28, 0x07	; 7
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <TWI_SendStopCondition>:
/*		     SCL is in high state					  */
/* Input Arguments : void						          */
/* Return          : void						          */
/**********************************************************************************/
void TWI_SendStopCondition(void)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	/* Send stop condition on the bus to finish the communication */
	SET_BIT(TWCR,TWCR_TWSTO);
    23cc:	a6 e5       	ldi	r26, 0x56	; 86
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e6 e5       	ldi	r30, 0x56	; 86
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	80 61       	ori	r24, 0x10	; 16
    23d8:	8c 93       	st	X, r24

	/* Clear TWI interrupt flag through setting TWINT bit in TWCR register to start the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
    23da:	a6 e5       	ldi	r26, 0x56	; 86
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e6 e5       	ldi	r30, 0x56	; 86
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	80 68       	ori	r24, 0x80	; 128
    23e6:	8c 93       	st	X, r24
}
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <SPI_masterInit>:
//ISR(SPI_STC_vect){
//	SPDR = *g_sendBuffer;
//}


void SPI_masterInit(void){
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    uint8 SPCR_variable = 0;
    23f8:	19 82       	std	Y+1, r1	; 0x01
    SPCR_variable = (SPE << SPCR_SPE)|(DORD << SPCR_DORD) |
    23fa:	85 e7       	ldi	r24, 0x75	; 117
    23fc:	89 83       	std	Y+1, r24	; 0x01
    		(MSTR_M << SPCR_MSTR) | (SPI_MODE << SPCR_CPHA) | SPI_CLOCK;
    SPCR = SPCR_variable;
    23fe:	ed e2       	ldi	r30, 0x2D	; 45
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	80 83       	st	Z, r24
    SPSR |= SPI2X;
    2406:	ae e2       	ldi	r26, 0x2E	; 46
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ee e2       	ldi	r30, 0x2E	; 46
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	8c 93       	st	X, r24
}
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <SPI_slaveInit>:

void SPI_slaveInit(void){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    uint8 SPCR_variable = 0;
    2424:	19 82       	std	Y+1, r1	; 0x01
    SPCR_variable = (SPE << SPCR_SPE)|(DORD << SPCR_DORD)|
    2426:	84 e6       	ldi	r24, 0x64	; 100
    2428:	89 83       	std	Y+1, r24	; 0x01
    		(MSTR_S << SPCR_MSTR)| (SPI_MODE << SPCR_CPHA);
    SPCR = SPCR_variable;
    242a:	ed e2       	ldi	r30, 0x2D	; 45
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	80 83       	st	Z, r24
}
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <SPI_transiver>:

uint8 SPI_transiver(uint8 copy_data){
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	0f 92       	push	r0
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	89 83       	std	Y+1, r24	; 0x01
    SPDR = copy_data;
    2446:	ef e2       	ldi	r30, 0x2F	; 47
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(SPSR , SPSR_SPIF));
    244e:	ee e2       	ldi	r30, 0x2E	; 46
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	88 23       	and	r24, r24
    2456:	dc f7       	brge	.-10     	; 0x244e <SPI_transiver+0x14>
    return SPDR;
    2458:	ef e2       	ldi	r30, 0x2F	; 47
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
}
    245e:	0f 90       	pop	r0
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <SPI_sendData>:

void SPI_sendData(uint8 copy_data){
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	89 83       	std	Y+1, r24	; 0x01
    SPDR = copy_data;
    2472:	ef e2       	ldi	r30, 0x2F	; 47
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(SPSR , SPSR_SPIF));
    247a:	ee e2       	ldi	r30, 0x2E	; 46
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	88 23       	and	r24, r24
    2482:	dc f7       	brge	.-10     	; 0x247a <SPI_sendData+0x14>
}
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <SPI_receiveData>:

uint8 SPI_receiveData(void){
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xff;
    2494:	ef e2       	ldi	r30, 0x2F	; 47
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(SPSR , SPSR_SPIF));
    249c:	ee e2       	ldi	r30, 0x2E	; 46
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	88 23       	and	r24, r24
    24a4:	dc f7       	brge	.-10     	; 0x249c <SPI_receiveData+0x10>
    return SPDR;
    24a6:	ef e2       	ldi	r30, 0x2F	; 47
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <GlobalInterrupt_enable>:
/*
Enabling Global Interrupt Bit, it is necessary for the initialization for each maskable Interrupts
Arguments:			void
Return:				void
*/
void GlobalInterrupt_enable(void){
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , GLOBAL_INTERRUPT_BIT);
    24ba:	af e5       	ldi	r26, 0x5F	; 95
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	ef e5       	ldi	r30, 0x5F	; 95
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 68       	ori	r24, 0x80	; 128
    24c6:	8c 93       	st	X, r24
}
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <Ext_Int0_Enable>:
Enable for INT0 External Interrupt
Arguments:			The interrupt sense control Mode.
Return:				void
*/

void Ext_Int0_Enable(uint8 Mode){
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	0f 92       	push	r0
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPinDirection(PORTD, PIN2_ID, PIN_INPUT);
    24da:	e2 e3       	ldi	r30, 0x32	; 50
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	62 e0       	ldi	r22, 0x02	; 2
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	GICR|=INT0_ENABLE;
    24e8:	ab e5       	ldi	r26, 0x5B	; 91
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	eb e5       	ldi	r30, 0x5B	; 91
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	80 64       	ori	r24, 0x40	; 64
    24f4:	8c 93       	st	X, r24
	MCUCR = ((MCUCR & 0xFC) | Mode);
    24f6:	a5 e5       	ldi	r26, 0x55	; 85
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e5 e5       	ldi	r30, 0x55	; 85
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	98 2f       	mov	r25, r24
    2502:	9c 7f       	andi	r25, 0xFC	; 252
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	89 2b       	or	r24, r25
    2508:	8c 93       	st	X, r24
}
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <Ext_Int0_Disable>:

 /*Disable for INT0 External Interrupt*/
void Ext_Int0_Disable(){
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	GICR&=~INT0_ENABLE;
    251a:	ab e5       	ldi	r26, 0x5B	; 91
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	eb e5       	ldi	r30, 0x5B	; 91
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8f 7b       	andi	r24, 0xBF	; 191
    2526:	8c 93       	st	X, r24
}
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <Ext_Int1_Enable>:
/*
Enable for INT1 External Interrupt
Arguments:			The interrupt sense control Mode.
Return:				void
*/
void Ext_Int1_Enable(uint8 Mode){
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	0f 92       	push	r0
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPinDirection(PORTD, PIN3_ID, PIN_INPUT);
    253a:	e2 e3       	ldi	r30, 0x32	; 50
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	63 e0       	ldi	r22, 0x03	; 3
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	GICR|=INT1_ENABLE;
    2548:	ab e5       	ldi	r26, 0x5B	; 91
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	eb e5       	ldi	r30, 0x5B	; 91
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	80 68       	ori	r24, 0x80	; 128
    2554:	8c 93       	st	X, r24
	MCUCR = ((MCUCR & 0xF3) | (Mode<<2));
    2556:	a5 e5       	ldi	r26, 0x55	; 85
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e5 e5       	ldi	r30, 0x55	; 85
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	28 2f       	mov	r18, r24
    2562:	23 7f       	andi	r18, 0xF3	; 243
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	82 2b       	or	r24, r18
    2574:	8c 93       	st	X, r24
}
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <Ext_Int1_Disable>:

 /*Disable for INT1 External Interrupt*/
void Ext_Int1_Disable(){
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	GICR&=~INT1_ENABLE;
    2586:	ab e5       	ldi	r26, 0x5B	; 91
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	eb e5       	ldi	r30, 0x5B	; 91
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	8f 77       	andi	r24, 0x7F	; 127
    2592:	8c 93       	st	X, r24
}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <Ext_Int2_Enable>:
/*
Enable for INT2 External Interrupt
Arguments:			The interrupt sense control Mode.
Return:				void
*/
void Ext_Int2_Enable(uint8 Mode){
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPinDirection(PORTB, PIN2_ID, PIN_INPUT);
    25a6:	e8 e3       	ldi	r30, 0x38	; 56
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	62 e0       	ldi	r22, 0x02	; 2
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	GICR|=INT2_ENABLE;
    25b4:	ab e5       	ldi	r26, 0x5B	; 91
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e5       	ldi	r30, 0x5B	; 91
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 62       	ori	r24, 0x20	; 32
    25c0:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,Mode);
    25c2:	a4 e5       	ldi	r26, 0x54	; 84
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e4 e5       	ldi	r30, 0x54	; 84
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	48 2f       	mov	r20, r24
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	02 2e       	mov	r0, r18
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <Ext_Int2_Enable+0x46>
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	0a 94       	dec	r0
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <Ext_Int2_Enable+0x42>
    25e4:	84 2b       	or	r24, r20
    25e6:	8c 93       	st	X, r24
}
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <Ext_Int2_Disable>:
 /*Disable for INT0 External Interrupt*/
void Ext_Int2_Disable(){
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
	GICR&=~INT2_ENABLE;
    25f8:	ab e5       	ldi	r26, 0x5B	; 91
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	eb e5       	ldi	r30, 0x5B	; 91
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	8f 7d       	andi	r24, 0xDF	; 223
    2604:	8c 93       	st	X, r24
}
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <DIO_setupPinDirection>:
Arguments:  port_number: The port number to which the pin belongs (PORTA_ID, PORTB_ID, etc.).
			pin_number: The pin number within the port.
			direction: The desired direction of the pin (PIN_INPUT or PIN_OUTPUT).
Return:		void
 */
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number,DIO_PinDirectionType direction) {
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	00 d0       	rcall	.+0      	; 0x2612 <DIO_setupPinDirection+0x6>
    2612:	00 d0       	rcall	.+0      	; 0x2614 <DIO_setupPinDirection+0x8>
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	6a 83       	std	Y+2, r22	; 0x02
    261e:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_number >= NUMBER_OF_PORTS) || (pin_number >= NUMBER_OF_PINS_PER_PORT)) {
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	84 30       	cpi	r24, 0x04	; 4
    2624:	08 f0       	brcs	.+2      	; 0x2628 <DIO_setupPinDirection+0x1c>
    2626:	d5 c0       	rjmp	.+426    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	88 30       	cpi	r24, 0x08	; 8
    262c:	08 f0       	brcs	.+2      	; 0x2630 <DIO_setupPinDirection+0x24>
    262e:	d1 c0       	rjmp	.+418    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
	} else {
		switch (port_number) {
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	3d 83       	std	Y+5, r19	; 0x05
    2638:	2c 83       	std	Y+4, r18	; 0x04
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	9d 81       	ldd	r25, Y+5	; 0x05
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	91 05       	cpc	r25, r1
    2642:	09 f4       	brne	.+2      	; 0x2646 <DIO_setupPinDirection+0x3a>
    2644:	43 c0       	rjmp	.+134    	; 0x26cc <DIO_setupPinDirection+0xc0>
    2646:	2c 81       	ldd	r18, Y+4	; 0x04
    2648:	3d 81       	ldd	r19, Y+5	; 0x05
    264a:	22 30       	cpi	r18, 0x02	; 2
    264c:	31 05       	cpc	r19, r1
    264e:	2c f4       	brge	.+10     	; 0x265a <DIO_setupPinDirection+0x4e>
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	9d 81       	ldd	r25, Y+5	; 0x05
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	71 f0       	breq	.+28     	; 0x2674 <DIO_setupPinDirection+0x68>
    2658:	bc c0       	rjmp	.+376    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
    265a:	2c 81       	ldd	r18, Y+4	; 0x04
    265c:	3d 81       	ldd	r19, Y+5	; 0x05
    265e:	22 30       	cpi	r18, 0x02	; 2
    2660:	31 05       	cpc	r19, r1
    2662:	09 f4       	brne	.+2      	; 0x2666 <DIO_setupPinDirection+0x5a>
    2664:	5f c0       	rjmp	.+190    	; 0x2724 <DIO_setupPinDirection+0x118>
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	83 30       	cpi	r24, 0x03	; 3
    266c:	91 05       	cpc	r25, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <DIO_setupPinDirection+0x66>
    2670:	85 c0       	rjmp	.+266    	; 0x277c <DIO_setupPinDirection+0x170>
    2672:	af c0       	rjmp	.+350    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
		case (PORTA_ID):
			if (direction == PIN_OUTPUT) {
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	a1 f4       	brne	.+40     	; 0x26a2 <DIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_number);
    267a:	aa e3       	ldi	r26, 0x3A	; 58
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	ea e3       	ldi	r30, 0x3A	; 58
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	48 2f       	mov	r20, r24
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	02 2e       	mov	r0, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <DIO_setupPinDirection+0x8c>
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	0a 94       	dec	r0
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <DIO_setupPinDirection+0x88>
    269c:	84 2b       	or	r24, r20
    269e:	8c 93       	st	X, r24
    26a0:	98 c0       	rjmp	.+304    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_number);
    26a2:	aa e3       	ldi	r26, 0x3A	; 58
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	ea e3       	ldi	r30, 0x3A	; 58
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	48 2f       	mov	r20, r24
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	02 2e       	mov	r0, r18
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <DIO_setupPinDirection+0xb4>
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	0a 94       	dec	r0
    26c2:	e2 f7       	brpl	.-8      	; 0x26bc <DIO_setupPinDirection+0xb0>
    26c4:	80 95       	com	r24
    26c6:	84 23       	and	r24, r20
    26c8:	8c 93       	st	X, r24
    26ca:	83 c0       	rjmp	.+262    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case (PORTB_ID):
			if (direction == PIN_OUTPUT) {
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	a1 f4       	brne	.+40     	; 0x26fa <DIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_number);
    26d2:	a7 e3       	ldi	r26, 0x37	; 55
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e7 e3       	ldi	r30, 0x37	; 55
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	48 2f       	mov	r20, r24
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	02 2e       	mov	r0, r18
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <DIO_setupPinDirection+0xe4>
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	0a 94       	dec	r0
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <DIO_setupPinDirection+0xe0>
    26f4:	84 2b       	or	r24, r20
    26f6:	8c 93       	st	X, r24
    26f8:	6c c0       	rjmp	.+216    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_number);
    26fa:	a7 e3       	ldi	r26, 0x37	; 55
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e7 e3       	ldi	r30, 0x37	; 55
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	48 2f       	mov	r20, r24
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	02 2e       	mov	r0, r18
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <DIO_setupPinDirection+0x10c>
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	0a 94       	dec	r0
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <DIO_setupPinDirection+0x108>
    271c:	80 95       	com	r24
    271e:	84 23       	and	r24, r20
    2720:	8c 93       	st	X, r24
    2722:	57 c0       	rjmp	.+174    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case (PORTC_ID):
			if (direction == PIN_OUTPUT) {
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	a1 f4       	brne	.+40     	; 0x2752 <DIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_number);
    272a:	a4 e3       	ldi	r26, 0x34	; 52
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e4 e3       	ldi	r30, 0x34	; 52
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	48 2f       	mov	r20, r24
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 2e       	mov	r0, r18
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <DIO_setupPinDirection+0x13c>
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	0a 94       	dec	r0
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <DIO_setupPinDirection+0x138>
    274c:	84 2b       	or	r24, r20
    274e:	8c 93       	st	X, r24
    2750:	40 c0       	rjmp	.+128    	; 0x27d2 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_number);
    2752:	a4 e3       	ldi	r26, 0x34	; 52
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e4 e3       	ldi	r30, 0x34	; 52
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	48 2f       	mov	r20, r24
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	02 2e       	mov	r0, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <DIO_setupPinDirection+0x164>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <DIO_setupPinDirection+0x160>
    2774:	80 95       	com	r24
    2776:	84 23       	and	r24, r20
    2778:	8c 93       	st	X, r24
    277a:	2b c0       	rjmp	.+86     	; 0x27d2 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case (PORTD_ID):
			if (direction == PIN_OUTPUT) {
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	81 30       	cpi	r24, 0x01	; 1
    2780:	a1 f4       	brne	.+40     	; 0x27aa <DIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_number);
    2782:	a1 e3       	ldi	r26, 0x31	; 49
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e1 e3       	ldi	r30, 0x31	; 49
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	48 2f       	mov	r20, r24
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	02 2e       	mov	r0, r18
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <DIO_setupPinDirection+0x194>
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	0a 94       	dec	r0
    27a2:	e2 f7       	brpl	.-8      	; 0x279c <DIO_setupPinDirection+0x190>
    27a4:	84 2b       	or	r24, r20
    27a6:	8c 93       	st	X, r24
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_number);
    27aa:	a1 e3       	ldi	r26, 0x31	; 49
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e1 e3       	ldi	r30, 0x31	; 49
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	48 2f       	mov	r20, r24
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	02 2e       	mov	r0, r18
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <DIO_setupPinDirection+0x1bc>
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	0a 94       	dec	r0
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <DIO_setupPinDirection+0x1b8>
    27cc:	80 95       	com	r24
    27ce:	84 23       	and	r24, r20
    27d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <DIO_setupPortDirection>:
Configure the direction (input/output) of an entire port.
Arguments:  port_number: The port number to configure (PORTA_ID, PORTB_ID, etc.).
			direction: The desired direction of the entire port (PORT_INPUT or PORT_OUTPUT).
Return:     void
 */
void DIO_setupPortDirection(uint8 port_number, DIO_PinDirectionType direction) {
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <DIO_setupPortDirection+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <DIO_setupPortDirection+0x8>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_number >= NUMBER_OF_PORTS)) {
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	84 30       	cpi	r24, 0x04	; 4
    27f6:	90 f5       	brcc	.+100    	; 0x285c <DIO_setupPortDirection+0x7a>

	} else {
		switch (port_number) {
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3c 83       	std	Y+4, r19	; 0x04
    2800:	2b 83       	std	Y+3, r18	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	d1 f0       	breq	.+52     	; 0x2840 <DIO_setupPortDirection+0x5e>
    280c:	2b 81       	ldd	r18, Y+3	; 0x03
    280e:	3c 81       	ldd	r19, Y+4	; 0x04
    2810:	22 30       	cpi	r18, 0x02	; 2
    2812:	31 05       	cpc	r19, r1
    2814:	2c f4       	brge	.+10     	; 0x2820 <DIO_setupPortDirection+0x3e>
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	61 f0       	breq	.+24     	; 0x2836 <DIO_setupPortDirection+0x54>
    281e:	1e c0       	rjmp	.+60     	; 0x285c <DIO_setupPortDirection+0x7a>
    2820:	2b 81       	ldd	r18, Y+3	; 0x03
    2822:	3c 81       	ldd	r19, Y+4	; 0x04
    2824:	22 30       	cpi	r18, 0x02	; 2
    2826:	31 05       	cpc	r19, r1
    2828:	81 f0       	breq	.+32     	; 0x284a <DIO_setupPortDirection+0x68>
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	83 30       	cpi	r24, 0x03	; 3
    2830:	91 05       	cpc	r25, r1
    2832:	81 f0       	breq	.+32     	; 0x2854 <DIO_setupPortDirection+0x72>
    2834:	13 c0       	rjmp	.+38     	; 0x285c <DIO_setupPortDirection+0x7a>
		case (PORTA_ID):
			DDRA = direction;
    2836:	ea e3       	ldi	r30, 0x3A	; 58
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	80 83       	st	Z, r24
    283e:	0e c0       	rjmp	.+28     	; 0x285c <DIO_setupPortDirection+0x7a>
			break;
		case (PORTB_ID):
			DDRB = direction;
    2840:	e7 e3       	ldi	r30, 0x37	; 55
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	80 83       	st	Z, r24
    2848:	09 c0       	rjmp	.+18     	; 0x285c <DIO_setupPortDirection+0x7a>
			break;
		case (PORTC_ID):
			DDRC = direction;
    284a:	e4 e3       	ldi	r30, 0x34	; 52
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	80 83       	st	Z, r24
    2852:	04 c0       	rjmp	.+8      	; 0x285c <DIO_setupPortDirection+0x7a>
			break;
		case (PORTD_ID):
			DDRD = direction;
    2854:	e1 e3       	ldi	r30, 0x31	; 49
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	80 83       	st	Z, r24
			break;
		}
	}
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <DIO_writePin>:
 Arguments:  The port number to which the pin belongs (PORTA_ID, PORTB_ID, etc.).
 			The pin number within the port.
 			The value to write to the pin (LOGIC_HIGH or LOGIC_LOW).
Return:		void
*/
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value) {
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <DIO_writePin+0x6>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <DIO_writePin+0x8>
    2872:	0f 92       	push	r0
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	6a 83       	std	Y+2, r22	; 0x02
    287c:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_number >= NUMBER_OF_PORTS) || (pin_number >= NUMBER_OF_PINS_PER_PORT)) {
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	84 30       	cpi	r24, 0x04	; 4
    2882:	08 f0       	brcs	.+2      	; 0x2886 <DIO_writePin+0x1c>
    2884:	d5 c0       	rjmp	.+426    	; 0x2a30 <DIO_writePin+0x1c6>
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	88 30       	cpi	r24, 0x08	; 8
    288a:	08 f0       	brcs	.+2      	; 0x288e <DIO_writePin+0x24>
    288c:	d1 c0       	rjmp	.+418    	; 0x2a30 <DIO_writePin+0x1c6>

	} else {
		switch (port_number) {
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	3d 83       	std	Y+5, r19	; 0x05
    2896:	2c 83       	std	Y+4, r18	; 0x04
    2898:	8c 81       	ldd	r24, Y+4	; 0x04
    289a:	9d 81       	ldd	r25, Y+5	; 0x05
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	91 05       	cpc	r25, r1
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <DIO_writePin+0x3a>
    28a2:	43 c0       	rjmp	.+134    	; 0x292a <DIO_writePin+0xc0>
    28a4:	2c 81       	ldd	r18, Y+4	; 0x04
    28a6:	3d 81       	ldd	r19, Y+5	; 0x05
    28a8:	22 30       	cpi	r18, 0x02	; 2
    28aa:	31 05       	cpc	r19, r1
    28ac:	2c f4       	brge	.+10     	; 0x28b8 <DIO_writePin+0x4e>
    28ae:	8c 81       	ldd	r24, Y+4	; 0x04
    28b0:	9d 81       	ldd	r25, Y+5	; 0x05
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	71 f0       	breq	.+28     	; 0x28d2 <DIO_writePin+0x68>
    28b6:	bc c0       	rjmp	.+376    	; 0x2a30 <DIO_writePin+0x1c6>
    28b8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ba:	3d 81       	ldd	r19, Y+5	; 0x05
    28bc:	22 30       	cpi	r18, 0x02	; 2
    28be:	31 05       	cpc	r19, r1
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <DIO_writePin+0x5a>
    28c2:	5f c0       	rjmp	.+190    	; 0x2982 <DIO_writePin+0x118>
    28c4:	8c 81       	ldd	r24, Y+4	; 0x04
    28c6:	9d 81       	ldd	r25, Y+5	; 0x05
    28c8:	83 30       	cpi	r24, 0x03	; 3
    28ca:	91 05       	cpc	r25, r1
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <DIO_writePin+0x66>
    28ce:	85 c0       	rjmp	.+266    	; 0x29da <DIO_writePin+0x170>
    28d0:	af c0       	rjmp	.+350    	; 0x2a30 <DIO_writePin+0x1c6>
		case (PORTA_ID):
			if (value == LOGIC_HIGH) {
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	a1 f4       	brne	.+40     	; 0x2900 <DIO_writePin+0x96>
				SET_BIT(PORTA, pin_number);
    28d8:	ab e3       	ldi	r26, 0x3B	; 59
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	eb e3       	ldi	r30, 0x3B	; 59
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	48 2f       	mov	r20, r24
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	02 2e       	mov	r0, r18
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <DIO_writePin+0x8c>
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	0a 94       	dec	r0
    28f8:	e2 f7       	brpl	.-8      	; 0x28f2 <DIO_writePin+0x88>
    28fa:	84 2b       	or	r24, r20
    28fc:	8c 93       	st	X, r24
    28fe:	98 c0       	rjmp	.+304    	; 0x2a30 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_number);
    2900:	ab e3       	ldi	r26, 0x3B	; 59
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	eb e3       	ldi	r30, 0x3B	; 59
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	48 2f       	mov	r20, r24
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	02 2e       	mov	r0, r18
    2918:	02 c0       	rjmp	.+4      	; 0x291e <DIO_writePin+0xb4>
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	0a 94       	dec	r0
    2920:	e2 f7       	brpl	.-8      	; 0x291a <DIO_writePin+0xb0>
    2922:	80 95       	com	r24
    2924:	84 23       	and	r24, r20
    2926:	8c 93       	st	X, r24
    2928:	83 c0       	rjmp	.+262    	; 0x2a30 <DIO_writePin+0x1c6>
			}
			break;
		case (PORTB_ID):
			if (value == LOGIC_HIGH) {
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	a1 f4       	brne	.+40     	; 0x2958 <DIO_writePin+0xee>
				SET_BIT(PORTB, pin_number);
    2930:	a8 e3       	ldi	r26, 0x38	; 56
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e8 e3       	ldi	r30, 0x38	; 56
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	48 2f       	mov	r20, r24
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	02 2e       	mov	r0, r18
    2948:	02 c0       	rjmp	.+4      	; 0x294e <DIO_writePin+0xe4>
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	0a 94       	dec	r0
    2950:	e2 f7       	brpl	.-8      	; 0x294a <DIO_writePin+0xe0>
    2952:	84 2b       	or	r24, r20
    2954:	8c 93       	st	X, r24
    2956:	6c c0       	rjmp	.+216    	; 0x2a30 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_number);
    2958:	a8 e3       	ldi	r26, 0x38	; 56
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e8 e3       	ldi	r30, 0x38	; 56
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	48 2f       	mov	r20, r24
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	02 2e       	mov	r0, r18
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <DIO_writePin+0x10c>
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	0a 94       	dec	r0
    2978:	e2 f7       	brpl	.-8      	; 0x2972 <DIO_writePin+0x108>
    297a:	80 95       	com	r24
    297c:	84 23       	and	r24, r20
    297e:	8c 93       	st	X, r24
    2980:	57 c0       	rjmp	.+174    	; 0x2a30 <DIO_writePin+0x1c6>
			}
			break;
		case (PORTC_ID):
			if (value == LOGIC_HIGH) {
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	a1 f4       	brne	.+40     	; 0x29b0 <DIO_writePin+0x146>
				SET_BIT(PORTC, pin_number);
    2988:	a5 e3       	ldi	r26, 0x35	; 53
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e5 e3       	ldi	r30, 0x35	; 53
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	48 2f       	mov	r20, r24
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	02 2e       	mov	r0, r18
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_writePin+0x13c>
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	0a 94       	dec	r0
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <DIO_writePin+0x138>
    29aa:	84 2b       	or	r24, r20
    29ac:	8c 93       	st	X, r24
    29ae:	40 c0       	rjmp	.+128    	; 0x2a30 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_number);
    29b0:	a5 e3       	ldi	r26, 0x35	; 53
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e5 e3       	ldi	r30, 0x35	; 53
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	48 2f       	mov	r20, r24
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	02 2e       	mov	r0, r18
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <DIO_writePin+0x164>
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	0a 94       	dec	r0
    29d0:	e2 f7       	brpl	.-8      	; 0x29ca <DIO_writePin+0x160>
    29d2:	80 95       	com	r24
    29d4:	84 23       	and	r24, r20
    29d6:	8c 93       	st	X, r24
    29d8:	2b c0       	rjmp	.+86     	; 0x2a30 <DIO_writePin+0x1c6>
			}
			break;
		case (PORTD_ID):
			if (value == LOGIC_HIGH) {
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	a1 f4       	brne	.+40     	; 0x2a08 <DIO_writePin+0x19e>
				SET_BIT(PORTD, pin_number);
    29e0:	a2 e3       	ldi	r26, 0x32	; 50
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e2 e3       	ldi	r30, 0x32	; 50
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	48 2f       	mov	r20, r24
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	02 2e       	mov	r0, r18
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <DIO_writePin+0x194>
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	0a 94       	dec	r0
    2a00:	e2 f7       	brpl	.-8      	; 0x29fa <DIO_writePin+0x190>
    2a02:	84 2b       	or	r24, r20
    2a04:	8c 93       	st	X, r24
    2a06:	14 c0       	rjmp	.+40     	; 0x2a30 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_number);
    2a08:	a2 e3       	ldi	r26, 0x32	; 50
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e2 e3       	ldi	r30, 0x32	; 50
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	48 2f       	mov	r20, r24
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	02 2e       	mov	r0, r18
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <DIO_writePin+0x1bc>
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	0a 94       	dec	r0
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <DIO_writePin+0x1b8>
    2a2a:	80 95       	com	r24
    2a2c:	84 23       	and	r24, r20
    2a2e:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <DIO_readPin>:
Read the logic value (high/low) of a specific pin.
Arguments:  The port number to which the pin belongs (PORTA_ID, PORTB_ID, etc.).
			The pin number within the port.
Return:		The logic value read from the pin (LOGIC_HIGH or LOGIC_LOW). 
*/
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <DIO_readPin+0x6>
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <DIO_readPin+0x8>
    2a48:	0f 92       	push	r0
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
    2a50:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2a52:	19 82       	std	Y+1, r1	; 0x01

	if ((port_number >= NUMBER_OF_PORTS) || (pin_number >= NUMBER_OF_PINS_PER_PORT)) {
    2a54:	8a 81       	ldd	r24, Y+2	; 0x02
    2a56:	84 30       	cpi	r24, 0x04	; 4
    2a58:	08 f0       	brcs	.+2      	; 0x2a5c <DIO_readPin+0x1c>
    2a5a:	b1 c0       	rjmp	.+354    	; 0x2bbe <DIO_readPin+0x17e>
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	88 30       	cpi	r24, 0x08	; 8
    2a60:	08 f0       	brcs	.+2      	; 0x2a64 <DIO_readPin+0x24>
    2a62:	ad c0       	rjmp	.+346    	; 0x2bbe <DIO_readPin+0x17e>

	} else {
		switch (port_number) {
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	3d 83       	std	Y+5, r19	; 0x05
    2a6c:	2c 83       	std	Y+4, r18	; 0x04
    2a6e:	4c 81       	ldd	r20, Y+4	; 0x04
    2a70:	5d 81       	ldd	r21, Y+5	; 0x05
    2a72:	41 30       	cpi	r20, 0x01	; 1
    2a74:	51 05       	cpc	r21, r1
    2a76:	d9 f1       	breq	.+118    	; 0x2aee <DIO_readPin+0xae>
    2a78:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	91 05       	cpc	r25, r1
    2a80:	34 f4       	brge	.+12     	; 0x2a8e <DIO_readPin+0x4e>
    2a82:	2c 81       	ldd	r18, Y+4	; 0x04
    2a84:	3d 81       	ldd	r19, Y+5	; 0x05
    2a86:	21 15       	cp	r18, r1
    2a88:	31 05       	cpc	r19, r1
    2a8a:	71 f0       	breq	.+28     	; 0x2aa8 <DIO_readPin+0x68>
    2a8c:	98 c0       	rjmp	.+304    	; 0x2bbe <DIO_readPin+0x17e>
    2a8e:	4c 81       	ldd	r20, Y+4	; 0x04
    2a90:	5d 81       	ldd	r21, Y+5	; 0x05
    2a92:	42 30       	cpi	r20, 0x02	; 2
    2a94:	51 05       	cpc	r21, r1
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <DIO_readPin+0x5a>
    2a98:	4d c0       	rjmp	.+154    	; 0x2b34 <DIO_readPin+0xf4>
    2a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9e:	83 30       	cpi	r24, 0x03	; 3
    2aa0:	91 05       	cpc	r25, r1
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <DIO_readPin+0x66>
    2aa4:	6a c0       	rjmp	.+212    	; 0x2b7a <DIO_readPin+0x13a>
    2aa6:	8b c0       	rjmp	.+278    	; 0x2bbe <DIO_readPin+0x17e>
		case (PORTA_ID):
			if (GET_BIT(PINA, pin_number)) {
    2aa8:	e9 e3       	ldi	r30, 0x39	; 57
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	48 2f       	mov	r20, r24
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <DIO_readPin+0x82>
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	2a 95       	dec	r18
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <DIO_readPin+0x7e>
    2ac6:	9a 01       	movw	r18, r20
    2ac8:	28 23       	and	r18, r24
    2aca:	39 23       	and	r19, r25
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	88 2f       	mov	r24, r24
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a9 01       	movw	r20, r18
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <DIO_readPin+0x9a>
    2ad6:	55 95       	asr	r21
    2ad8:	47 95       	ror	r20
    2ada:	8a 95       	dec	r24
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <DIO_readPin+0x96>
    2ade:	ca 01       	movw	r24, r20
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <DIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	6a c0       	rjmp	.+212    	; 0x2bbe <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    2aea:	19 82       	std	Y+1, r1	; 0x01
    2aec:	68 c0       	rjmp	.+208    	; 0x2bbe <DIO_readPin+0x17e>
			}
			break;
		case (PORTB_ID):
			if (GET_BIT(PINB, pin_number)) {
    2aee:	e6 e3       	ldi	r30, 0x36	; 54
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	48 2f       	mov	r20, r24
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	28 2f       	mov	r18, r24
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <DIO_readPin+0xc8>
    2b04:	88 0f       	add	r24, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	2a 95       	dec	r18
    2b0a:	e2 f7       	brpl	.-8      	; 0x2b04 <DIO_readPin+0xc4>
    2b0c:	9a 01       	movw	r18, r20
    2b0e:	28 23       	and	r18, r24
    2b10:	39 23       	and	r19, r25
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a9 01       	movw	r20, r18
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <DIO_readPin+0xe0>
    2b1c:	55 95       	asr	r21
    2b1e:	47 95       	ror	r20
    2b20:	8a 95       	dec	r24
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <DIO_readPin+0xdc>
    2b24:	ca 01       	movw	r24, r20
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	19 f0       	breq	.+6      	; 0x2b30 <DIO_readPin+0xf0>
				pin_value = LOGIC_HIGH;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	47 c0       	rjmp	.+142    	; 0x2bbe <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	45 c0       	rjmp	.+138    	; 0x2bbe <DIO_readPin+0x17e>
			}
			break;
		case (PORTC_ID):
			if (GET_BIT(PINC, pin_number)) {
    2b34:	e3 e3       	ldi	r30, 0x33	; 51
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	48 2f       	mov	r20, r24
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <DIO_readPin+0x10e>
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	2a 95       	dec	r18
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <DIO_readPin+0x10a>
    2b52:	9a 01       	movw	r18, r20
    2b54:	28 23       	and	r18, r24
    2b56:	39 23       	and	r19, r25
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	88 2f       	mov	r24, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a9 01       	movw	r20, r18
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <DIO_readPin+0x126>
    2b62:	55 95       	asr	r21
    2b64:	47 95       	ror	r20
    2b66:	8a 95       	dec	r24
    2b68:	e2 f7       	brpl	.-8      	; 0x2b62 <DIO_readPin+0x122>
    2b6a:	ca 01       	movw	r24, r20
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	19 f0       	breq	.+6      	; 0x2b76 <DIO_readPin+0x136>
				pin_value = LOGIC_HIGH;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	24 c0       	rjmp	.+72     	; 0x2bbe <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    2b76:	19 82       	std	Y+1, r1	; 0x01
    2b78:	22 c0       	rjmp	.+68     	; 0x2bbe <DIO_readPin+0x17e>
			}
			break;
		case (PORTD_ID):
			if (GET_BIT(PIND, pin_number)) {
    2b7a:	e0 e3       	ldi	r30, 0x30	; 48
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	48 2f       	mov	r20, r24
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <DIO_readPin+0x154>
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	2a 95       	dec	r18
    2b96:	e2 f7       	brpl	.-8      	; 0x2b90 <DIO_readPin+0x150>
    2b98:	9a 01       	movw	r18, r20
    2b9a:	28 23       	and	r18, r24
    2b9c:	39 23       	and	r19, r25
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a9 01       	movw	r20, r18
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <DIO_readPin+0x16c>
    2ba8:	55 95       	asr	r21
    2baa:	47 95       	ror	r20
    2bac:	8a 95       	dec	r24
    2bae:	e2 f7       	brpl	.-8      	; 0x2ba8 <DIO_readPin+0x168>
    2bb0:	ca 01       	movw	r24, r20
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	19 f0       	breq	.+6      	; 0x2bbc <DIO_readPin+0x17c>
				pin_value = LOGIC_HIGH;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    2bbc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}

	}
	return pin_value;
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <DIO_writePort>:
Write a logic value (high/low) to an entire port.
Arguments:  The port number to write to (PORTA_ID, PORTB_ID, etc.).
			The value to write to the port.
Return:		void		
*/
void DIO_writePort(uint8 port_number, uint8 value) {
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <DIO_writePort+0x6>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <DIO_writePort+0x8>
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_number >= NUMBER_OF_PORTS)) {
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	84 30       	cpi	r24, 0x04	; 4
    2be4:	90 f5       	brcc	.+100    	; 0x2c4a <DIO_writePort+0x7a>

	} else {
		switch (port_number) {
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	3c 83       	std	Y+4, r19	; 0x04
    2bee:	2b 83       	std	Y+3, r18	; 0x03
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	d1 f0       	breq	.+52     	; 0x2c2e <DIO_writePort+0x5e>
    2bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bfe:	22 30       	cpi	r18, 0x02	; 2
    2c00:	31 05       	cpc	r19, r1
    2c02:	2c f4       	brge	.+10     	; 0x2c0e <DIO_writePort+0x3e>
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	61 f0       	breq	.+24     	; 0x2c24 <DIO_writePort+0x54>
    2c0c:	1e c0       	rjmp	.+60     	; 0x2c4a <DIO_writePort+0x7a>
    2c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c10:	3c 81       	ldd	r19, Y+4	; 0x04
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	81 f0       	breq	.+32     	; 0x2c38 <DIO_writePort+0x68>
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1c:	83 30       	cpi	r24, 0x03	; 3
    2c1e:	91 05       	cpc	r25, r1
    2c20:	81 f0       	breq	.+32     	; 0x2c42 <DIO_writePort+0x72>
    2c22:	13 c0       	rjmp	.+38     	; 0x2c4a <DIO_writePort+0x7a>
		case (PORTA_ID):
			PORTA = value;
    2c24:	eb e3       	ldi	r30, 0x3B	; 59
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	80 83       	st	Z, r24
    2c2c:	0e c0       	rjmp	.+28     	; 0x2c4a <DIO_writePort+0x7a>
			break;
		case (PORTB_ID):
			PORTB = value;
    2c2e:	e8 e3       	ldi	r30, 0x38	; 56
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	80 83       	st	Z, r24
    2c36:	09 c0       	rjmp	.+18     	; 0x2c4a <DIO_writePort+0x7a>
			break;
		case (PORTC_ID):
			PORTC = value;
    2c38:	e5 e3       	ldi	r30, 0x35	; 53
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	80 83       	st	Z, r24
    2c40:	04 c0       	rjmp	.+8      	; 0x2c4a <DIO_writePort+0x7a>
			break;
		case (PORTD_ID):
			PORTD = value;
    2c42:	e2 e3       	ldi	r30, 0x32	; 50
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	80 83       	st	Z, r24
			break;
		}

	}
}
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <DIO_readPort>:
/*
Read the logic value (high/low) of an entire port.
Arguments:			The port number to read from (PORTA_ID, PORTB_ID, etc.).
Return:				An 8 bit number containing values of the pins in the port specified
*/
uint8 DIO_readPort(uint8 port_number) {
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <DIO_readPort+0x6>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <DIO_readPort+0x8>
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    2c66:	19 82       	std	Y+1, r1	; 0x01

	if ((port_number >= NUMBER_OF_PORTS)) {
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	84 30       	cpi	r24, 0x04	; 4
    2c6c:	90 f5       	brcc	.+100    	; 0x2cd2 <DIO_readPort+0x7a>

	} else {
		switch (port_number) {
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	3c 83       	std	Y+4, r19	; 0x04
    2c76:	2b 83       	std	Y+3, r18	; 0x03
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	81 30       	cpi	r24, 0x01	; 1
    2c7e:	91 05       	cpc	r25, r1
    2c80:	d1 f0       	breq	.+52     	; 0x2cb6 <DIO_readPort+0x5e>
    2c82:	2b 81       	ldd	r18, Y+3	; 0x03
    2c84:	3c 81       	ldd	r19, Y+4	; 0x04
    2c86:	22 30       	cpi	r18, 0x02	; 2
    2c88:	31 05       	cpc	r19, r1
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <DIO_readPort+0x3e>
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	61 f0       	breq	.+24     	; 0x2cac <DIO_readPort+0x54>
    2c94:	1e c0       	rjmp	.+60     	; 0x2cd2 <DIO_readPort+0x7a>
    2c96:	2b 81       	ldd	r18, Y+3	; 0x03
    2c98:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9a:	22 30       	cpi	r18, 0x02	; 2
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	81 f0       	breq	.+32     	; 0x2cc0 <DIO_readPort+0x68>
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	83 30       	cpi	r24, 0x03	; 3
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	81 f0       	breq	.+32     	; 0x2cca <DIO_readPort+0x72>
    2caa:	13 c0       	rjmp	.+38     	; 0x2cd2 <DIO_readPort+0x7a>
		case (PORTA_ID):
			port_value = PINA;
    2cac:	e9 e3       	ldi	r30, 0x39	; 57
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    2cb4:	0e c0       	rjmp	.+28     	; 0x2cd2 <DIO_readPort+0x7a>
			break;
		case (PORTB_ID):
			port_value = PINB;
    2cb6:	e6 e3       	ldi	r30, 0x36	; 54
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	09 c0       	rjmp	.+18     	; 0x2cd2 <DIO_readPort+0x7a>
			break;
		case (PORTC_ID):
			port_value = PINC;
    2cc0:	e3 e3       	ldi	r30, 0x33	; 51
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	04 c0       	rjmp	.+8      	; 0x2cd2 <DIO_readPort+0x7a>
			break;
		case (PORTD_ID):
			port_value = PIND;
    2cca:	e0 e3       	ldi	r30, 0x30	; 48
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return port_value;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <DIO_TogglePin>:
Writing alternating logic value (high&low) of a specified pin.
Arguments:			The port number to read from (PORTA_ID, PORTB_ID, etc.).
					An 8 bit number containing values of the pins in the port specified
Return:				void
*/
void DIO_TogglePin(uint8 Port,uint8 Pin){
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	00 d0       	rcall	.+0      	; 0x2ce8 <DIO_TogglePin+0x6>
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <DIO_TogglePin+0x8>
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	3c 83       	std	Y+4, r19	; 0x04
    2cfa:	2b 83       	std	Y+3, r18	; 0x03
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	81 30       	cpi	r24, 0x01	; 1
    2d02:	91 05       	cpc	r25, r1
    2d04:	49 f1       	breq	.+82     	; 0x2d58 <DIO_TogglePin+0x76>
    2d06:	2b 81       	ldd	r18, Y+3	; 0x03
    2d08:	3c 81       	ldd	r19, Y+4	; 0x04
    2d0a:	22 30       	cpi	r18, 0x02	; 2
    2d0c:	31 05       	cpc	r19, r1
    2d0e:	2c f4       	brge	.+10     	; 0x2d1a <DIO_TogglePin+0x38>
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	9c 81       	ldd	r25, Y+4	; 0x04
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	61 f0       	breq	.+24     	; 0x2d30 <DIO_TogglePin+0x4e>
    2d18:	5a c0       	rjmp	.+180    	; 0x2dce <DIO_TogglePin+0xec>
    2d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1e:	22 30       	cpi	r18, 0x02	; 2
    2d20:	31 05       	cpc	r19, r1
    2d22:	71 f1       	breq	.+92     	; 0x2d80 <DIO_TogglePin+0x9e>
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	83 30       	cpi	r24, 0x03	; 3
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	e9 f1       	breq	.+122    	; 0x2da8 <DIO_TogglePin+0xc6>
    2d2e:	4f c0       	rjmp	.+158    	; 0x2dce <DIO_TogglePin+0xec>
		case PORTA_ID:
		TOGGLE_BIT(PORTA,Pin);
    2d30:	ab e3       	ldi	r26, 0x3B	; 59
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	eb e3       	ldi	r30, 0x3B	; 59
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	48 2f       	mov	r20, r24
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	02 2e       	mov	r0, r18
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <DIO_TogglePin+0x6c>
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	0a 94       	dec	r0
    2d50:	e2 f7       	brpl	.-8      	; 0x2d4a <DIO_TogglePin+0x68>
    2d52:	84 27       	eor	r24, r20
    2d54:	8c 93       	st	X, r24
    2d56:	3b c0       	rjmp	.+118    	; 0x2dce <DIO_TogglePin+0xec>
		break;
		case PORTB_ID:
		TOGGLE_BIT(PORTB,Pin);
    2d58:	a8 e3       	ldi	r26, 0x38	; 56
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e8 e3       	ldi	r30, 0x38	; 56
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	48 2f       	mov	r20, r24
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	02 2e       	mov	r0, r18
    2d70:	02 c0       	rjmp	.+4      	; 0x2d76 <DIO_TogglePin+0x94>
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	0a 94       	dec	r0
    2d78:	e2 f7       	brpl	.-8      	; 0x2d72 <DIO_TogglePin+0x90>
    2d7a:	84 27       	eor	r24, r20
    2d7c:	8c 93       	st	X, r24
    2d7e:	27 c0       	rjmp	.+78     	; 0x2dce <DIO_TogglePin+0xec>
		break;
		case PORTC_ID:
		TOGGLE_BIT(PORTC,Pin);
    2d80:	a5 e3       	ldi	r26, 0x35	; 53
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e5 e3       	ldi	r30, 0x35	; 53
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	48 2f       	mov	r20, r24
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	02 2e       	mov	r0, r18
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <DIO_TogglePin+0xbc>
    2d9a:	88 0f       	add	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	0a 94       	dec	r0
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <DIO_TogglePin+0xb8>
    2da2:	84 27       	eor	r24, r20
    2da4:	8c 93       	st	X, r24
    2da6:	13 c0       	rjmp	.+38     	; 0x2dce <DIO_TogglePin+0xec>
		break;
		case PORTD_ID:
		TOGGLE_BIT(PORTD,Pin);
    2da8:	a2 e3       	ldi	r26, 0x32	; 50
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e2 e3       	ldi	r30, 0x32	; 50
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	48 2f       	mov	r20, r24
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	02 2e       	mov	r0, r18
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <DIO_TogglePin+0xe4>
    2dc2:	88 0f       	add	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	0a 94       	dec	r0
    2dc8:	e2 f7       	brpl	.-8      	; 0x2dc2 <DIO_TogglePin+0xe0>
    2dca:	84 27       	eor	r24, r20
    2dcc:	8c 93       	st	X, r24
		break;

	}
}
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <__vector_16>:
volatile uint16 * g_ADCBuffer;

/* Interrupt service routine where the value of the ADC is saved in the    *
 * ADCBuffer variable.
                                                      */
ISR(VECTOR_16){
    2ddc:	1f 92       	push	r1
    2dde:	0f 92       	push	r0
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	0f 92       	push	r0
    2de4:	11 24       	eor	r1, r1
    2de6:	8f 93       	push	r24
    2de8:	9f 93       	push	r25
    2dea:	af 93       	push	r26
    2dec:	bf 93       	push	r27
    2dee:	ef 93       	push	r30
    2df0:	ff 93       	push	r31
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    *g_ADCBuffer = ADC;
    2dfa:	e0 91 7e 01 	lds	r30, 0x017E
    2dfe:	f0 91 7f 01 	lds	r31, 0x017F
    2e02:	a4 e2       	ldi	r26, 0x24	; 36
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	8d 91       	ld	r24, X+
    2e08:	9c 91       	ld	r25, X
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
}
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	ff 91       	pop	r31
    2e14:	ef 91       	pop	r30
    2e16:	bf 91       	pop	r27
    2e18:	af 91       	pop	r26
    2e1a:	9f 91       	pop	r25
    2e1c:	8f 91       	pop	r24
    2e1e:	0f 90       	pop	r0
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	0f 90       	pop	r0
    2e24:	1f 90       	pop	r1
    2e26:	18 95       	reti

00002e28 <ADC_Init>:


Std_ReturnType ADC_Init(const ADC_ConfigType *ConfigPtr) {
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <ADC_Init+0x6>
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <ADC_Init+0x8>
    2e30:	0f 92       	push	r0
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
	/* Configure ADC settings */
	uint8 reference = ConfigPtr->reference;
    2e3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e3e:	81 81       	ldd	r24, Z+1	; 0x01
    2e40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 prescaler = ConfigPtr->prescaler;
    2e42:	eb 81       	ldd	r30, Y+3	; 0x03
    2e44:	fc 81       	ldd	r31, Y+4	; 0x04
    2e46:	80 81       	ld	r24, Z
    2e48:	89 83       	std	Y+1, r24	; 0x01
	
	SET_BIT(ADCSRA, ADEN); /* Enable the ADC */
    2e4a:	a6 e2       	ldi	r26, 0x26	; 38
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	e6 e2       	ldi	r30, 0x26	; 38
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	80 68       	ori	r24, 0x80	; 128
    2e56:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA, ADIE); /* Disable the ADC interrupt */
    2e58:	a6 e2       	ldi	r26, 0x26	; 38
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e6 e2       	ldi	r30, 0x26	; 38
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	87 7f       	andi	r24, 0xF7	; 247
    2e64:	8c 93       	st	X, r24
	ADMUX = (ADMUX & 0x3F) | (reference << 6); /* Set reference input */
    2e66:	a7 e2       	ldi	r26, 0x27	; 39
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e7 e2       	ldi	r30, 0x27	; 39
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	28 2f       	mov	r18, r24
    2e72:	2f 73       	andi	r18, 0x3F	; 63
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	00 24       	eor	r0, r0
    2e7c:	96 95       	lsr	r25
    2e7e:	87 95       	ror	r24
    2e80:	07 94       	ror	r0
    2e82:	96 95       	lsr	r25
    2e84:	87 95       	ror	r24
    2e86:	07 94       	ror	r0
    2e88:	98 2f       	mov	r25, r24
    2e8a:	80 2d       	mov	r24, r0
    2e8c:	82 2b       	or	r24, r18
    2e8e:	8c 93       	st	X, r24
	
	/* Set pre-scaler */
	switch (prescaler) {
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	88 2f       	mov	r24, r24
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	87 30       	cpi	r24, 0x07	; 7
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	68 f4       	brcc	.+26     	; 0x2eb8 <ADC_Init+0x90>
		case ADC_PRESCALER_8:
		case ADC_PRESCALER_16:
		case ADC_PRESCALER_32:
		case ADC_PRESCALER_64:
		case ADC_PRESCALER_128:
		ADCSRA = (ADCSRA & 0xF8) | prescaler;
    2e9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e6 e2       	ldi	r30, 0x26	; 38
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	98 2f       	mov	r25, r24
    2eaa:	98 7f       	andi	r25, 0xF8	; 248
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	89 2b       	or	r24, r25
    2eb0:	8c 93       	st	X, r24
		break;
		default:
		return E_NOT_OK;
	}
	
	return E_OK;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <ADC_Init+0x92>
		case ADC_PRESCALER_64:
		case ADC_PRESCALER_128:
		ADCSRA = (ADCSRA & 0xF8) | prescaler;
		break;
		default:
		return E_NOT_OK;
    2eb8:	1d 82       	std	Y+5, r1	; 0x05
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return E_OK;
}
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <ADC_readChannel_polling>:

Std_ReturnType ADC_readChannel_polling(uint8 channelNum , uint16 * read_buffer){
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <ADC_readChannel_polling+0x6>
    2ed2:	0f 92       	push	r0
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	7b 83       	std	Y+3, r23	; 0x03
    2edc:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX = (ADMUX & 0xE0) | channelNum; /* channel number that I want to read from */
    2ede:	a7 e2       	ldi	r26, 0x27	; 39
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	e7 e2       	ldi	r30, 0x27	; 39
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	98 2f       	mov	r25, r24
    2eea:	90 7e       	andi	r25, 0xE0	; 224
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	89 2b       	or	r24, r25
    2ef0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADSC);/* ADC start conversion */
    2ef2:	a6 e2       	ldi	r26, 0x26	; 38
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e6 e2       	ldi	r30, 0x26	; 38
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	80 64       	ori	r24, 0x40	; 64
    2efe:	8c 93       	st	X, r24
	while(!(GET_BIT(ADCSRA , ADIF)));
    2f00:	e6 e2       	ldi	r30, 0x26	; 38
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	80 71       	andi	r24, 0x10	; 16
    2f0c:	90 70       	andi	r25, 0x00	; 0
    2f0e:	95 95       	asr	r25
    2f10:	87 95       	ror	r24
    2f12:	95 95       	asr	r25
    2f14:	87 95       	ror	r24
    2f16:	95 95       	asr	r25
    2f18:	87 95       	ror	r24
    2f1a:	95 95       	asr	r25
    2f1c:	87 95       	ror	r24
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	79 f3       	breq	.-34     	; 0x2f00 <ADC_readChannel_polling+0x34>
	SET_BIT(ADCSRA , ADIF);
    2f22:	a6 e2       	ldi	r26, 0x26	; 38
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e6 e2       	ldi	r30, 0x26	; 38
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	80 61       	ori	r24, 0x10	; 16
    2f2e:	8c 93       	st	X, r24
	*read_buffer = 0xFF & ADCL;
    2f30:	e4 e2       	ldi	r30, 0x24	; 36
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
	*read_buffer = ((*read_buffer & 0xFF) | (ADCH<<8));
    2f42:	ea 81       	ldd	r30, Y+2	; 0x02
    2f44:	fb 81       	ldd	r31, Y+3	; 0x03
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	9c 01       	movw	r18, r24
    2f4c:	30 70       	andi	r19, 0x00	; 0
    2f4e:	e5 e2       	ldi	r30, 0x25	; 37
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	88 2f       	mov	r24, r24
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	98 2f       	mov	r25, r24
    2f5a:	88 27       	eor	r24, r24
    2f5c:	82 2b       	or	r24, r18
    2f5e:	93 2b       	or	r25, r19
    2f60:	ea 81       	ldd	r30, Y+2	; 0x02
    2f62:	fb 81       	ldd	r31, Y+3	; 0x03
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	80 83       	st	Z, r24
	return E_OK;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
}
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <ADC_readChannel_interrupt>:


Std_ReturnType ADC_readChannel_interrupt(uint8 channelNum, uint16 *read_buffer){
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <ADC_readChannel_interrupt+0x6>
    2f7c:	0f 92       	push	r0
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	7b 83       	std	Y+3, r23	; 0x03
    2f86:	6a 83       	std	Y+2, r22	; 0x02
	g_ADCBuffer = read_buffer;
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	90 93 7f 01 	sts	0x017F, r25
    2f90:	80 93 7e 01 	sts	0x017E, r24
	ADMUX = (ADMUX & 0xE0) | channelNum; /* channel number that I want to read from */
    2f94:	a7 e2       	ldi	r26, 0x27	; 39
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e7 e2       	ldi	r30, 0x27	; 39
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	98 2f       	mov	r25, r24
    2fa0:	90 7e       	andi	r25, 0xE0	; 224
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	89 2b       	or	r24, r25
    2fa6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADIE); /* enabling ADC interrupt */
    2fa8:	a6 e2       	ldi	r26, 0x26	; 38
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e6 e2       	ldi	r30, 0x26	; 38
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	88 60       	ori	r24, 0x08	; 8
    2fb4:	8c 93       	st	X, r24
    SET_BIT(SREG , GLOBAL_INTERRUPT_BIT); /* enabling the global interrupt */
    2fb6:	af e5       	ldi	r26, 0x5F	; 95
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	ef e5       	ldi	r30, 0x5F	; 95
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	80 68       	ori	r24, 0x80	; 128
    2fc2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADSC); /* ADC start conversion */
    2fc4:	a6 e2       	ldi	r26, 0x26	; 38
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e6 e2       	ldi	r30, 0x26	; 38
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	80 64       	ori	r24, 0x40	; 64
    2fd0:	8c 93       	st	X, r24
	return E_OK;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
}
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <ADC_DeInit>:

/* Deinitialize the ADC module */
Std_ReturnType ADC_DeInit(void) {
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
	/* Disable the ADC */
	CLEAR_BIT(ADCSRA, ADEN);
    2fe8:	a6 e2       	ldi	r26, 0x26	; 38
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	e6 e2       	ldi	r30, 0x26	; 38
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8f 77       	andi	r24, 0x7F	; 127
    2ff4:	8c 93       	st	X, r24
	
	/* Disable the ADC interrupt */
	CLEAR_BIT(ADCSRA, ADIE);
    2ff6:	a6 e2       	ldi	r26, 0x26	; 38
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	e6 e2       	ldi	r30, 0x26	; 38
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	87 7f       	andi	r24, 0xF7	; 247
    3002:	8c 93       	st	X, r24
	
	/* Clear reference and prescaler settings */
	ADMUX = 0x00;
    3004:	e7 e2       	ldi	r30, 0x27	; 39
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	10 82       	st	Z, r1
	ADCSRA &= 0xF8;
    300a:	a6 e2       	ldi	r26, 0x26	; 38
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e6 e2       	ldi	r30, 0x26	; 38
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	88 7f       	andi	r24, 0xF8	; 248
    3016:	8c 93       	st	X, r24
	return E_OK;
    3018:	81 e0       	ldi	r24, 0x01	; 1
}
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <LED_Init>:
#define LED_C_

#include "LED.h"

/*Initialization of all LEDs in the kit used*/
void LED_Init(uint8 Led_Color) {
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <LED_Init+0x6>
    3026:	0f 92       	push	r0
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	3b 83       	std	Y+3, r19	; 0x03
    3036:	2a 83       	std	Y+2, r18	; 0x02
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	9b 81       	ldd	r25, Y+3	; 0x03
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	91 05       	cpc	r25, r1
    3040:	01 f1       	breq	.+64     	; 0x3082 <LED_Init+0x62>
    3042:	2a 81       	ldd	r18, Y+2	; 0x02
    3044:	3b 81       	ldd	r19, Y+3	; 0x03
    3046:	22 30       	cpi	r18, 0x02	; 2
    3048:	31 05       	cpc	r19, r1
    304a:	2c f4       	brge	.+10     	; 0x3056 <LED_Init+0x36>
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	9b 81       	ldd	r25, Y+3	; 0x03
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	61 f0       	breq	.+24     	; 0x306c <LED_Init+0x4c>
    3054:	36 c0       	rjmp	.+108    	; 0x30c2 <LED_Init+0xa2>
    3056:	2a 81       	ldd	r18, Y+2	; 0x02
    3058:	3b 81       	ldd	r19, Y+3	; 0x03
    305a:	22 30       	cpi	r18, 0x02	; 2
    305c:	31 05       	cpc	r19, r1
    305e:	e1 f0       	breq	.+56     	; 0x3098 <LED_Init+0x78>
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	9b 81       	ldd	r25, Y+3	; 0x03
    3064:	83 30       	cpi	r24, 0x03	; 3
    3066:	91 05       	cpc	r25, r1
    3068:	11 f1       	breq	.+68     	; 0x30ae <LED_Init+0x8e>
    306a:	2b c0       	rjmp	.+86     	; 0x30c2 <LED_Init+0xa2>
	case LED_BLUE:
		DIO_setupPinDirection(LED_BLUE_PORT, LED_BLUE_PIN, PIN_OUTPUT);
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	65 e0       	ldi	r22, 0x05	; 5
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	65 e0       	ldi	r22, 0x05	; 5
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3080:	20 c0       	rjmp	.+64     	; 0x30c2 <LED_Init+0xa2>
		break;

	case LED_RED:
		DIO_setupPinDirection(LED_RED_PORT, LED_RED_PIN, PIN_OUTPUT);
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	67 e0       	ldi	r22, 0x07	; 7
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	67 e0       	ldi	r22, 0x07	; 7
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3096:	15 c0       	rjmp	.+42     	; 0x30c2 <LED_Init+0xa2>
		break;

	case LED_YELLOW:
			DIO_setupPinDirection(LED_YELLOW_PORT, LED_YELLOW_PIN, PIN_OUTPUT);
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	66 e0       	ldi	r22, 0x06	; 6
    309c:	41 e0       	ldi	r20, 0x01	; 1
    309e:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
			DIO_writePin(LED_YELLOW_PORT,  LED_YELLOW_PIN, LOGIC_LOW);
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	66 e0       	ldi	r22, 0x06	; 6
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    30ac:	0a c0       	rjmp	.+20     	; 0x30c2 <LED_Init+0xa2>
		break;

	case LED_GREEN:
				DIO_setupPinDirection(LED_GREEN_PORT,  LED_GREEN_PIN, PIN_OUTPUT);
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	64 e0       	ldi	r22, 0x04	; 4
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
				DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	64 e0       	ldi	r22, 0x04	; 4
    30bc:	40 e0       	ldi	r20, 0x00	; 0
    30be:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
		break;
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	08 95       	ret

000030ce <LED_Init_All>:

/*Group Intialization*/
void LED_Init_All(){
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
	LED_Init(LED_BLUE);
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	0e 94 10 18 	call	0x3020	; 0x3020 <LED_Init>
	LED_Init(LED_RED);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	0e 94 10 18 	call	0x3020	; 0x3020 <LED_Init>
	LED_Init(LED_YELLOW);
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	0e 94 10 18 	call	0x3020	; 0x3020 <LED_Init>
	LED_Init(LED_GREEN);
    30e8:	83 e0       	ldi	r24, 0x03	; 3
    30ea:	0e 94 10 18 	call	0x3020	; 0x3020 <LED_Init>
}
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <LED_on>:
/*Setting the LED being passed to the function*/
void LED_on(uint8 Led_Color){
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	00 d0       	rcall	.+0      	; 0x30fa <LED_on+0x6>
    30fa:	0f 92       	push	r0
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	3b 83       	std	Y+3, r19	; 0x03
    310a:	2a 83       	std	Y+2, r18	; 0x02
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	81 30       	cpi	r24, 0x01	; 1
    3112:	91 05       	cpc	r25, r1
    3114:	d9 f0       	breq	.+54     	; 0x314c <LED_on+0x58>
    3116:	2a 81       	ldd	r18, Y+2	; 0x02
    3118:	3b 81       	ldd	r19, Y+3	; 0x03
    311a:	22 30       	cpi	r18, 0x02	; 2
    311c:	31 05       	cpc	r19, r1
    311e:	2c f4       	brge	.+10     	; 0x312a <LED_on+0x36>
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	9b 81       	ldd	r25, Y+3	; 0x03
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	61 f0       	breq	.+24     	; 0x3140 <LED_on+0x4c>
    3128:	22 c0       	rjmp	.+68     	; 0x316e <LED_on+0x7a>
    312a:	2a 81       	ldd	r18, Y+2	; 0x02
    312c:	3b 81       	ldd	r19, Y+3	; 0x03
    312e:	22 30       	cpi	r18, 0x02	; 2
    3130:	31 05       	cpc	r19, r1
    3132:	91 f0       	breq	.+36     	; 0x3158 <LED_on+0x64>
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	9b 81       	ldd	r25, Y+3	; 0x03
    3138:	83 30       	cpi	r24, 0x03	; 3
    313a:	91 05       	cpc	r25, r1
    313c:	99 f0       	breq	.+38     	; 0x3164 <LED_on+0x70>
    313e:	17 c0       	rjmp	.+46     	; 0x316e <LED_on+0x7a>
	case LED_BLUE:
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_HIGH);
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	65 e0       	ldi	r22, 0x05	; 5
    3144:	41 e0       	ldi	r20, 0x01	; 1
    3146:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    314a:	11 c0       	rjmp	.+34     	; 0x316e <LED_on+0x7a>
		break;

	case LED_RED:
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_HIGH);
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	67 e0       	ldi	r22, 0x07	; 7
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3156:	0b c0       	rjmp	.+22     	; 0x316e <LED_on+0x7a>
		break;

	case LED_YELLOW:
		DIO_writePin(LED_YELLOW_PORT,  LED_YELLOW_PIN, LOGIC_HIGH);
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	66 e0       	ldi	r22, 0x06	; 6
    315c:	41 e0       	ldi	r20, 0x01	; 1
    315e:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3162:	05 c0       	rjmp	.+10     	; 0x316e <LED_on+0x7a>
		break;

	case LED_GREEN:
		DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_HIGH);
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	64 e0       	ldi	r22, 0x04	; 4
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret

0000317a <LED_Off>:
void LED_Off(uint8 Led_Color){
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	00 d0       	rcall	.+0      	; 0x3180 <LED_Off+0x6>
    3180:	0f 92       	push	r0
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	28 2f       	mov	r18, r24
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	3b 83       	std	Y+3, r19	; 0x03
    3190:	2a 83       	std	Y+2, r18	; 0x02
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	9b 81       	ldd	r25, Y+3	; 0x03
    3196:	81 30       	cpi	r24, 0x01	; 1
    3198:	91 05       	cpc	r25, r1
    319a:	d9 f0       	breq	.+54     	; 0x31d2 <LED_Off+0x58>
    319c:	2a 81       	ldd	r18, Y+2	; 0x02
    319e:	3b 81       	ldd	r19, Y+3	; 0x03
    31a0:	22 30       	cpi	r18, 0x02	; 2
    31a2:	31 05       	cpc	r19, r1
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <LED_Off+0x36>
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	9b 81       	ldd	r25, Y+3	; 0x03
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	61 f0       	breq	.+24     	; 0x31c6 <LED_Off+0x4c>
    31ae:	22 c0       	rjmp	.+68     	; 0x31f4 <LED_Off+0x7a>
    31b0:	2a 81       	ldd	r18, Y+2	; 0x02
    31b2:	3b 81       	ldd	r19, Y+3	; 0x03
    31b4:	22 30       	cpi	r18, 0x02	; 2
    31b6:	31 05       	cpc	r19, r1
    31b8:	91 f0       	breq	.+36     	; 0x31de <LED_Off+0x64>
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	9b 81       	ldd	r25, Y+3	; 0x03
    31be:	83 30       	cpi	r24, 0x03	; 3
    31c0:	91 05       	cpc	r25, r1
    31c2:	99 f0       	breq	.+38     	; 0x31ea <LED_Off+0x70>
    31c4:	17 c0       	rjmp	.+46     	; 0x31f4 <LED_Off+0x7a>
	case LED_BLUE:
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	65 e0       	ldi	r22, 0x05	; 5
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    31d0:	11 c0       	rjmp	.+34     	; 0x31f4 <LED_Off+0x7a>
		break;

	case LED_RED:
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	67 e0       	ldi	r22, 0x07	; 7
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    31dc:	0b c0       	rjmp	.+22     	; 0x31f4 <LED_Off+0x7a>
		break;

	case LED_YELLOW:
		DIO_writePin(LED_YELLOW_PORT, LED_YELLOW_PIN, LOGIC_LOW);
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	66 e0       	ldi	r22, 0x06	; 6
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    31e8:	05 c0       	rjmp	.+10     	; 0x31f4 <LED_Off+0x7a>
		break;

	case LED_GREEN:
		DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	64 e0       	ldi	r22, 0x04	; 4
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <LED_Toggle>:


void LED_Toggle(uint8 Led_Color){
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	00 d0       	rcall	.+0      	; 0x3206 <LED_Toggle+0x6>
    3206:	0f 92       	push	r0
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	3b 83       	std	Y+3, r19	; 0x03
    3216:	2a 83       	std	Y+2, r18	; 0x02
    3218:	8a 81       	ldd	r24, Y+2	; 0x02
    321a:	9b 81       	ldd	r25, Y+3	; 0x03
    321c:	81 30       	cpi	r24, 0x01	; 1
    321e:	91 05       	cpc	r25, r1
    3220:	d1 f0       	breq	.+52     	; 0x3256 <LED_Toggle+0x56>
    3222:	2a 81       	ldd	r18, Y+2	; 0x02
    3224:	3b 81       	ldd	r19, Y+3	; 0x03
    3226:	22 30       	cpi	r18, 0x02	; 2
    3228:	31 05       	cpc	r19, r1
    322a:	2c f4       	brge	.+10     	; 0x3236 <LED_Toggle+0x36>
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	9b 81       	ldd	r25, Y+3	; 0x03
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	61 f0       	breq	.+24     	; 0x324c <LED_Toggle+0x4c>
    3234:	1e c0       	rjmp	.+60     	; 0x3272 <LED_Toggle+0x72>
    3236:	2a 81       	ldd	r18, Y+2	; 0x02
    3238:	3b 81       	ldd	r19, Y+3	; 0x03
    323a:	22 30       	cpi	r18, 0x02	; 2
    323c:	31 05       	cpc	r19, r1
    323e:	81 f0       	breq	.+32     	; 0x3260 <LED_Toggle+0x60>
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	9b 81       	ldd	r25, Y+3	; 0x03
    3244:	83 30       	cpi	r24, 0x03	; 3
    3246:	91 05       	cpc	r25, r1
    3248:	81 f0       	breq	.+32     	; 0x326a <LED_Toggle+0x6a>
    324a:	13 c0       	rjmp	.+38     	; 0x3272 <LED_Toggle+0x72>
	case LED_BLUE:
		DIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	65 e0       	ldi	r22, 0x05	; 5
    3250:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <DIO_TogglePin>
    3254:	0e c0       	rjmp	.+28     	; 0x3272 <LED_Toggle+0x72>
		break;

	case LED_RED:
		DIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	67 e0       	ldi	r22, 0x07	; 7
    325a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <DIO_TogglePin>
    325e:	09 c0       	rjmp	.+18     	; 0x3272 <LED_Toggle+0x72>
		break;

	case LED_YELLOW:
		DIO_TogglePin(LED_YELLOW_PORT, LED_YELLOW_PIN);
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	66 e0       	ldi	r22, 0x06	; 6
    3264:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <DIO_TogglePin>
    3268:	04 c0       	rjmp	.+8      	; 0x3272 <LED_Toggle+0x72>
		break;

	case LED_GREEN:
		DIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	64 e0       	ldi	r22, 0x04	; 4
    326e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <DIO_TogglePin>
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <LED_Check>:
uint8 LED_Check(uint8 Led_Color){
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <LED_Check+0x6>
    3284:	00 d0       	rcall	.+0      	; 0x3286 <LED_Check+0x8>
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 result=0;
    328c:	19 82       	std	Y+1, r1	; 0x01
	switch (Led_Color) {
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	3c 83       	std	Y+4, r19	; 0x04
    3296:	2b 83       	std	Y+3, r18	; 0x03
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	81 30       	cpi	r24, 0x01	; 1
    329e:	91 05       	cpc	r25, r1
    32a0:	d9 f0       	breq	.+54     	; 0x32d8 <LED_Check+0x5a>
    32a2:	2b 81       	ldd	r18, Y+3	; 0x03
    32a4:	3c 81       	ldd	r19, Y+4	; 0x04
    32a6:	22 30       	cpi	r18, 0x02	; 2
    32a8:	31 05       	cpc	r19, r1
    32aa:	2c f4       	brge	.+10     	; 0x32b6 <LED_Check+0x38>
    32ac:	8b 81       	ldd	r24, Y+3	; 0x03
    32ae:	9c 81       	ldd	r25, Y+4	; 0x04
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	61 f0       	breq	.+24     	; 0x32cc <LED_Check+0x4e>
    32b4:	22 c0       	rjmp	.+68     	; 0x32fa <LED_Check+0x7c>
    32b6:	2b 81       	ldd	r18, Y+3	; 0x03
    32b8:	3c 81       	ldd	r19, Y+4	; 0x04
    32ba:	22 30       	cpi	r18, 0x02	; 2
    32bc:	31 05       	cpc	r19, r1
    32be:	91 f0       	breq	.+36     	; 0x32e4 <LED_Check+0x66>
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	9c 81       	ldd	r25, Y+4	; 0x04
    32c4:	83 30       	cpi	r24, 0x03	; 3
    32c6:	91 05       	cpc	r25, r1
    32c8:	99 f0       	breq	.+38     	; 0x32f0 <LED_Check+0x72>
    32ca:	17 c0       	rjmp	.+46     	; 0x32fa <LED_Check+0x7c>
	case LED_BLUE:
		result=DIO_readPin(LED_BLUE_PORT, LED_BLUE_PIN);
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	65 e0       	ldi	r22, 0x05	; 5
    32d0:	0e 94 20 15 	call	0x2a40	; 0x2a40 <DIO_readPin>
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	11 c0       	rjmp	.+34     	; 0x32fa <LED_Check+0x7c>
		break;

	case LED_RED:
		result=DIO_readPin(LED_RED_PORT, LED_RED_PIN);
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	67 e0       	ldi	r22, 0x07	; 7
    32dc:	0e 94 20 15 	call	0x2a40	; 0x2a40 <DIO_readPin>
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	0b c0       	rjmp	.+22     	; 0x32fa <LED_Check+0x7c>
		break;

	case LED_YELLOW:
		result=DIO_readPin(LED_YELLOW_PORT, LED_YELLOW_PIN);
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	66 e0       	ldi	r22, 0x06	; 6
    32e8:	0e 94 20 15 	call	0x2a40	; 0x2a40 <DIO_readPin>
    32ec:	89 83       	std	Y+1, r24	; 0x01
    32ee:	05 c0       	rjmp	.+10     	; 0x32fa <LED_Check+0x7c>
		break;

	case LED_GREEN:
		result=DIO_readPin(LED_GREEN_PORT, LED_GREEN_PIN);
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	64 e0       	ldi	r22, 0x04	; 4
    32f4:	0e 94 20 15 	call	0x2a40	; 0x2a40 <DIO_readPin>
    32f8:	89 83       	std	Y+1, r24	; 0x01
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
	return result;
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <LED_All_Off>:

void LED_All_Off(){
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	65 e0       	ldi	r22, 0x05	; 5
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	67 e0       	ldi	r22, 0x07	; 7
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LED_YELLOW_PORT, LED_YELLOW_PIN, LOGIC_LOW);
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	66 e0       	ldi	r22, 0x06	; 6
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	64 e0       	ldi	r22, 0x04	; 4
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>

}
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <LDR_vidLDRInit>:
 Description     : Initialize LDR
 Input Arguments : void
 Return          : void
 ============================================================*/
void LDR_vidLDRInit(void)
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
	/* Set the pin to which LDR is connected as input */
	DIO_setupPinDirection(LDR_PORT,LDR_PIN,PIN_INPUT);
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	40 e0       	ldi	r20, 0x00	; 0
    334e:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>

	/* Initialize ADC */
	ADC_Init(&Config);
    3352:	80 e7       	ldi	r24, 0x70	; 112
    3354:	91 e0       	ldi	r25, 0x01	; 1
    3356:	0e 94 14 17 	call	0x2e28	; 0x2e28 <ADC_Init>
}
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <LDR_u16GetLDRReadingSync>:
		     by LDR Sensor synchronously
 Input Arguments : Copy_u8LDRChannelNum
 Return          : u16
=============================================================*/
uint16 LDR_u16GetLDRReadingSync(uint8 Copy_u8LDRChannelNum)
{	
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	00 d0       	rcall	.+0      	; 0x3366 <LDR_u16GetLDRReadingSync+0x6>
    3366:	00 d0       	rcall	.+0      	; 0x3368 <LDR_u16GetLDRReadingSync+0x8>
    3368:	0f 92       	push	r0
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	8d 83       	std	Y+5, r24	; 0x05
	/* Define Some Local Variables */
	uint16	Local_u16LDRReading_mv;       /* Holds LDR Analog Reading in milli-volts */
	uint16	Local_pu16ADCDigitalReading; /* Holds Address of ADC Digital Reading Equivalent to Analog Reading Sensed by LDR */
	/* Get ADC Digital Reading Equivalent to Analog Reading Sensed by LDR */
	ADC_readChannel_polling(Copy_u8LDRChannelNum,&Local_pu16ADCDigitalReading);
    3370:	9e 01       	movw	r18, r28
    3372:	2d 5f       	subi	r18, 0xFD	; 253
    3374:	3f 4f       	sbci	r19, 0xFF	; 255
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	b9 01       	movw	r22, r18
    337a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <ADC_readChannel_polling>
	
	/* Get Analog Reading Sensed by LDR */
	Local_u16LDRReading_mv = ((uint32)(Local_pu16ADCDigitalReading) * VREF_MV)/TWO_POWER_RESOLUTION;
    337e:	8b 81       	ldd	r24, Y+3	; 0x03
    3380:	9c 81       	ldd	r25, Y+4	; 0x04
    3382:	cc 01       	movw	r24, r24
    3384:	a0 e0       	ldi	r26, 0x00	; 0
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	28 e8       	ldi	r18, 0x88	; 136
    338a:	33 e1       	ldi	r19, 0x13	; 19
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 5d 29 	call	0x52ba	; 0x52ba <__mulsi3>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	07 2e       	mov	r0, r23
    339e:	7a e0       	ldi	r23, 0x0A	; 10
    33a0:	b6 95       	lsr	r27
    33a2:	a7 95       	ror	r26
    33a4:	97 95       	ror	r25
    33a6:	87 95       	ror	r24
    33a8:	7a 95       	dec	r23
    33aa:	d1 f7       	brne	.-12     	; 0x33a0 <LDR_u16GetLDRReadingSync+0x40>
    33ac:	70 2d       	mov	r23, r0
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u16LDRReading_mv;
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <LCD_init>:
/*
  Initialize the LCD:
  1. Setup the LCD pins directions by use the DIO driver.
  2. Setup the LCD Data Mode 4 bits OR 8 bits.
 */
void LCD_init(void){
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	6c 97       	sbiw	r28, 0x1c	; 28
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
	/*4Bit Mode*/
	DIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	62 e0       	ldi	r22, 0x02	; 2
    33de:	41 e0       	ldi	r20, 0x01	; 1
    33e0:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	63 e0       	ldi	r22, 0x03	; 3
    33e8:	41 e0       	ldi	r20, 0x01	; 1
    33ea:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	a0 ea       	ldi	r26, 0xA0	; 160
    33f4:	b1 e4       	ldi	r27, 0x41	; 65
    33f6:	89 8f       	std	Y+25, r24	; 0x19
    33f8:	9a 8f       	std	Y+26, r25	; 0x1a
    33fa:	ab 8f       	std	Y+27, r26	; 0x1b
    33fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a e7       	ldi	r20, 0x7A	; 122
    340c:	55 e4       	ldi	r21, 0x45	; 69
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	8d 8b       	std	Y+21, r24	; 0x15
    3418:	9e 8b       	std	Y+22, r25	; 0x16
    341a:	af 8b       	std	Y+23, r26	; 0x17
    341c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    341e:	6d 89       	ldd	r22, Y+21	; 0x15
    3420:	7e 89       	ldd	r23, Y+22	; 0x16
    3422:	8f 89       	ldd	r24, Y+23	; 0x17
    3424:	98 8d       	ldd	r25, Y+24	; 0x18
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e8       	ldi	r20, 0x80	; 128
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3432:	88 23       	and	r24, r24
    3434:	2c f4       	brge	.+10     	; 0x3440 <LCD_init+0x7a>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9c 8b       	std	Y+20, r25	; 0x14
    343c:	8b 8b       	std	Y+19, r24	; 0x13
    343e:	3f c0       	rjmp	.+126    	; 0x34be <LCD_init+0xf8>
	else if (__tmp > 65535)
    3440:	6d 89       	ldd	r22, Y+21	; 0x15
    3442:	7e 89       	ldd	r23, Y+22	; 0x16
    3444:	8f 89       	ldd	r24, Y+23	; 0x17
    3446:	98 8d       	ldd	r25, Y+24	; 0x18
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	3f ef       	ldi	r19, 0xFF	; 255
    344c:	4f e7       	ldi	r20, 0x7F	; 127
    344e:	57 e4       	ldi	r21, 0x47	; 71
    3450:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3454:	18 16       	cp	r1, r24
    3456:	4c f5       	brge	.+82     	; 0x34aa <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3458:	69 8d       	ldd	r22, Y+25	; 0x19
    345a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    345c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    345e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e2       	ldi	r20, 0x20	; 32
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9c 8b       	std	Y+20, r25	; 0x14
    347e:	8b 8b       	std	Y+19, r24	; 0x13
    3480:	0f c0       	rjmp	.+30     	; 0x34a0 <LCD_init+0xda>
    3482:	80 e9       	ldi	r24, 0x90	; 144
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	9a 8b       	std	Y+18, r25	; 0x12
    3488:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    348a:	89 89       	ldd	r24, Y+17	; 0x11
    348c:	9a 89       	ldd	r25, Y+18	; 0x12
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	f1 f7       	brne	.-4      	; 0x348e <LCD_init+0xc8>
    3492:	9a 8b       	std	Y+18, r25	; 0x12
    3494:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3496:	8b 89       	ldd	r24, Y+19	; 0x13
    3498:	9c 89       	ldd	r25, Y+20	; 0x14
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	9c 8b       	std	Y+20, r25	; 0x14
    349e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a0:	8b 89       	ldd	r24, Y+19	; 0x13
    34a2:	9c 89       	ldd	r25, Y+20	; 0x14
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	69 f7       	brne	.-38     	; 0x3482 <LCD_init+0xbc>
    34a8:	14 c0       	rjmp	.+40     	; 0x34d2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34aa:	6d 89       	ldd	r22, Y+21	; 0x15
    34ac:	7e 89       	ldd	r23, Y+22	; 0x16
    34ae:	8f 89       	ldd	r24, Y+23	; 0x17
    34b0:	98 8d       	ldd	r25, Y+24	; 0x18
    34b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	9c 8b       	std	Y+20, r25	; 0x14
    34bc:	8b 8b       	std	Y+19, r24	; 0x13
    34be:	8b 89       	ldd	r24, Y+19	; 0x13
    34c0:	9c 89       	ldd	r25, Y+20	; 0x14
    34c2:	98 8b       	std	Y+16, r25	; 0x10
    34c4:	8f 87       	std	Y+15, r24	; 0x0f
    34c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c8:	98 89       	ldd	r25, Y+16	; 0x10
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <LCD_init+0x104>
    34ce:	98 8b       	std	Y+16, r25	; 0x10
    34d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	
	#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	62 e0       	ldi	r22, 0x02	; 2
    34ea:	41 e0       	ldi	r20, 0x01	; 1
    34ec:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	64 e0       	ldi	r22, 0x04	; 4
    34f4:	41 e0       	ldi	r20, 0x01	; 1
    34f6:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    34fa:	83 e3       	ldi	r24, 0x33	; 51
    34fc:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3500:	82 e3       	ldi	r24, 0x32	; 50
    3502:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    3506:	88 e2       	ldi	r24, 0x28	; 40
    3508:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3512:	8c e0       	ldi	r24, 0x0C	; 12
    3514:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	a0 e2       	ldi	r26, 0x20	; 32
    351e:	b1 e4       	ldi	r27, 0x41	; 65
    3520:	8b 87       	std	Y+11, r24	; 0x0b
    3522:	9c 87       	std	Y+12, r25	; 0x0c
    3524:	ad 87       	std	Y+13, r26	; 0x0d
    3526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3528:	6b 85       	ldd	r22, Y+11	; 0x0b
    352a:	7c 85       	ldd	r23, Y+12	; 0x0c
    352c:	8d 85       	ldd	r24, Y+13	; 0x0d
    352e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	4a e7       	ldi	r20, 0x7A	; 122
    3536:	55 e4       	ldi	r21, 0x45	; 69
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8f 83       	std	Y+7, r24	; 0x07
    3542:	98 87       	std	Y+8, r25	; 0x08
    3544:	a9 87       	std	Y+9, r26	; 0x09
    3546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3548:	6f 81       	ldd	r22, Y+7	; 0x07
    354a:	78 85       	ldd	r23, Y+8	; 0x08
    354c:	89 85       	ldd	r24, Y+9	; 0x09
    354e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	2c f4       	brge	.+10     	; 0x356a <LCD_init+0x1a4>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	3f c0       	rjmp	.+126    	; 0x35e8 <LCD_init+0x222>
	else if (__tmp > 65535)
    356a:	6f 81       	ldd	r22, Y+7	; 0x07
    356c:	78 85       	ldd	r23, Y+8	; 0x08
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	9a 85       	ldd	r25, Y+10	; 0x0a
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    357e:	18 16       	cp	r1, r24
    3580:	4c f5       	brge	.+82     	; 0x35d4 <LCD_init+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3582:	6b 85       	ldd	r22, Y+11	; 0x0b
    3584:	7c 85       	ldd	r23, Y+12	; 0x0c
    3586:	8d 85       	ldd	r24, Y+13	; 0x0d
    3588:	9e 85       	ldd	r25, Y+14	; 0x0e
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <LCD_init+0x204>
    35ac:	80 e9       	ldi	r24, 0x90	; 144
    35ae:	91 e0       	ldi	r25, 0x01	; 1
    35b0:	9c 83       	std	Y+4, r25	; 0x04
    35b2:	8b 83       	std	Y+3, r24	; 0x03
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	9c 81       	ldd	r25, Y+4	; 0x04
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <LCD_init+0x1f2>
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	9e 81       	ldd	r25, Y+6	; 0x06
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	69 f7       	brne	.-38     	; 0x35ac <LCD_init+0x1e6>
    35d2:	14 c0       	rjmp	.+40     	; 0x35fc <LCD_init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	6f 81       	ldd	r22, Y+7	; 0x07
    35d6:	78 85       	ldd	r23, Y+8	; 0x08
    35d8:	89 85       	ldd	r24, Y+9	; 0x09
    35da:	9a 85       	ldd	r25, Y+10	; 0x0a
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
    35e8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ea:	9e 81       	ldd	r25, Y+6	; 0x06
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	9a 81       	ldd	r25, Y+2	; 0x02
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <LCD_init+0x22e>
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

	#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    35fc:	8c e0       	ldi	r24, 0x0C	; 12
    35fe:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
}
    3608:	6c 96       	adiw	r28, 0x1c	; 28
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	08 95       	ret

0000361a <LCD_sendCommand>:

/*
Send the required command to the screen
*/
void LCD_sendCommand(uint8 command){
    361a:	0f 93       	push	r16
    361c:	1f 93       	push	r17
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	c3 56       	subi	r28, 0x63	; 99
    3628:	d0 40       	sbci	r29, 0x00	; 0
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	fe 01       	movw	r30, r28
    3636:	ed 59       	subi	r30, 0x9D	; 157
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);  	/*select command mode 0*/
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	63 e0       	ldi	r22, 0x03	; 3
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3646:	fe 01       	movw	r30, r28
    3648:	e1 5a       	subi	r30, 0xA1	; 161
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	a0 e8       	ldi	r26, 0x80	; 128
    3652:	bf e3       	ldi	r27, 0x3F	; 63
    3654:	80 83       	st	Z, r24
    3656:	91 83       	std	Z+1, r25	; 0x01
    3658:	a2 83       	std	Z+2, r26	; 0x02
    365a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365c:	8e 01       	movw	r16, r28
    365e:	05 5a       	subi	r16, 0xA5	; 165
    3660:	1f 4f       	sbci	r17, 0xFF	; 255
    3662:	fe 01       	movw	r30, r28
    3664:	e1 5a       	subi	r30, 0xA1	; 161
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	60 81       	ld	r22, Z
    366a:	71 81       	ldd	r23, Z+1	; 0x01
    366c:	82 81       	ldd	r24, Z+2	; 0x02
    366e:	93 81       	ldd	r25, Z+3	; 0x03
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	4a e7       	ldi	r20, 0x7A	; 122
    3676:	55 e4       	ldi	r21, 0x45	; 69
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	f8 01       	movw	r30, r16
    3682:	80 83       	st	Z, r24
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	a2 83       	std	Z+2, r26	; 0x02
    3688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    368a:	fe 01       	movw	r30, r28
    368c:	e5 5a       	subi	r30, 0xA5	; 165
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e8       	ldi	r20, 0x80	; 128
    369e:	5f e3       	ldi	r21, 0x3F	; 63
    36a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36a4:	88 23       	and	r24, r24
    36a6:	44 f4       	brge	.+16     	; 0x36b8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    36a8:	fe 01       	movw	r30, r28
    36aa:	e7 5a       	subi	r30, 0xA7	; 167
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	80 83       	st	Z, r24
    36b6:	64 c0       	rjmp	.+200    	; 0x3780 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    36b8:	fe 01       	movw	r30, r28
    36ba:	e5 5a       	subi	r30, 0xA5	; 165
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	60 81       	ld	r22, Z
    36c0:	71 81       	ldd	r23, Z+1	; 0x01
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	3f ef       	ldi	r19, 0xFF	; 255
    36ca:	4f e7       	ldi	r20, 0x7F	; 127
    36cc:	57 e4       	ldi	r21, 0x47	; 71
    36ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36d2:	18 16       	cp	r1, r24
    36d4:	0c f0       	brlt	.+2      	; 0x36d8 <LCD_sendCommand+0xbe>
    36d6:	43 c0       	rjmp	.+134    	; 0x375e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d8:	fe 01       	movw	r30, r28
    36da:	e1 5a       	subi	r30, 0xA1	; 161
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e2       	ldi	r20, 0x20	; 32
    36ec:	51 e4       	ldi	r21, 0x41	; 65
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	8e 01       	movw	r16, r28
    36f8:	07 5a       	subi	r16, 0xA7	; 167
    36fa:	1f 4f       	sbci	r17, 0xFF	; 255
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	f8 01       	movw	r30, r16
    370a:	91 83       	std	Z+1, r25	; 0x01
    370c:	80 83       	st	Z, r24
    370e:	1f c0       	rjmp	.+62     	; 0x374e <LCD_sendCommand+0x134>
    3710:	fe 01       	movw	r30, r28
    3712:	e9 5a       	subi	r30, 0xA9	; 169
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 e9       	ldi	r24, 0x90	; 144
    3718:	91 e0       	ldi	r25, 0x01	; 1
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	80 83       	st	Z, r24
    371e:	fe 01       	movw	r30, r28
    3720:	e9 5a       	subi	r30, 0xA9	; 169
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <LCD_sendCommand+0x10e>
    372c:	fe 01       	movw	r30, r28
    372e:	e9 5a       	subi	r30, 0xA9	; 169
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3736:	de 01       	movw	r26, r28
    3738:	a7 5a       	subi	r26, 0xA7	; 167
    373a:	bf 4f       	sbci	r27, 0xFF	; 255
    373c:	fe 01       	movw	r30, r28
    373e:	e7 5a       	subi	r30, 0xA7	; 167
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	11 96       	adiw	r26, 0x01	; 1
    374a:	9c 93       	st	X, r25
    374c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374e:	fe 01       	movw	r30, r28
    3750:	e7 5a       	subi	r30, 0xA7	; 167
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	d1 f6       	brne	.-76     	; 0x3710 <LCD_sendCommand+0xf6>
    375c:	27 c0       	rjmp	.+78     	; 0x37ac <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375e:	8e 01       	movw	r16, r28
    3760:	07 5a       	subi	r16, 0xA7	; 167
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	fe 01       	movw	r30, r28
    3766:	e5 5a       	subi	r30, 0xA5	; 165
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	f8 01       	movw	r30, r16
    377c:	91 83       	std	Z+1, r25	; 0x01
    377e:	80 83       	st	Z, r24
    3780:	de 01       	movw	r26, r28
    3782:	ab 5a       	subi	r26, 0xAB	; 171
    3784:	bf 4f       	sbci	r27, 0xFF	; 255
    3786:	fe 01       	movw	r30, r28
    3788:	e7 5a       	subi	r30, 0xA7	; 167
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	8d 93       	st	X+, r24
    3792:	9c 93       	st	X, r25
    3794:	fe 01       	movw	r30, r28
    3796:	eb 5a       	subi	r30, 0xAB	; 171
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	80 81       	ld	r24, Z
    379c:	91 81       	ldd	r25, Z+1	; 0x01
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	f1 f7       	brne	.-4      	; 0x379e <LCD_sendCommand+0x184>
    37a2:	fe 01       	movw	r30, r28
    37a4:	eb 5a       	subi	r30, 0xAB	; 171
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* Enable LCD E=1 */
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	62 e0       	ldi	r22, 0x02	; 2
    37b0:	41 e0       	ldi	r20, 0x01	; 1
    37b2:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    37b6:	fe 01       	movw	r30, r28
    37b8:	ef 5a       	subi	r30, 0xAF	; 175
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	a0 e8       	ldi	r26, 0x80	; 128
    37c2:	bf e3       	ldi	r27, 0x3F	; 63
    37c4:	80 83       	st	Z, r24
    37c6:	91 83       	std	Z+1, r25	; 0x01
    37c8:	a2 83       	std	Z+2, r26	; 0x02
    37ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37cc:	8e 01       	movw	r16, r28
    37ce:	03 5b       	subi	r16, 0xB3	; 179
    37d0:	1f 4f       	sbci	r17, 0xFF	; 255
    37d2:	fe 01       	movw	r30, r28
    37d4:	ef 5a       	subi	r30, 0xAF	; 175
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	4a e7       	ldi	r20, 0x7A	; 122
    37e6:	55 e4       	ldi	r21, 0x45	; 69
    37e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	f8 01       	movw	r30, r16
    37f2:	80 83       	st	Z, r24
    37f4:	91 83       	std	Z+1, r25	; 0x01
    37f6:	a2 83       	std	Z+2, r26	; 0x02
    37f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37fa:	fe 01       	movw	r30, r28
    37fc:	e3 5b       	subi	r30, 0xB3	; 179
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	60 81       	ld	r22, Z
    3802:	71 81       	ldd	r23, Z+1	; 0x01
    3804:	82 81       	ldd	r24, Z+2	; 0x02
    3806:	93 81       	ldd	r25, Z+3	; 0x03
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	40 e8       	ldi	r20, 0x80	; 128
    380e:	5f e3       	ldi	r21, 0x3F	; 63
    3810:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3814:	88 23       	and	r24, r24
    3816:	44 f4       	brge	.+16     	; 0x3828 <LCD_sendCommand+0x20e>
		__ticks = 1;
    3818:	fe 01       	movw	r30, r28
    381a:	e5 5b       	subi	r30, 0xB5	; 181
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    3826:	64 c0       	rjmp	.+200    	; 0x38f0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3828:	fe 01       	movw	r30, r28
    382a:	e3 5b       	subi	r30, 0xB3	; 179
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	93 81       	ldd	r25, Z+3	; 0x03
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	3f ef       	ldi	r19, 0xFF	; 255
    383a:	4f e7       	ldi	r20, 0x7F	; 127
    383c:	57 e4       	ldi	r21, 0x47	; 71
    383e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3842:	18 16       	cp	r1, r24
    3844:	0c f0       	brlt	.+2      	; 0x3848 <LCD_sendCommand+0x22e>
    3846:	43 c0       	rjmp	.+134    	; 0x38ce <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3848:	fe 01       	movw	r30, r28
    384a:	ef 5a       	subi	r30, 0xAF	; 175
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e2       	ldi	r20, 0x20	; 32
    385c:	51 e4       	ldi	r21, 0x41	; 65
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	8e 01       	movw	r16, r28
    3868:	05 5b       	subi	r16, 0xB5	; 181
    386a:	1f 4f       	sbci	r17, 0xFF	; 255
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	f8 01       	movw	r30, r16
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	80 83       	st	Z, r24
    387e:	1f c0       	rjmp	.+62     	; 0x38be <LCD_sendCommand+0x2a4>
    3880:	fe 01       	movw	r30, r28
    3882:	e7 5b       	subi	r30, 0xB7	; 183
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 e9       	ldi	r24, 0x90	; 144
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	80 83       	st	Z, r24
    388e:	fe 01       	movw	r30, r28
    3890:	e7 5b       	subi	r30, 0xB7	; 183
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	80 81       	ld	r24, Z
    3896:	91 81       	ldd	r25, Z+1	; 0x01
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	f1 f7       	brne	.-4      	; 0x3898 <LCD_sendCommand+0x27e>
    389c:	fe 01       	movw	r30, r28
    389e:	e7 5b       	subi	r30, 0xB7	; 183
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a6:	de 01       	movw	r26, r28
    38a8:	a5 5b       	subi	r26, 0xB5	; 181
    38aa:	bf 4f       	sbci	r27, 0xFF	; 255
    38ac:	fe 01       	movw	r30, r28
    38ae:	e5 5b       	subi	r30, 0xB5	; 181
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	11 96       	adiw	r26, 0x01	; 1
    38ba:	9c 93       	st	X, r25
    38bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38be:	fe 01       	movw	r30, r28
    38c0:	e5 5b       	subi	r30, 0xB5	; 181
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	80 81       	ld	r24, Z
    38c6:	91 81       	ldd	r25, Z+1	; 0x01
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	d1 f6       	brne	.-76     	; 0x3880 <LCD_sendCommand+0x266>
    38cc:	27 c0       	rjmp	.+78     	; 0x391c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ce:	8e 01       	movw	r16, r28
    38d0:	05 5b       	subi	r16, 0xB5	; 181
    38d2:	1f 4f       	sbci	r17, 0xFF	; 255
    38d4:	fe 01       	movw	r30, r28
    38d6:	e3 5b       	subi	r30, 0xB3	; 179
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	60 81       	ld	r22, Z
    38dc:	71 81       	ldd	r23, Z+1	; 0x01
    38de:	82 81       	ldd	r24, Z+2	; 0x02
    38e0:	93 81       	ldd	r25, Z+3	; 0x03
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	f8 01       	movw	r30, r16
    38ec:	91 83       	std	Z+1, r25	; 0x01
    38ee:	80 83       	st	Z, r24
    38f0:	de 01       	movw	r26, r28
    38f2:	a9 5b       	subi	r26, 0xB9	; 185
    38f4:	bf 4f       	sbci	r27, 0xFF	; 255
    38f6:	fe 01       	movw	r30, r28
    38f8:	e5 5b       	subi	r30, 0xB5	; 181
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	80 81       	ld	r24, Z
    38fe:	91 81       	ldd	r25, Z+1	; 0x01
    3900:	8d 93       	st	X+, r24
    3902:	9c 93       	st	X, r25
    3904:	fe 01       	movw	r30, r28
    3906:	e9 5b       	subi	r30, 0xB9	; 185
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	80 81       	ld	r24, Z
    390c:	91 81       	ldd	r25, Z+1	; 0x01
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <LCD_sendCommand+0x2f4>
    3912:	fe 01       	movw	r30, r28
    3914:	e9 5b       	subi	r30, 0xB9	; 185
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	80 83       	st	Z, r24
	_delay_ms(1);
	#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    391c:	fe 01       	movw	r30, r28
    391e:	ed 59       	subi	r30, 0x9D	; 157
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	80 81       	ld	r24, Z
    3924:	88 2f       	mov	r24, r24
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	80 71       	andi	r24, 0x10	; 16
    392a:	90 70       	andi	r25, 0x00	; 0
    392c:	95 95       	asr	r25
    392e:	87 95       	ror	r24
    3930:	95 95       	asr	r25
    3932:	87 95       	ror	r24
    3934:	95 95       	asr	r25
    3936:	87 95       	ror	r24
    3938:	95 95       	asr	r25
    393a:	87 95       	ror	r24
    393c:	98 2f       	mov	r25, r24
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	49 2f       	mov	r20, r25
    3944:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    3948:	fe 01       	movw	r30, r28
    394a:	ed 59       	subi	r30, 0x9D	; 157
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 81       	ld	r24, Z
    3950:	88 2f       	mov	r24, r24
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	80 72       	andi	r24, 0x20	; 32
    3956:	90 70       	andi	r25, 0x00	; 0
    3958:	95 95       	asr	r25
    395a:	87 95       	ror	r24
    395c:	95 95       	asr	r25
    395e:	87 95       	ror	r24
    3960:	95 95       	asr	r25
    3962:	87 95       	ror	r24
    3964:	95 95       	asr	r25
    3966:	87 95       	ror	r24
    3968:	95 95       	asr	r25
    396a:	87 95       	ror	r24
    396c:	98 2f       	mov	r25, r24
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	61 e0       	ldi	r22, 0x01	; 1
    3972:	49 2f       	mov	r20, r25
    3974:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    3978:	fe 01       	movw	r30, r28
    397a:	ed 59       	subi	r30, 0x9D	; 157
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	88 2f       	mov	r24, r24
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	80 74       	andi	r24, 0x40	; 64
    3986:	90 70       	andi	r25, 0x00	; 0
    3988:	08 2e       	mov	r0, r24
    398a:	89 2f       	mov	r24, r25
    398c:	00 0c       	add	r0, r0
    398e:	88 1f       	adc	r24, r24
    3990:	99 0b       	sbc	r25, r25
    3992:	00 0c       	add	r0, r0
    3994:	88 1f       	adc	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	98 2f       	mov	r25, r24
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	62 e0       	ldi	r22, 0x02	; 2
    399e:	49 2f       	mov	r20, r25
    39a0:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    39a4:	fe 01       	movw	r30, r28
    39a6:	ed 59       	subi	r30, 0x9D	; 157
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 81       	ld	r24, Z
    39ac:	98 2f       	mov	r25, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	99 27       	eor	r25, r25
    39b2:	99 1f       	adc	r25, r25
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	64 e0       	ldi	r22, 0x04	; 4
    39b8:	49 2f       	mov	r20, r25
    39ba:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    39be:	fe 01       	movw	r30, r28
    39c0:	ed 5b       	subi	r30, 0xBD	; 189
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a0 e8       	ldi	r26, 0x80	; 128
    39ca:	bf e3       	ldi	r27, 0x3F	; 63
    39cc:	80 83       	st	Z, r24
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	a2 83       	std	Z+2, r26	; 0x02
    39d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	8e 01       	movw	r16, r28
    39d6:	01 5c       	subi	r16, 0xC1	; 193
    39d8:	1f 4f       	sbci	r17, 0xFF	; 255
    39da:	fe 01       	movw	r30, r28
    39dc:	ed 5b       	subi	r30, 0xBD	; 189
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	4a e7       	ldi	r20, 0x7A	; 122
    39ee:	55 e4       	ldi	r21, 0x45	; 69
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	f8 01       	movw	r30, r16
    39fa:	80 83       	st	Z, r24
    39fc:	91 83       	std	Z+1, r25	; 0x01
    39fe:	a2 83       	std	Z+2, r26	; 0x02
    3a00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a02:	fe 01       	movw	r30, r28
    3a04:	ff 96       	adiw	r30, 0x3f	; 63
    3a06:	60 81       	ld	r22, Z
    3a08:	71 81       	ldd	r23, Z+1	; 0x01
    3a0a:	82 81       	ldd	r24, Z+2	; 0x02
    3a0c:	93 81       	ldd	r25, Z+3	; 0x03
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	40 e8       	ldi	r20, 0x80	; 128
    3a14:	5f e3       	ldi	r21, 0x3F	; 63
    3a16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a1a:	88 23       	and	r24, r24
    3a1c:	2c f4       	brge	.+10     	; 0x3a28 <LCD_sendCommand+0x40e>
		__ticks = 1;
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	9e af       	std	Y+62, r25	; 0x3e
    3a24:	8d af       	std	Y+61, r24	; 0x3d
    3a26:	46 c0       	rjmp	.+140    	; 0x3ab4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3a28:	fe 01       	movw	r30, r28
    3a2a:	ff 96       	adiw	r30, 0x3f	; 63
    3a2c:	60 81       	ld	r22, Z
    3a2e:	71 81       	ldd	r23, Z+1	; 0x01
    3a30:	82 81       	ldd	r24, Z+2	; 0x02
    3a32:	93 81       	ldd	r25, Z+3	; 0x03
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	4f e7       	ldi	r20, 0x7F	; 127
    3a3a:	57 e4       	ldi	r21, 0x47	; 71
    3a3c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	64 f5       	brge	.+88     	; 0x3a9c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a44:	fe 01       	movw	r30, r28
    3a46:	ed 5b       	subi	r30, 0xBD	; 189
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	60 81       	ld	r22, Z
    3a4c:	71 81       	ldd	r23, Z+1	; 0x01
    3a4e:	82 81       	ldd	r24, Z+2	; 0x02
    3a50:	93 81       	ldd	r25, Z+3	; 0x03
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e2       	ldi	r20, 0x20	; 32
    3a58:	51 e4       	ldi	r21, 0x41	; 65
    3a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9e af       	std	Y+62, r25	; 0x3e
    3a70:	8d af       	std	Y+61, r24	; 0x3d
    3a72:	0f c0       	rjmp	.+30     	; 0x3a92 <LCD_sendCommand+0x478>
    3a74:	80 e9       	ldi	r24, 0x90	; 144
    3a76:	91 e0       	ldi	r25, 0x01	; 1
    3a78:	9c af       	std	Y+60, r25	; 0x3c
    3a7a:	8b af       	std	Y+59, r24	; 0x3b
    3a7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a7e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <LCD_sendCommand+0x466>
    3a84:	9c af       	std	Y+60, r25	; 0x3c
    3a86:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a88:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	9e af       	std	Y+62, r25	; 0x3e
    3a90:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a92:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a94:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	69 f7       	brne	.-38     	; 0x3a74 <LCD_sendCommand+0x45a>
    3a9a:	16 c0       	rjmp	.+44     	; 0x3ac8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	ff 96       	adiw	r30, 0x3f	; 63
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9e af       	std	Y+62, r25	; 0x3e
    3ab2:	8d af       	std	Y+61, r24	; 0x3d
    3ab4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ab6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ab8:	9a af       	std	Y+58, r25	; 0x3a
    3aba:	89 af       	std	Y+57, r24	; 0x39
    3abc:	89 ad       	ldd	r24, Y+57	; 0x39
    3abe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <LCD_sendCommand+0x4a6>
    3ac4:	9a af       	std	Y+58, r25	; 0x3a
    3ac6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	62 e0       	ldi	r22, 0x02	; 2
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	a0 e8       	ldi	r26, 0x80	; 128
    3ad8:	bf e3       	ldi	r27, 0x3F	; 63
    3ada:	8d ab       	std	Y+53, r24	; 0x35
    3adc:	9e ab       	std	Y+54, r25	; 0x36
    3ade:	af ab       	std	Y+55, r26	; 0x37
    3ae0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	4a e7       	ldi	r20, 0x7A	; 122
    3af0:	55 e4       	ldi	r21, 0x45	; 69
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	89 ab       	std	Y+49, r24	; 0x31
    3afc:	9a ab       	std	Y+50, r25	; 0x32
    3afe:	ab ab       	std	Y+51, r26	; 0x33
    3b00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b02:	69 a9       	ldd	r22, Y+49	; 0x31
    3b04:	7a a9       	ldd	r23, Y+50	; 0x32
    3b06:	8b a9       	ldd	r24, Y+51	; 0x33
    3b08:	9c a9       	ldd	r25, Y+52	; 0x34
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e8       	ldi	r20, 0x80	; 128
    3b10:	5f e3       	ldi	r21, 0x3F	; 63
    3b12:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b16:	88 23       	and	r24, r24
    3b18:	2c f4       	brge	.+10     	; 0x3b24 <LCD_sendCommand+0x50a>
		__ticks = 1;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	98 ab       	std	Y+48, r25	; 0x30
    3b20:	8f a7       	std	Y+47, r24	; 0x2f
    3b22:	3f c0       	rjmp	.+126    	; 0x3ba2 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3b24:	69 a9       	ldd	r22, Y+49	; 0x31
    3b26:	7a a9       	ldd	r23, Y+50	; 0x32
    3b28:	8b a9       	ldd	r24, Y+51	; 0x33
    3b2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	3f ef       	ldi	r19, 0xFF	; 255
    3b30:	4f e7       	ldi	r20, 0x7F	; 127
    3b32:	57 e4       	ldi	r21, 0x47	; 71
    3b34:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b38:	18 16       	cp	r1, r24
    3b3a:	4c f5       	brge	.+82     	; 0x3b8e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3c:	6d a9       	ldd	r22, Y+53	; 0x35
    3b3e:	7e a9       	ldd	r23, Y+54	; 0x36
    3b40:	8f a9       	ldd	r24, Y+55	; 0x37
    3b42:	98 ad       	ldd	r25, Y+56	; 0x38
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e2       	ldi	r20, 0x20	; 32
    3b4a:	51 e4       	ldi	r21, 0x41	; 65
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	98 ab       	std	Y+48, r25	; 0x30
    3b62:	8f a7       	std	Y+47, r24	; 0x2f
    3b64:	0f c0       	rjmp	.+30     	; 0x3b84 <LCD_sendCommand+0x56a>
    3b66:	80 e9       	ldi	r24, 0x90	; 144
    3b68:	91 e0       	ldi	r25, 0x01	; 1
    3b6a:	9e a7       	std	Y+46, r25	; 0x2e
    3b6c:	8d a7       	std	Y+45, r24	; 0x2d
    3b6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b70:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <LCD_sendCommand+0x558>
    3b76:	9e a7       	std	Y+46, r25	; 0x2e
    3b78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b7c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	98 ab       	std	Y+48, r25	; 0x30
    3b82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b84:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b86:	98 a9       	ldd	r25, Y+48	; 0x30
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	69 f7       	brne	.-38     	; 0x3b66 <LCD_sendCommand+0x54c>
    3b8c:	14 c0       	rjmp	.+40     	; 0x3bb6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8e:	69 a9       	ldd	r22, Y+49	; 0x31
    3b90:	7a a9       	ldd	r23, Y+50	; 0x32
    3b92:	8b a9       	ldd	r24, Y+51	; 0x33
    3b94:	9c a9       	ldd	r25, Y+52	; 0x34
    3b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	98 ab       	std	Y+48, r25	; 0x30
    3ba0:	8f a7       	std	Y+47, r24	; 0x2f
    3ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ba6:	9c a7       	std	Y+44, r25	; 0x2c
    3ba8:	8b a7       	std	Y+43, r24	; 0x2b
    3baa:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bac:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <LCD_sendCommand+0x594>
    3bb2:	9c a7       	std	Y+44, r25	; 0x2c
    3bb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	62 e0       	ldi	r22, 0x02	; 2
    3bba:	41 e0       	ldi	r20, 0x01	; 1
    3bbc:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	a0 e8       	ldi	r26, 0x80	; 128
    3bc6:	bf e3       	ldi	r27, 0x3F	; 63
    3bc8:	8f a3       	std	Y+39, r24	; 0x27
    3bca:	98 a7       	std	Y+40, r25	; 0x28
    3bcc:	a9 a7       	std	Y+41, r26	; 0x29
    3bce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    3bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    3bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	4a e7       	ldi	r20, 0x7A	; 122
    3bde:	55 e4       	ldi	r21, 0x45	; 69
    3be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	8b a3       	std	Y+35, r24	; 0x23
    3bea:	9c a3       	std	Y+36, r25	; 0x24
    3bec:	ad a3       	std	Y+37, r26	; 0x25
    3bee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    3bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    3bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    3bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	40 e8       	ldi	r20, 0x80	; 128
    3bfe:	5f e3       	ldi	r21, 0x3F	; 63
    3c00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c04:	88 23       	and	r24, r24
    3c06:	2c f4       	brge	.+10     	; 0x3c12 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	9a a3       	std	Y+34, r25	; 0x22
    3c0e:	89 a3       	std	Y+33, r24	; 0x21
    3c10:	3f c0       	rjmp	.+126    	; 0x3c90 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3c12:	6b a1       	ldd	r22, Y+35	; 0x23
    3c14:	7c a1       	ldd	r23, Y+36	; 0x24
    3c16:	8d a1       	ldd	r24, Y+37	; 0x25
    3c18:	9e a1       	ldd	r25, Y+38	; 0x26
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	3f ef       	ldi	r19, 0xFF	; 255
    3c1e:	4f e7       	ldi	r20, 0x7F	; 127
    3c20:	57 e4       	ldi	r21, 0x47	; 71
    3c22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c26:	18 16       	cp	r1, r24
    3c28:	4c f5       	brge	.+82     	; 0x3c7c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e2       	ldi	r20, 0x20	; 32
    3c38:	51 e4       	ldi	r21, 0x41	; 65
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	9a a3       	std	Y+34, r25	; 0x22
    3c50:	89 a3       	std	Y+33, r24	; 0x21
    3c52:	0f c0       	rjmp	.+30     	; 0x3c72 <LCD_sendCommand+0x658>
    3c54:	80 e9       	ldi	r24, 0x90	; 144
    3c56:	91 e0       	ldi	r25, 0x01	; 1
    3c58:	98 a3       	std	Y+32, r25	; 0x20
    3c5a:	8f 8f       	std	Y+31, r24	; 0x1f
    3c5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c5e:	98 a1       	ldd	r25, Y+32	; 0x20
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	f1 f7       	brne	.-4      	; 0x3c60 <LCD_sendCommand+0x646>
    3c64:	98 a3       	std	Y+32, r25	; 0x20
    3c66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c68:	89 a1       	ldd	r24, Y+33	; 0x21
    3c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	9a a3       	std	Y+34, r25	; 0x22
    3c70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c72:	89 a1       	ldd	r24, Y+33	; 0x21
    3c74:	9a a1       	ldd	r25, Y+34	; 0x22
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	69 f7       	brne	.-38     	; 0x3c54 <LCD_sendCommand+0x63a>
    3c7a:	14 c0       	rjmp	.+40     	; 0x3ca4 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7c:	6b a1       	ldd	r22, Y+35	; 0x23
    3c7e:	7c a1       	ldd	r23, Y+36	; 0x24
    3c80:	8d a1       	ldd	r24, Y+37	; 0x25
    3c82:	9e a1       	ldd	r25, Y+38	; 0x26
    3c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	9a a3       	std	Y+34, r25	; 0x22
    3c8e:	89 a3       	std	Y+33, r24	; 0x21
    3c90:	89 a1       	ldd	r24, Y+33	; 0x21
    3c92:	9a a1       	ldd	r25, Y+34	; 0x22
    3c94:	9e 8f       	std	Y+30, r25	; 0x1e
    3c96:	8d 8f       	std	Y+29, r24	; 0x1d
    3c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <LCD_sendCommand+0x682>
    3ca0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ca2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	ed 59       	subi	r30, 0x9D	; 157
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	80 81       	ld	r24, Z
    3cac:	98 2f       	mov	r25, r24
    3cae:	91 70       	andi	r25, 0x01	; 1
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	49 2f       	mov	r20, r25
    3cb6:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    3cba:	fe 01       	movw	r30, r28
    3cbc:	ed 59       	subi	r30, 0x9D	; 157
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	80 81       	ld	r24, Z
    3cc2:	88 2f       	mov	r24, r24
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	82 70       	andi	r24, 0x02	; 2
    3cc8:	90 70       	andi	r25, 0x00	; 0
    3cca:	95 95       	asr	r25
    3ccc:	87 95       	ror	r24
    3cce:	98 2f       	mov	r25, r24
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	61 e0       	ldi	r22, 0x01	; 1
    3cd4:	49 2f       	mov	r20, r25
    3cd6:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    3cda:	fe 01       	movw	r30, r28
    3cdc:	ed 59       	subi	r30, 0x9D	; 157
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 81       	ld	r24, Z
    3ce2:	88 2f       	mov	r24, r24
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	84 70       	andi	r24, 0x04	; 4
    3ce8:	90 70       	andi	r25, 0x00	; 0
    3cea:	95 95       	asr	r25
    3cec:	87 95       	ror	r24
    3cee:	95 95       	asr	r25
    3cf0:	87 95       	ror	r24
    3cf2:	98 2f       	mov	r25, r24
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	62 e0       	ldi	r22, 0x02	; 2
    3cf8:	49 2f       	mov	r20, r25
    3cfa:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ed 59       	subi	r30, 0x9D	; 157
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	80 81       	ld	r24, Z
    3d06:	88 2f       	mov	r24, r24
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	88 70       	andi	r24, 0x08	; 8
    3d0c:	90 70       	andi	r25, 0x00	; 0
    3d0e:	95 95       	asr	r25
    3d10:	87 95       	ror	r24
    3d12:	95 95       	asr	r25
    3d14:	87 95       	ror	r24
    3d16:	95 95       	asr	r25
    3d18:	87 95       	ror	r24
    3d1a:	98 2f       	mov	r25, r24
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	64 e0       	ldi	r22, 0x04	; 4
    3d20:	49 2f       	mov	r20, r25
    3d22:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a0 e8       	ldi	r26, 0x80	; 128
    3d2c:	bf e3       	ldi	r27, 0x3F	; 63
    3d2e:	89 8f       	std	Y+25, r24	; 0x19
    3d30:	9a 8f       	std	Y+26, r25	; 0x1a
    3d32:	ab 8f       	std	Y+27, r26	; 0x1b
    3d34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d36:	69 8d       	ldd	r22, Y+25	; 0x19
    3d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	4a e7       	ldi	r20, 0x7A	; 122
    3d44:	55 e4       	ldi	r21, 0x45	; 69
    3d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	8d 8b       	std	Y+21, r24	; 0x15
    3d50:	9e 8b       	std	Y+22, r25	; 0x16
    3d52:	af 8b       	std	Y+23, r26	; 0x17
    3d54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d56:	6d 89       	ldd	r22, Y+21	; 0x15
    3d58:	7e 89       	ldd	r23, Y+22	; 0x16
    3d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	5f e3       	ldi	r21, 0x3F	; 63
    3d66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	2c f4       	brge	.+10     	; 0x3d78 <LCD_sendCommand+0x75e>
		__ticks = 1;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9c 8b       	std	Y+20, r25	; 0x14
    3d74:	8b 8b       	std	Y+19, r24	; 0x13
    3d76:	3f c0       	rjmp	.+126    	; 0x3df6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3d78:	6d 89       	ldd	r22, Y+21	; 0x15
    3d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	4f e7       	ldi	r20, 0x7F	; 127
    3d86:	57 e4       	ldi	r21, 0x47	; 71
    3d88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	4c f5       	brge	.+82     	; 0x3de2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	69 8d       	ldd	r22, Y+25	; 0x19
    3d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e2       	ldi	r20, 0x20	; 32
    3d9e:	51 e4       	ldi	r21, 0x41	; 65
    3da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	9c 8b       	std	Y+20, r25	; 0x14
    3db6:	8b 8b       	std	Y+19, r24	; 0x13
    3db8:	0f c0       	rjmp	.+30     	; 0x3dd8 <LCD_sendCommand+0x7be>
    3dba:	80 e9       	ldi	r24, 0x90	; 144
    3dbc:	91 e0       	ldi	r25, 0x01	; 1
    3dbe:	9a 8b       	std	Y+18, r25	; 0x12
    3dc0:	89 8b       	std	Y+17, r24	; 0x11
    3dc2:	89 89       	ldd	r24, Y+17	; 0x11
    3dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <LCD_sendCommand+0x7ac>
    3dca:	9a 8b       	std	Y+18, r25	; 0x12
    3dcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	9c 8b       	std	Y+20, r25	; 0x14
    3dd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    3dda:	9c 89       	ldd	r25, Y+20	; 0x14
    3ddc:	00 97       	sbiw	r24, 0x00	; 0
    3dde:	69 f7       	brne	.-38     	; 0x3dba <LCD_sendCommand+0x7a0>
    3de0:	14 c0       	rjmp	.+40     	; 0x3e0a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de2:	6d 89       	ldd	r22, Y+21	; 0x15
    3de4:	7e 89       	ldd	r23, Y+22	; 0x16
    3de6:	8f 89       	ldd	r24, Y+23	; 0x17
    3de8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	9c 8b       	std	Y+20, r25	; 0x14
    3df4:	8b 8b       	std	Y+19, r24	; 0x13
    3df6:	8b 89       	ldd	r24, Y+19	; 0x13
    3df8:	9c 89       	ldd	r25, Y+20	; 0x14
    3dfa:	98 8b       	std	Y+16, r25	; 0x10
    3dfc:	8f 87       	std	Y+15, r24	; 0x0f
    3dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e00:	98 89       	ldd	r25, Y+16	; 0x10
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <LCD_sendCommand+0x7e8>
    3e06:	98 8b       	std	Y+16, r25	; 0x10
    3e08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	62 e0       	ldi	r22, 0x02	; 2
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	a0 e8       	ldi	r26, 0x80	; 128
    3e1a:	bf e3       	ldi	r27, 0x3F	; 63
    3e1c:	8b 87       	std	Y+11, r24	; 0x0b
    3e1e:	9c 87       	std	Y+12, r25	; 0x0c
    3e20:	ad 87       	std	Y+13, r26	; 0x0d
    3e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	4a e7       	ldi	r20, 0x7A	; 122
    3e32:	55 e4       	ldi	r21, 0x45	; 69
    3e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	8f 83       	std	Y+7, r24	; 0x07
    3e3e:	98 87       	std	Y+8, r25	; 0x08
    3e40:	a9 87       	std	Y+9, r26	; 0x09
    3e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e44:	6f 81       	ldd	r22, Y+7	; 0x07
    3e46:	78 85       	ldd	r23, Y+8	; 0x08
    3e48:	89 85       	ldd	r24, Y+9	; 0x09
    3e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e8       	ldi	r20, 0x80	; 128
    3e52:	5f e3       	ldi	r21, 0x3F	; 63
    3e54:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e58:	88 23       	and	r24, r24
    3e5a:	2c f4       	brge	.+10     	; 0x3e66 <LCD_sendCommand+0x84c>
		__ticks = 1;
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	9e 83       	std	Y+6, r25	; 0x06
    3e62:	8d 83       	std	Y+5, r24	; 0x05
    3e64:	3f c0       	rjmp	.+126    	; 0x3ee4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3e66:	6f 81       	ldd	r22, Y+7	; 0x07
    3e68:	78 85       	ldd	r23, Y+8	; 0x08
    3e6a:	89 85       	ldd	r24, Y+9	; 0x09
    3e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	3f ef       	ldi	r19, 0xFF	; 255
    3e72:	4f e7       	ldi	r20, 0x7F	; 127
    3e74:	57 e4       	ldi	r21, 0x47	; 71
    3e76:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e7a:	18 16       	cp	r1, r24
    3e7c:	4c f5       	brge	.+82     	; 0x3ed0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e2       	ldi	r20, 0x20	; 32
    3e8c:	51 e4       	ldi	r21, 0x41	; 65
    3e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	bc 01       	movw	r22, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	9e 83       	std	Y+6, r25	; 0x06
    3ea4:	8d 83       	std	Y+5, r24	; 0x05
    3ea6:	0f c0       	rjmp	.+30     	; 0x3ec6 <LCD_sendCommand+0x8ac>
    3ea8:	80 e9       	ldi	r24, 0x90	; 144
    3eaa:	91 e0       	ldi	r25, 0x01	; 1
    3eac:	9c 83       	std	Y+4, r25	; 0x04
    3eae:	8b 83       	std	Y+3, r24	; 0x03
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	f1 f7       	brne	.-4      	; 0x3eb4 <LCD_sendCommand+0x89a>
    3eb8:	9c 83       	std	Y+4, r25	; 0x04
    3eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	9e 83       	std	Y+6, r25	; 0x06
    3ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eca:	00 97       	sbiw	r24, 0x00	; 0
    3ecc:	69 f7       	brne	.-38     	; 0x3ea8 <LCD_sendCommand+0x88e>
    3ece:	14 c0       	rjmp	.+40     	; 0x3ef8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed2:	78 85       	ldd	r23, Y+8	; 0x08
    3ed4:	89 85       	ldd	r24, Y+9	; 0x09
    3ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	9e 83       	std	Y+6, r25	; 0x06
    3ee2:	8d 83       	std	Y+5, r24	; 0x05
    3ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee8:	9a 83       	std	Y+2, r25	; 0x02
    3eea:	89 83       	std	Y+1, r24	; 0x01
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	f1 f7       	brne	.-4      	; 0x3ef0 <LCD_sendCommand+0x8d6>
    3ef4:	9a 83       	std	Y+2, r25	; 0x02
    3ef6:	89 83       	std	Y+1, r24	; 0x01
	#elif(LCD_DATA_BITS_MODE == 8)
	DIO_writePort(LCD_DATA_PORT_ID,command);
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	#endif
}
    3ef8:	cd 59       	subi	r28, 0x9D	; 157
    3efa:	df 4f       	sbci	r29, 0xFF	; 255
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	cf 91       	pop	r28
    3f08:	df 91       	pop	r29
    3f0a:	1f 91       	pop	r17
    3f0c:	0f 91       	pop	r16
    3f0e:	08 95       	ret

00003f10 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    3f10:	0f 93       	push	r16
    3f12:	1f 93       	push	r17
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	c3 56       	subi	r28, 0x63	; 99
    3f1e:	d0 40       	sbci	r29, 0x00	; 0
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	ed 59       	subi	r30, 0x9D	; 157
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);  /*Select data mode 1*/
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	63 e0       	ldi	r22, 0x03	; 3
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	e1 5a       	subi	r30, 0xA1	; 161
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	a0 e8       	ldi	r26, 0x80	; 128
    3f48:	bf e3       	ldi	r27, 0x3F	; 63
    3f4a:	80 83       	st	Z, r24
    3f4c:	91 83       	std	Z+1, r25	; 0x01
    3f4e:	a2 83       	std	Z+2, r26	; 0x02
    3f50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f52:	8e 01       	movw	r16, r28
    3f54:	05 5a       	subi	r16, 0xA5	; 165
    3f56:	1f 4f       	sbci	r17, 0xFF	; 255
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e1 5a       	subi	r30, 0xA1	; 161
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	4a e7       	ldi	r20, 0x7A	; 122
    3f6c:	55 e4       	ldi	r21, 0x45	; 69
    3f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	f8 01       	movw	r30, r16
    3f78:	80 83       	st	Z, r24
    3f7a:	91 83       	std	Z+1, r25	; 0x01
    3f7c:	a2 83       	std	Z+2, r26	; 0x02
    3f7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f80:	fe 01       	movw	r30, r28
    3f82:	e5 5a       	subi	r30, 0xA5	; 165
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	60 81       	ld	r22, Z
    3f88:	71 81       	ldd	r23, Z+1	; 0x01
    3f8a:	82 81       	ldd	r24, Z+2	; 0x02
    3f8c:	93 81       	ldd	r25, Z+3	; 0x03
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	40 e8       	ldi	r20, 0x80	; 128
    3f94:	5f e3       	ldi	r21, 0x3F	; 63
    3f96:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f9a:	88 23       	and	r24, r24
    3f9c:	44 f4       	brge	.+16     	; 0x3fae <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e7 5a       	subi	r30, 0xA7	; 167
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	91 83       	std	Z+1, r25	; 0x01
    3faa:	80 83       	st	Z, r24
    3fac:	64 c0       	rjmp	.+200    	; 0x4076 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3fae:	fe 01       	movw	r30, r28
    3fb0:	e5 5a       	subi	r30, 0xA5	; 165
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	60 81       	ld	r22, Z
    3fb6:	71 81       	ldd	r23, Z+1	; 0x01
    3fb8:	82 81       	ldd	r24, Z+2	; 0x02
    3fba:	93 81       	ldd	r25, Z+3	; 0x03
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	3f ef       	ldi	r19, 0xFF	; 255
    3fc0:	4f e7       	ldi	r20, 0x7F	; 127
    3fc2:	57 e4       	ldi	r21, 0x47	; 71
    3fc4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3fc8:	18 16       	cp	r1, r24
    3fca:	0c f0       	brlt	.+2      	; 0x3fce <LCD_displayCharacter+0xbe>
    3fcc:	43 c0       	rjmp	.+134    	; 0x4054 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e1 5a       	subi	r30, 0xA1	; 161
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	60 81       	ld	r22, Z
    3fd6:	71 81       	ldd	r23, Z+1	; 0x01
    3fd8:	82 81       	ldd	r24, Z+2	; 0x02
    3fda:	93 81       	ldd	r25, Z+3	; 0x03
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	40 e2       	ldi	r20, 0x20	; 32
    3fe2:	51 e4       	ldi	r21, 0x41	; 65
    3fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	8e 01       	movw	r16, r28
    3fee:	07 5a       	subi	r16, 0xA7	; 167
    3ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff2:	bc 01       	movw	r22, r24
    3ff4:	cd 01       	movw	r24, r26
    3ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	f8 01       	movw	r30, r16
    4000:	91 83       	std	Z+1, r25	; 0x01
    4002:	80 83       	st	Z, r24
    4004:	1f c0       	rjmp	.+62     	; 0x4044 <LCD_displayCharacter+0x134>
    4006:	fe 01       	movw	r30, r28
    4008:	e9 5a       	subi	r30, 0xA9	; 169
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 e9       	ldi	r24, 0x90	; 144
    400e:	91 e0       	ldi	r25, 0x01	; 1
    4010:	91 83       	std	Z+1, r25	; 0x01
    4012:	80 83       	st	Z, r24
    4014:	fe 01       	movw	r30, r28
    4016:	e9 5a       	subi	r30, 0xA9	; 169
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	f1 f7       	brne	.-4      	; 0x401e <LCD_displayCharacter+0x10e>
    4022:	fe 01       	movw	r30, r28
    4024:	e9 5a       	subi	r30, 0xA9	; 169
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	91 83       	std	Z+1, r25	; 0x01
    402a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    402c:	de 01       	movw	r26, r28
    402e:	a7 5a       	subi	r26, 0xA7	; 167
    4030:	bf 4f       	sbci	r27, 0xFF	; 255
    4032:	fe 01       	movw	r30, r28
    4034:	e7 5a       	subi	r30, 0xA7	; 167
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	80 81       	ld	r24, Z
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	11 96       	adiw	r26, 0x01	; 1
    4040:	9c 93       	st	X, r25
    4042:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4044:	fe 01       	movw	r30, r28
    4046:	e7 5a       	subi	r30, 0xA7	; 167
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 81       	ld	r24, Z
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	00 97       	sbiw	r24, 0x00	; 0
    4050:	d1 f6       	brne	.-76     	; 0x4006 <LCD_displayCharacter+0xf6>
    4052:	27 c0       	rjmp	.+78     	; 0x40a2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4054:	8e 01       	movw	r16, r28
    4056:	07 5a       	subi	r16, 0xA7	; 167
    4058:	1f 4f       	sbci	r17, 0xFF	; 255
    405a:	fe 01       	movw	r30, r28
    405c:	e5 5a       	subi	r30, 0xA5	; 165
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	93 81       	ldd	r25, Z+3	; 0x03
    4068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	f8 01       	movw	r30, r16
    4072:	91 83       	std	Z+1, r25	; 0x01
    4074:	80 83       	st	Z, r24
    4076:	de 01       	movw	r26, r28
    4078:	ab 5a       	subi	r26, 0xAB	; 171
    407a:	bf 4f       	sbci	r27, 0xFF	; 255
    407c:	fe 01       	movw	r30, r28
    407e:	e7 5a       	subi	r30, 0xA7	; 167
    4080:	ff 4f       	sbci	r31, 0xFF	; 255
    4082:	80 81       	ld	r24, Z
    4084:	91 81       	ldd	r25, Z+1	; 0x01
    4086:	8d 93       	st	X+, r24
    4088:	9c 93       	st	X, r25
    408a:	fe 01       	movw	r30, r28
    408c:	eb 5a       	subi	r30, 0xAB	; 171
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	80 81       	ld	r24, Z
    4092:	91 81       	ldd	r25, Z+1	; 0x01
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <LCD_displayCharacter+0x184>
    4098:	fe 01       	movw	r30, r28
    409a:	eb 5a       	subi	r30, 0xAB	; 171
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* Enable LCD E=1 */
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	62 e0       	ldi	r22, 0x02	; 2
    40a6:	41 e0       	ldi	r20, 0x01	; 1
    40a8:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    40ac:	fe 01       	movw	r30, r28
    40ae:	ef 5a       	subi	r30, 0xAF	; 175
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	a0 e8       	ldi	r26, 0x80	; 128
    40b8:	bf e3       	ldi	r27, 0x3F	; 63
    40ba:	80 83       	st	Z, r24
    40bc:	91 83       	std	Z+1, r25	; 0x01
    40be:	a2 83       	std	Z+2, r26	; 0x02
    40c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40c2:	8e 01       	movw	r16, r28
    40c4:	03 5b       	subi	r16, 0xB3	; 179
    40c6:	1f 4f       	sbci	r17, 0xFF	; 255
    40c8:	fe 01       	movw	r30, r28
    40ca:	ef 5a       	subi	r30, 0xAF	; 175
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	60 81       	ld	r22, Z
    40d0:	71 81       	ldd	r23, Z+1	; 0x01
    40d2:	82 81       	ldd	r24, Z+2	; 0x02
    40d4:	93 81       	ldd	r25, Z+3	; 0x03
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	4a e7       	ldi	r20, 0x7A	; 122
    40dc:	55 e4       	ldi	r21, 0x45	; 69
    40de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	f8 01       	movw	r30, r16
    40e8:	80 83       	st	Z, r24
    40ea:	91 83       	std	Z+1, r25	; 0x01
    40ec:	a2 83       	std	Z+2, r26	; 0x02
    40ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40f0:	fe 01       	movw	r30, r28
    40f2:	e3 5b       	subi	r30, 0xB3	; 179
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	60 81       	ld	r22, Z
    40f8:	71 81       	ldd	r23, Z+1	; 0x01
    40fa:	82 81       	ldd	r24, Z+2	; 0x02
    40fc:	93 81       	ldd	r25, Z+3	; 0x03
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e8       	ldi	r20, 0x80	; 128
    4104:	5f e3       	ldi	r21, 0x3F	; 63
    4106:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    410a:	88 23       	and	r24, r24
    410c:	44 f4       	brge	.+16     	; 0x411e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    410e:	fe 01       	movw	r30, r28
    4110:	e5 5b       	subi	r30, 0xB5	; 181
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	80 83       	st	Z, r24
    411c:	64 c0       	rjmp	.+200    	; 0x41e6 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    411e:	fe 01       	movw	r30, r28
    4120:	e3 5b       	subi	r30, 0xB3	; 179
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	93 81       	ldd	r25, Z+3	; 0x03
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	3f ef       	ldi	r19, 0xFF	; 255
    4130:	4f e7       	ldi	r20, 0x7F	; 127
    4132:	57 e4       	ldi	r21, 0x47	; 71
    4134:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4138:	18 16       	cp	r1, r24
    413a:	0c f0       	brlt	.+2      	; 0x413e <LCD_displayCharacter+0x22e>
    413c:	43 c0       	rjmp	.+134    	; 0x41c4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413e:	fe 01       	movw	r30, r28
    4140:	ef 5a       	subi	r30, 0xAF	; 175
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	60 81       	ld	r22, Z
    4146:	71 81       	ldd	r23, Z+1	; 0x01
    4148:	82 81       	ldd	r24, Z+2	; 0x02
    414a:	93 81       	ldd	r25, Z+3	; 0x03
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	40 e2       	ldi	r20, 0x20	; 32
    4152:	51 e4       	ldi	r21, 0x41	; 65
    4154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	8e 01       	movw	r16, r28
    415e:	05 5b       	subi	r16, 0xB5	; 181
    4160:	1f 4f       	sbci	r17, 0xFF	; 255
    4162:	bc 01       	movw	r22, r24
    4164:	cd 01       	movw	r24, r26
    4166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	f8 01       	movw	r30, r16
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	80 83       	st	Z, r24
    4174:	1f c0       	rjmp	.+62     	; 0x41b4 <LCD_displayCharacter+0x2a4>
    4176:	fe 01       	movw	r30, r28
    4178:	e7 5b       	subi	r30, 0xB7	; 183
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	80 e9       	ldi	r24, 0x90	; 144
    417e:	91 e0       	ldi	r25, 0x01	; 1
    4180:	91 83       	std	Z+1, r25	; 0x01
    4182:	80 83       	st	Z, r24
    4184:	fe 01       	movw	r30, r28
    4186:	e7 5b       	subi	r30, 0xB7	; 183
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	91 81       	ldd	r25, Z+1	; 0x01
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	f1 f7       	brne	.-4      	; 0x418e <LCD_displayCharacter+0x27e>
    4192:	fe 01       	movw	r30, r28
    4194:	e7 5b       	subi	r30, 0xB7	; 183
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	91 83       	std	Z+1, r25	; 0x01
    419a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    419c:	de 01       	movw	r26, r28
    419e:	a5 5b       	subi	r26, 0xB5	; 181
    41a0:	bf 4f       	sbci	r27, 0xFF	; 255
    41a2:	fe 01       	movw	r30, r28
    41a4:	e5 5b       	subi	r30, 0xB5	; 181
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 81       	ld	r24, Z
    41aa:	91 81       	ldd	r25, Z+1	; 0x01
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	11 96       	adiw	r26, 0x01	; 1
    41b0:	9c 93       	st	X, r25
    41b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b4:	fe 01       	movw	r30, r28
    41b6:	e5 5b       	subi	r30, 0xB5	; 181
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	80 81       	ld	r24, Z
    41bc:	91 81       	ldd	r25, Z+1	; 0x01
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	d1 f6       	brne	.-76     	; 0x4176 <LCD_displayCharacter+0x266>
    41c2:	27 c0       	rjmp	.+78     	; 0x4212 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c4:	8e 01       	movw	r16, r28
    41c6:	05 5b       	subi	r16, 0xB5	; 181
    41c8:	1f 4f       	sbci	r17, 0xFF	; 255
    41ca:	fe 01       	movw	r30, r28
    41cc:	e3 5b       	subi	r30, 0xB3	; 179
    41ce:	ff 4f       	sbci	r31, 0xFF	; 255
    41d0:	60 81       	ld	r22, Z
    41d2:	71 81       	ldd	r23, Z+1	; 0x01
    41d4:	82 81       	ldd	r24, Z+2	; 0x02
    41d6:	93 81       	ldd	r25, Z+3	; 0x03
    41d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	f8 01       	movw	r30, r16
    41e2:	91 83       	std	Z+1, r25	; 0x01
    41e4:	80 83       	st	Z, r24
    41e6:	de 01       	movw	r26, r28
    41e8:	a9 5b       	subi	r26, 0xB9	; 185
    41ea:	bf 4f       	sbci	r27, 0xFF	; 255
    41ec:	fe 01       	movw	r30, r28
    41ee:	e5 5b       	subi	r30, 0xB5	; 181
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	80 81       	ld	r24, Z
    41f4:	91 81       	ldd	r25, Z+1	; 0x01
    41f6:	8d 93       	st	X+, r24
    41f8:	9c 93       	st	X, r25
    41fa:	fe 01       	movw	r30, r28
    41fc:	e9 5b       	subi	r30, 0xB9	; 185
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	80 81       	ld	r24, Z
    4202:	91 81       	ldd	r25, Z+1	; 0x01
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <LCD_displayCharacter+0x2f4>
    4208:	fe 01       	movw	r30, r28
    420a:	e9 5b       	subi	r30, 0xB9	; 185
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	91 83       	std	Z+1, r25	; 0x01
    4210:	80 83       	st	Z, r24
	_delay_ms(1);

	#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    4212:	fe 01       	movw	r30, r28
    4214:	ed 59       	subi	r30, 0x9D	; 157
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	80 81       	ld	r24, Z
    421a:	88 2f       	mov	r24, r24
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	80 71       	andi	r24, 0x10	; 16
    4220:	90 70       	andi	r25, 0x00	; 0
    4222:	95 95       	asr	r25
    4224:	87 95       	ror	r24
    4226:	95 95       	asr	r25
    4228:	87 95       	ror	r24
    422a:	95 95       	asr	r25
    422c:	87 95       	ror	r24
    422e:	95 95       	asr	r25
    4230:	87 95       	ror	r24
    4232:	98 2f       	mov	r25, r24
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	49 2f       	mov	r20, r25
    423a:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    423e:	fe 01       	movw	r30, r28
    4240:	ed 59       	subi	r30, 0x9D	; 157
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	80 81       	ld	r24, Z
    4246:	88 2f       	mov	r24, r24
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	80 72       	andi	r24, 0x20	; 32
    424c:	90 70       	andi	r25, 0x00	; 0
    424e:	95 95       	asr	r25
    4250:	87 95       	ror	r24
    4252:	95 95       	asr	r25
    4254:	87 95       	ror	r24
    4256:	95 95       	asr	r25
    4258:	87 95       	ror	r24
    425a:	95 95       	asr	r25
    425c:	87 95       	ror	r24
    425e:	95 95       	asr	r25
    4260:	87 95       	ror	r24
    4262:	98 2f       	mov	r25, r24
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	61 e0       	ldi	r22, 0x01	; 1
    4268:	49 2f       	mov	r20, r25
    426a:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    426e:	fe 01       	movw	r30, r28
    4270:	ed 59       	subi	r30, 0x9D	; 157
    4272:	ff 4f       	sbci	r31, 0xFF	; 255
    4274:	80 81       	ld	r24, Z
    4276:	88 2f       	mov	r24, r24
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	80 74       	andi	r24, 0x40	; 64
    427c:	90 70       	andi	r25, 0x00	; 0
    427e:	08 2e       	mov	r0, r24
    4280:	89 2f       	mov	r24, r25
    4282:	00 0c       	add	r0, r0
    4284:	88 1f       	adc	r24, r24
    4286:	99 0b       	sbc	r25, r25
    4288:	00 0c       	add	r0, r0
    428a:	88 1f       	adc	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	98 2f       	mov	r25, r24
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	62 e0       	ldi	r22, 0x02	; 2
    4294:	49 2f       	mov	r20, r25
    4296:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    429a:	fe 01       	movw	r30, r28
    429c:	ed 59       	subi	r30, 0x9D	; 157
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	80 81       	ld	r24, Z
    42a2:	98 2f       	mov	r25, r24
    42a4:	99 1f       	adc	r25, r25
    42a6:	99 27       	eor	r25, r25
    42a8:	99 1f       	adc	r25, r25
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	64 e0       	ldi	r22, 0x04	; 4
    42ae:	49 2f       	mov	r20, r25
    42b0:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    42b4:	fe 01       	movw	r30, r28
    42b6:	ed 5b       	subi	r30, 0xBD	; 189
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	a0 e8       	ldi	r26, 0x80	; 128
    42c0:	bf e3       	ldi	r27, 0x3F	; 63
    42c2:	80 83       	st	Z, r24
    42c4:	91 83       	std	Z+1, r25	; 0x01
    42c6:	a2 83       	std	Z+2, r26	; 0x02
    42c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ca:	8e 01       	movw	r16, r28
    42cc:	01 5c       	subi	r16, 0xC1	; 193
    42ce:	1f 4f       	sbci	r17, 0xFF	; 255
    42d0:	fe 01       	movw	r30, r28
    42d2:	ed 5b       	subi	r30, 0xBD	; 189
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	60 81       	ld	r22, Z
    42d8:	71 81       	ldd	r23, Z+1	; 0x01
    42da:	82 81       	ldd	r24, Z+2	; 0x02
    42dc:	93 81       	ldd	r25, Z+3	; 0x03
    42de:	20 e0       	ldi	r18, 0x00	; 0
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	4a e7       	ldi	r20, 0x7A	; 122
    42e4:	55 e4       	ldi	r21, 0x45	; 69
    42e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	f8 01       	movw	r30, r16
    42f0:	80 83       	st	Z, r24
    42f2:	91 83       	std	Z+1, r25	; 0x01
    42f4:	a2 83       	std	Z+2, r26	; 0x02
    42f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42f8:	fe 01       	movw	r30, r28
    42fa:	ff 96       	adiw	r30, 0x3f	; 63
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e8       	ldi	r20, 0x80	; 128
    430a:	5f e3       	ldi	r21, 0x3F	; 63
    430c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4310:	88 23       	and	r24, r24
    4312:	2c f4       	brge	.+10     	; 0x431e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	9e af       	std	Y+62, r25	; 0x3e
    431a:	8d af       	std	Y+61, r24	; 0x3d
    431c:	46 c0       	rjmp	.+140    	; 0x43aa <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    431e:	fe 01       	movw	r30, r28
    4320:	ff 96       	adiw	r30, 0x3f	; 63
    4322:	60 81       	ld	r22, Z
    4324:	71 81       	ldd	r23, Z+1	; 0x01
    4326:	82 81       	ldd	r24, Z+2	; 0x02
    4328:	93 81       	ldd	r25, Z+3	; 0x03
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	3f ef       	ldi	r19, 0xFF	; 255
    432e:	4f e7       	ldi	r20, 0x7F	; 127
    4330:	57 e4       	ldi	r21, 0x47	; 71
    4332:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4336:	18 16       	cp	r1, r24
    4338:	64 f5       	brge	.+88     	; 0x4392 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433a:	fe 01       	movw	r30, r28
    433c:	ed 5b       	subi	r30, 0xBD	; 189
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	82 81       	ldd	r24, Z+2	; 0x02
    4346:	93 81       	ldd	r25, Z+3	; 0x03
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	40 e2       	ldi	r20, 0x20	; 32
    434e:	51 e4       	ldi	r21, 0x41	; 65
    4350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	bc 01       	movw	r22, r24
    435a:	cd 01       	movw	r24, r26
    435c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	9e af       	std	Y+62, r25	; 0x3e
    4366:	8d af       	std	Y+61, r24	; 0x3d
    4368:	0f c0       	rjmp	.+30     	; 0x4388 <LCD_displayCharacter+0x478>
    436a:	80 e9       	ldi	r24, 0x90	; 144
    436c:	91 e0       	ldi	r25, 0x01	; 1
    436e:	9c af       	std	Y+60, r25	; 0x3c
    4370:	8b af       	std	Y+59, r24	; 0x3b
    4372:	8b ad       	ldd	r24, Y+59	; 0x3b
    4374:	9c ad       	ldd	r25, Y+60	; 0x3c
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <LCD_displayCharacter+0x466>
    437a:	9c af       	std	Y+60, r25	; 0x3c
    437c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4380:	9e ad       	ldd	r25, Y+62	; 0x3e
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	9e af       	std	Y+62, r25	; 0x3e
    4386:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4388:	8d ad       	ldd	r24, Y+61	; 0x3d
    438a:	9e ad       	ldd	r25, Y+62	; 0x3e
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	69 f7       	brne	.-38     	; 0x436a <LCD_displayCharacter+0x45a>
    4390:	16 c0       	rjmp	.+44     	; 0x43be <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4392:	fe 01       	movw	r30, r28
    4394:	ff 96       	adiw	r30, 0x3f	; 63
    4396:	60 81       	ld	r22, Z
    4398:	71 81       	ldd	r23, Z+1	; 0x01
    439a:	82 81       	ldd	r24, Z+2	; 0x02
    439c:	93 81       	ldd	r25, Z+3	; 0x03
    439e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	9e af       	std	Y+62, r25	; 0x3e
    43a8:	8d af       	std	Y+61, r24	; 0x3d
    43aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    43ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    43ae:	9a af       	std	Y+58, r25	; 0x3a
    43b0:	89 af       	std	Y+57, r24	; 0x39
    43b2:	89 ad       	ldd	r24, Y+57	; 0x39
    43b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	f1 f7       	brne	.-4      	; 0x43b6 <LCD_displayCharacter+0x4a6>
    43ba:	9a af       	std	Y+58, r25	; 0x3a
    43bc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	62 e0       	ldi	r22, 0x02	; 2
    43c2:	40 e0       	ldi	r20, 0x00	; 0
    43c4:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	a0 e8       	ldi	r26, 0x80	; 128
    43ce:	bf e3       	ldi	r27, 0x3F	; 63
    43d0:	8d ab       	std	Y+53, r24	; 0x35
    43d2:	9e ab       	std	Y+54, r25	; 0x36
    43d4:	af ab       	std	Y+55, r26	; 0x37
    43d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d8:	6d a9       	ldd	r22, Y+53	; 0x35
    43da:	7e a9       	ldd	r23, Y+54	; 0x36
    43dc:	8f a9       	ldd	r24, Y+55	; 0x37
    43de:	98 ad       	ldd	r25, Y+56	; 0x38
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	4a e7       	ldi	r20, 0x7A	; 122
    43e6:	55 e4       	ldi	r21, 0x45	; 69
    43e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	89 ab       	std	Y+49, r24	; 0x31
    43f2:	9a ab       	std	Y+50, r25	; 0x32
    43f4:	ab ab       	std	Y+51, r26	; 0x33
    43f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43f8:	69 a9       	ldd	r22, Y+49	; 0x31
    43fa:	7a a9       	ldd	r23, Y+50	; 0x32
    43fc:	8b a9       	ldd	r24, Y+51	; 0x33
    43fe:	9c a9       	ldd	r25, Y+52	; 0x34
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	40 e8       	ldi	r20, 0x80	; 128
    4406:	5f e3       	ldi	r21, 0x3F	; 63
    4408:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    440c:	88 23       	and	r24, r24
    440e:	2c f4       	brge	.+10     	; 0x441a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	98 ab       	std	Y+48, r25	; 0x30
    4416:	8f a7       	std	Y+47, r24	; 0x2f
    4418:	3f c0       	rjmp	.+126    	; 0x4498 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    441a:	69 a9       	ldd	r22, Y+49	; 0x31
    441c:	7a a9       	ldd	r23, Y+50	; 0x32
    441e:	8b a9       	ldd	r24, Y+51	; 0x33
    4420:	9c a9       	ldd	r25, Y+52	; 0x34
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	3f ef       	ldi	r19, 0xFF	; 255
    4426:	4f e7       	ldi	r20, 0x7F	; 127
    4428:	57 e4       	ldi	r21, 0x47	; 71
    442a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    442e:	18 16       	cp	r1, r24
    4430:	4c f5       	brge	.+82     	; 0x4484 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4432:	6d a9       	ldd	r22, Y+53	; 0x35
    4434:	7e a9       	ldd	r23, Y+54	; 0x36
    4436:	8f a9       	ldd	r24, Y+55	; 0x37
    4438:	98 ad       	ldd	r25, Y+56	; 0x38
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	40 e2       	ldi	r20, 0x20	; 32
    4440:	51 e4       	ldi	r21, 0x41	; 65
    4442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	bc 01       	movw	r22, r24
    444c:	cd 01       	movw	r24, r26
    444e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	98 ab       	std	Y+48, r25	; 0x30
    4458:	8f a7       	std	Y+47, r24	; 0x2f
    445a:	0f c0       	rjmp	.+30     	; 0x447a <LCD_displayCharacter+0x56a>
    445c:	80 e9       	ldi	r24, 0x90	; 144
    445e:	91 e0       	ldi	r25, 0x01	; 1
    4460:	9e a7       	std	Y+46, r25	; 0x2e
    4462:	8d a7       	std	Y+45, r24	; 0x2d
    4464:	8d a5       	ldd	r24, Y+45	; 0x2d
    4466:	9e a5       	ldd	r25, Y+46	; 0x2e
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <LCD_displayCharacter+0x558>
    446c:	9e a7       	std	Y+46, r25	; 0x2e
    446e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4470:	8f a5       	ldd	r24, Y+47	; 0x2f
    4472:	98 a9       	ldd	r25, Y+48	; 0x30
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	98 ab       	std	Y+48, r25	; 0x30
    4478:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    447a:	8f a5       	ldd	r24, Y+47	; 0x2f
    447c:	98 a9       	ldd	r25, Y+48	; 0x30
    447e:	00 97       	sbiw	r24, 0x00	; 0
    4480:	69 f7       	brne	.-38     	; 0x445c <LCD_displayCharacter+0x54c>
    4482:	14 c0       	rjmp	.+40     	; 0x44ac <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4484:	69 a9       	ldd	r22, Y+49	; 0x31
    4486:	7a a9       	ldd	r23, Y+50	; 0x32
    4488:	8b a9       	ldd	r24, Y+51	; 0x33
    448a:	9c a9       	ldd	r25, Y+52	; 0x34
    448c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	98 ab       	std	Y+48, r25	; 0x30
    4496:	8f a7       	std	Y+47, r24	; 0x2f
    4498:	8f a5       	ldd	r24, Y+47	; 0x2f
    449a:	98 a9       	ldd	r25, Y+48	; 0x30
    449c:	9c a7       	std	Y+44, r25	; 0x2c
    449e:	8b a7       	std	Y+43, r24	; 0x2b
    44a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    44a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    44a4:	01 97       	sbiw	r24, 0x01	; 1
    44a6:	f1 f7       	brne	.-4      	; 0x44a4 <LCD_displayCharacter+0x594>
    44a8:	9c a7       	std	Y+44, r25	; 0x2c
    44aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	62 e0       	ldi	r22, 0x02	; 2
    44b0:	41 e0       	ldi	r20, 0x01	; 1
    44b2:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	a0 e8       	ldi	r26, 0x80	; 128
    44bc:	bf e3       	ldi	r27, 0x3F	; 63
    44be:	8f a3       	std	Y+39, r24	; 0x27
    44c0:	98 a7       	std	Y+40, r25	; 0x28
    44c2:	a9 a7       	std	Y+41, r26	; 0x29
    44c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44c6:	6f a1       	ldd	r22, Y+39	; 0x27
    44c8:	78 a5       	ldd	r23, Y+40	; 0x28
    44ca:	89 a5       	ldd	r24, Y+41	; 0x29
    44cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	4a e7       	ldi	r20, 0x7A	; 122
    44d4:	55 e4       	ldi	r21, 0x45	; 69
    44d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	8b a3       	std	Y+35, r24	; 0x23
    44e0:	9c a3       	std	Y+36, r25	; 0x24
    44e2:	ad a3       	std	Y+37, r26	; 0x25
    44e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44e6:	6b a1       	ldd	r22, Y+35	; 0x23
    44e8:	7c a1       	ldd	r23, Y+36	; 0x24
    44ea:	8d a1       	ldd	r24, Y+37	; 0x25
    44ec:	9e a1       	ldd	r25, Y+38	; 0x26
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e8       	ldi	r20, 0x80	; 128
    44f4:	5f e3       	ldi	r21, 0x3F	; 63
    44f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    44fa:	88 23       	and	r24, r24
    44fc:	2c f4       	brge	.+10     	; 0x4508 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	9a a3       	std	Y+34, r25	; 0x22
    4504:	89 a3       	std	Y+33, r24	; 0x21
    4506:	3f c0       	rjmp	.+126    	; 0x4586 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    4508:	6b a1       	ldd	r22, Y+35	; 0x23
    450a:	7c a1       	ldd	r23, Y+36	; 0x24
    450c:	8d a1       	ldd	r24, Y+37	; 0x25
    450e:	9e a1       	ldd	r25, Y+38	; 0x26
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	3f ef       	ldi	r19, 0xFF	; 255
    4514:	4f e7       	ldi	r20, 0x7F	; 127
    4516:	57 e4       	ldi	r21, 0x47	; 71
    4518:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    451c:	18 16       	cp	r1, r24
    451e:	4c f5       	brge	.+82     	; 0x4572 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4520:	6f a1       	ldd	r22, Y+39	; 0x27
    4522:	78 a5       	ldd	r23, Y+40	; 0x28
    4524:	89 a5       	ldd	r24, Y+41	; 0x29
    4526:	9a a5       	ldd	r25, Y+42	; 0x2a
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	40 e2       	ldi	r20, 0x20	; 32
    452e:	51 e4       	ldi	r21, 0x41	; 65
    4530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	bc 01       	movw	r22, r24
    453a:	cd 01       	movw	r24, r26
    453c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	9a a3       	std	Y+34, r25	; 0x22
    4546:	89 a3       	std	Y+33, r24	; 0x21
    4548:	0f c0       	rjmp	.+30     	; 0x4568 <LCD_displayCharacter+0x658>
    454a:	80 e9       	ldi	r24, 0x90	; 144
    454c:	91 e0       	ldi	r25, 0x01	; 1
    454e:	98 a3       	std	Y+32, r25	; 0x20
    4550:	8f 8f       	std	Y+31, r24	; 0x1f
    4552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4554:	98 a1       	ldd	r25, Y+32	; 0x20
    4556:	01 97       	sbiw	r24, 0x01	; 1
    4558:	f1 f7       	brne	.-4      	; 0x4556 <LCD_displayCharacter+0x646>
    455a:	98 a3       	std	Y+32, r25	; 0x20
    455c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    455e:	89 a1       	ldd	r24, Y+33	; 0x21
    4560:	9a a1       	ldd	r25, Y+34	; 0x22
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	9a a3       	std	Y+34, r25	; 0x22
    4566:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4568:	89 a1       	ldd	r24, Y+33	; 0x21
    456a:	9a a1       	ldd	r25, Y+34	; 0x22
    456c:	00 97       	sbiw	r24, 0x00	; 0
    456e:	69 f7       	brne	.-38     	; 0x454a <LCD_displayCharacter+0x63a>
    4570:	14 c0       	rjmp	.+40     	; 0x459a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4572:	6b a1       	ldd	r22, Y+35	; 0x23
    4574:	7c a1       	ldd	r23, Y+36	; 0x24
    4576:	8d a1       	ldd	r24, Y+37	; 0x25
    4578:	9e a1       	ldd	r25, Y+38	; 0x26
    457a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	9a a3       	std	Y+34, r25	; 0x22
    4584:	89 a3       	std	Y+33, r24	; 0x21
    4586:	89 a1       	ldd	r24, Y+33	; 0x21
    4588:	9a a1       	ldd	r25, Y+34	; 0x22
    458a:	9e 8f       	std	Y+30, r25	; 0x1e
    458c:	8d 8f       	std	Y+29, r24	; 0x1d
    458e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4590:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	f1 f7       	brne	.-4      	; 0x4592 <LCD_displayCharacter+0x682>
    4596:	9e 8f       	std	Y+30, r25	; 0x1e
    4598:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    459a:	fe 01       	movw	r30, r28
    459c:	ed 59       	subi	r30, 0x9D	; 157
    459e:	ff 4f       	sbci	r31, 0xFF	; 255
    45a0:	80 81       	ld	r24, Z
    45a2:	98 2f       	mov	r25, r24
    45a4:	91 70       	andi	r25, 0x01	; 1
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	49 2f       	mov	r20, r25
    45ac:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    45b0:	fe 01       	movw	r30, r28
    45b2:	ed 59       	subi	r30, 0x9D	; 157
    45b4:	ff 4f       	sbci	r31, 0xFF	; 255
    45b6:	80 81       	ld	r24, Z
    45b8:	88 2f       	mov	r24, r24
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	82 70       	andi	r24, 0x02	; 2
    45be:	90 70       	andi	r25, 0x00	; 0
    45c0:	95 95       	asr	r25
    45c2:	87 95       	ror	r24
    45c4:	98 2f       	mov	r25, r24
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	61 e0       	ldi	r22, 0x01	; 1
    45ca:	49 2f       	mov	r20, r25
    45cc:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    45d0:	fe 01       	movw	r30, r28
    45d2:	ed 59       	subi	r30, 0x9D	; 157
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	80 81       	ld	r24, Z
    45d8:	88 2f       	mov	r24, r24
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	84 70       	andi	r24, 0x04	; 4
    45de:	90 70       	andi	r25, 0x00	; 0
    45e0:	95 95       	asr	r25
    45e2:	87 95       	ror	r24
    45e4:	95 95       	asr	r25
    45e6:	87 95       	ror	r24
    45e8:	98 2f       	mov	r25, r24
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	62 e0       	ldi	r22, 0x02	; 2
    45ee:	49 2f       	mov	r20, r25
    45f0:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    45f4:	fe 01       	movw	r30, r28
    45f6:	ed 59       	subi	r30, 0x9D	; 157
    45f8:	ff 4f       	sbci	r31, 0xFF	; 255
    45fa:	80 81       	ld	r24, Z
    45fc:	88 2f       	mov	r24, r24
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	88 70       	andi	r24, 0x08	; 8
    4602:	90 70       	andi	r25, 0x00	; 0
    4604:	95 95       	asr	r25
    4606:	87 95       	ror	r24
    4608:	95 95       	asr	r25
    460a:	87 95       	ror	r24
    460c:	95 95       	asr	r25
    460e:	87 95       	ror	r24
    4610:	98 2f       	mov	r25, r24
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	64 e0       	ldi	r22, 0x04	; 4
    4616:	49 2f       	mov	r20, r25
    4618:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	a0 e8       	ldi	r26, 0x80	; 128
    4622:	bf e3       	ldi	r27, 0x3F	; 63
    4624:	89 8f       	std	Y+25, r24	; 0x19
    4626:	9a 8f       	std	Y+26, r25	; 0x1a
    4628:	ab 8f       	std	Y+27, r26	; 0x1b
    462a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    462c:	69 8d       	ldd	r22, Y+25	; 0x19
    462e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	4a e7       	ldi	r20, 0x7A	; 122
    463a:	55 e4       	ldi	r21, 0x45	; 69
    463c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	8d 8b       	std	Y+21, r24	; 0x15
    4646:	9e 8b       	std	Y+22, r25	; 0x16
    4648:	af 8b       	std	Y+23, r26	; 0x17
    464a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    464c:	6d 89       	ldd	r22, Y+21	; 0x15
    464e:	7e 89       	ldd	r23, Y+22	; 0x16
    4650:	8f 89       	ldd	r24, Y+23	; 0x17
    4652:	98 8d       	ldd	r25, Y+24	; 0x18
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	40 e8       	ldi	r20, 0x80	; 128
    465a:	5f e3       	ldi	r21, 0x3F	; 63
    465c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4660:	88 23       	and	r24, r24
    4662:	2c f4       	brge	.+10     	; 0x466e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	9c 8b       	std	Y+20, r25	; 0x14
    466a:	8b 8b       	std	Y+19, r24	; 0x13
    466c:	3f c0       	rjmp	.+126    	; 0x46ec <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    466e:	6d 89       	ldd	r22, Y+21	; 0x15
    4670:	7e 89       	ldd	r23, Y+22	; 0x16
    4672:	8f 89       	ldd	r24, Y+23	; 0x17
    4674:	98 8d       	ldd	r25, Y+24	; 0x18
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	3f ef       	ldi	r19, 0xFF	; 255
    467a:	4f e7       	ldi	r20, 0x7F	; 127
    467c:	57 e4       	ldi	r21, 0x47	; 71
    467e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4682:	18 16       	cp	r1, r24
    4684:	4c f5       	brge	.+82     	; 0x46d8 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4686:	69 8d       	ldd	r22, Y+25	; 0x19
    4688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    468a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    468c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	40 e2       	ldi	r20, 0x20	; 32
    4694:	51 e4       	ldi	r21, 0x41	; 65
    4696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    469a:	dc 01       	movw	r26, r24
    469c:	cb 01       	movw	r24, r22
    469e:	bc 01       	movw	r22, r24
    46a0:	cd 01       	movw	r24, r26
    46a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	9c 8b       	std	Y+20, r25	; 0x14
    46ac:	8b 8b       	std	Y+19, r24	; 0x13
    46ae:	0f c0       	rjmp	.+30     	; 0x46ce <LCD_displayCharacter+0x7be>
    46b0:	80 e9       	ldi	r24, 0x90	; 144
    46b2:	91 e0       	ldi	r25, 0x01	; 1
    46b4:	9a 8b       	std	Y+18, r25	; 0x12
    46b6:	89 8b       	std	Y+17, r24	; 0x11
    46b8:	89 89       	ldd	r24, Y+17	; 0x11
    46ba:	9a 89       	ldd	r25, Y+18	; 0x12
    46bc:	01 97       	sbiw	r24, 0x01	; 1
    46be:	f1 f7       	brne	.-4      	; 0x46bc <LCD_displayCharacter+0x7ac>
    46c0:	9a 8b       	std	Y+18, r25	; 0x12
    46c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c4:	8b 89       	ldd	r24, Y+19	; 0x13
    46c6:	9c 89       	ldd	r25, Y+20	; 0x14
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	9c 8b       	std	Y+20, r25	; 0x14
    46cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ce:	8b 89       	ldd	r24, Y+19	; 0x13
    46d0:	9c 89       	ldd	r25, Y+20	; 0x14
    46d2:	00 97       	sbiw	r24, 0x00	; 0
    46d4:	69 f7       	brne	.-38     	; 0x46b0 <LCD_displayCharacter+0x7a0>
    46d6:	14 c0       	rjmp	.+40     	; 0x4700 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d8:	6d 89       	ldd	r22, Y+21	; 0x15
    46da:	7e 89       	ldd	r23, Y+22	; 0x16
    46dc:	8f 89       	ldd	r24, Y+23	; 0x17
    46de:	98 8d       	ldd	r25, Y+24	; 0x18
    46e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e4:	dc 01       	movw	r26, r24
    46e6:	cb 01       	movw	r24, r22
    46e8:	9c 8b       	std	Y+20, r25	; 0x14
    46ea:	8b 8b       	std	Y+19, r24	; 0x13
    46ec:	8b 89       	ldd	r24, Y+19	; 0x13
    46ee:	9c 89       	ldd	r25, Y+20	; 0x14
    46f0:	98 8b       	std	Y+16, r25	; 0x10
    46f2:	8f 87       	std	Y+15, r24	; 0x0f
    46f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    46f6:	98 89       	ldd	r25, Y+16	; 0x10
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	f1 f7       	brne	.-4      	; 0x46f8 <LCD_displayCharacter+0x7e8>
    46fc:	98 8b       	std	Y+16, r25	; 0x10
    46fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	62 e0       	ldi	r22, 0x02	; 2
    4704:	40 e0       	ldi	r20, 0x00	; 0
    4706:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	a0 e8       	ldi	r26, 0x80	; 128
    4710:	bf e3       	ldi	r27, 0x3F	; 63
    4712:	8b 87       	std	Y+11, r24	; 0x0b
    4714:	9c 87       	std	Y+12, r25	; 0x0c
    4716:	ad 87       	std	Y+13, r26	; 0x0d
    4718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    471a:	6b 85       	ldd	r22, Y+11	; 0x0b
    471c:	7c 85       	ldd	r23, Y+12	; 0x0c
    471e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4720:	9e 85       	ldd	r25, Y+14	; 0x0e
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	4a e7       	ldi	r20, 0x7A	; 122
    4728:	55 e4       	ldi	r21, 0x45	; 69
    472a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472e:	dc 01       	movw	r26, r24
    4730:	cb 01       	movw	r24, r22
    4732:	8f 83       	std	Y+7, r24	; 0x07
    4734:	98 87       	std	Y+8, r25	; 0x08
    4736:	a9 87       	std	Y+9, r26	; 0x09
    4738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    473a:	6f 81       	ldd	r22, Y+7	; 0x07
    473c:	78 85       	ldd	r23, Y+8	; 0x08
    473e:	89 85       	ldd	r24, Y+9	; 0x09
    4740:	9a 85       	ldd	r25, Y+10	; 0x0a
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	40 e8       	ldi	r20, 0x80	; 128
    4748:	5f e3       	ldi	r21, 0x3F	; 63
    474a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    474e:	88 23       	and	r24, r24
    4750:	2c f4       	brge	.+10     	; 0x475c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	9e 83       	std	Y+6, r25	; 0x06
    4758:	8d 83       	std	Y+5, r24	; 0x05
    475a:	3f c0       	rjmp	.+126    	; 0x47da <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    475c:	6f 81       	ldd	r22, Y+7	; 0x07
    475e:	78 85       	ldd	r23, Y+8	; 0x08
    4760:	89 85       	ldd	r24, Y+9	; 0x09
    4762:	9a 85       	ldd	r25, Y+10	; 0x0a
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	3f ef       	ldi	r19, 0xFF	; 255
    4768:	4f e7       	ldi	r20, 0x7F	; 127
    476a:	57 e4       	ldi	r21, 0x47	; 71
    476c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4770:	18 16       	cp	r1, r24
    4772:	4c f5       	brge	.+82     	; 0x47c6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4774:	6b 85       	ldd	r22, Y+11	; 0x0b
    4776:	7c 85       	ldd	r23, Y+12	; 0x0c
    4778:	8d 85       	ldd	r24, Y+13	; 0x0d
    477a:	9e 85       	ldd	r25, Y+14	; 0x0e
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	40 e2       	ldi	r20, 0x20	; 32
    4782:	51 e4       	ldi	r21, 0x41	; 65
    4784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4788:	dc 01       	movw	r26, r24
    478a:	cb 01       	movw	r24, r22
    478c:	bc 01       	movw	r22, r24
    478e:	cd 01       	movw	r24, r26
    4790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4794:	dc 01       	movw	r26, r24
    4796:	cb 01       	movw	r24, r22
    4798:	9e 83       	std	Y+6, r25	; 0x06
    479a:	8d 83       	std	Y+5, r24	; 0x05
    479c:	0f c0       	rjmp	.+30     	; 0x47bc <LCD_displayCharacter+0x8ac>
    479e:	80 e9       	ldi	r24, 0x90	; 144
    47a0:	91 e0       	ldi	r25, 0x01	; 1
    47a2:	9c 83       	std	Y+4, r25	; 0x04
    47a4:	8b 83       	std	Y+3, r24	; 0x03
    47a6:	8b 81       	ldd	r24, Y+3	; 0x03
    47a8:	9c 81       	ldd	r25, Y+4	; 0x04
    47aa:	01 97       	sbiw	r24, 0x01	; 1
    47ac:	f1 f7       	brne	.-4      	; 0x47aa <LCD_displayCharacter+0x89a>
    47ae:	9c 83       	std	Y+4, r25	; 0x04
    47b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b2:	8d 81       	ldd	r24, Y+5	; 0x05
    47b4:	9e 81       	ldd	r25, Y+6	; 0x06
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	9e 83       	std	Y+6, r25	; 0x06
    47ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47bc:	8d 81       	ldd	r24, Y+5	; 0x05
    47be:	9e 81       	ldd	r25, Y+6	; 0x06
    47c0:	00 97       	sbiw	r24, 0x00	; 0
    47c2:	69 f7       	brne	.-38     	; 0x479e <LCD_displayCharacter+0x88e>
    47c4:	14 c0       	rjmp	.+40     	; 0x47ee <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c6:	6f 81       	ldd	r22, Y+7	; 0x07
    47c8:	78 85       	ldd	r23, Y+8	; 0x08
    47ca:	89 85       	ldd	r24, Y+9	; 0x09
    47cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	9e 83       	std	Y+6, r25	; 0x06
    47d8:	8d 83       	std	Y+5, r24	; 0x05
    47da:	8d 81       	ldd	r24, Y+5	; 0x05
    47dc:	9e 81       	ldd	r25, Y+6	; 0x06
    47de:	9a 83       	std	Y+2, r25	; 0x02
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	9a 81       	ldd	r25, Y+2	; 0x02
    47e6:	01 97       	sbiw	r24, 0x01	; 1
    47e8:	f1 f7       	brne	.-4      	; 0x47e6 <LCD_displayCharacter+0x8d6>
    47ea:	9a 83       	std	Y+2, r25	; 0x02
    47ec:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePin(LCD_DATA_PORT_ID,data);
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
	#endif
}
    47ee:	cd 59       	subi	r28, 0x9D	; 157
    47f0:	df 4f       	sbci	r29, 0xFF	; 255
    47f2:	0f b6       	in	r0, 0x3f	; 63
    47f4:	f8 94       	cli
    47f6:	de bf       	out	0x3e, r29	; 62
    47f8:	0f be       	out	0x3f, r0	; 63
    47fa:	cd bf       	out	0x3d, r28	; 61
    47fc:	cf 91       	pop	r28
    47fe:	df 91       	pop	r29
    4800:	1f 91       	pop	r17
    4802:	0f 91       	pop	r16
    4804:	08 95       	ret

00004806 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    4806:	df 93       	push	r29
    4808:	cf 93       	push	r28
    480a:	00 d0       	rcall	.+0      	; 0x480c <LCD_displayString+0x6>
    480c:	0f 92       	push	r0
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	9b 83       	std	Y+3, r25	; 0x03
    4814:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4816:	19 82       	std	Y+1, r1	; 0x01
    4818:	0e c0       	rjmp	.+28     	; 0x4836 <LCD_displayString+0x30>
	while (Str[i] !='\0')
	{
		LCD_displayCharacter(Str[i]);
    481a:	89 81       	ldd	r24, Y+1	; 0x01
    481c:	28 2f       	mov	r18, r24
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	8a 81       	ldd	r24, Y+2	; 0x02
    4822:	9b 81       	ldd	r25, Y+3	; 0x03
    4824:	fc 01       	movw	r30, r24
    4826:	e2 0f       	add	r30, r18
    4828:	f3 1f       	adc	r31, r19
    482a:	80 81       	ld	r24, Z
    482c:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <LCD_displayCharacter>
		i++;
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	8f 5f       	subi	r24, 0xFF	; 255
    4834:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while (Str[i] !='\0')
    4836:	89 81       	ldd	r24, Y+1	; 0x01
    4838:	28 2f       	mov	r18, r24
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	8a 81       	ldd	r24, Y+2	; 0x02
    483e:	9b 81       	ldd	r25, Y+3	; 0x03
    4840:	fc 01       	movw	r30, r24
    4842:	e2 0f       	add	r30, r18
    4844:	f3 1f       	adc	r31, r19
    4846:	80 81       	ld	r24, Z
    4848:	88 23       	and	r24, r24
    484a:	39 f7       	brne	.-50     	; 0x481a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	cf 91       	pop	r28
    4854:	df 91       	pop	r29
    4856:	08 95       	ret

00004858 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    4858:	df 93       	push	r29
    485a:	cf 93       	push	r28
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
}
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	08 95       	ret

0000486c <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    486c:	df 93       	push	r29
    486e:	cf 93       	push	r28
    4870:	00 d0       	rcall	.+0      	; 0x4872 <LCD_moveCursor+0x6>
    4872:	00 d0       	rcall	.+0      	; 0x4874 <LCD_moveCursor+0x8>
    4874:	0f 92       	push	r0
    4876:	cd b7       	in	r28, 0x3d	; 61
    4878:	de b7       	in	r29, 0x3e	; 62
    487a:	8a 83       	std	Y+2, r24	; 0x02
    487c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address = 0;
    487e:	19 82       	std	Y+1, r1	; 0x01
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    4880:	8a 81       	ldd	r24, Y+2	; 0x02
    4882:	28 2f       	mov	r18, r24
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	3d 83       	std	Y+5, r19	; 0x05
    4888:	2c 83       	std	Y+4, r18	; 0x04
    488a:	8c 81       	ldd	r24, Y+4	; 0x04
    488c:	9d 81       	ldd	r25, Y+5	; 0x05
    488e:	81 30       	cpi	r24, 0x01	; 1
    4890:	91 05       	cpc	r25, r1
    4892:	c9 f0       	breq	.+50     	; 0x48c6 <LCD_moveCursor+0x5a>
    4894:	2c 81       	ldd	r18, Y+4	; 0x04
    4896:	3d 81       	ldd	r19, Y+5	; 0x05
    4898:	22 30       	cpi	r18, 0x02	; 2
    489a:	31 05       	cpc	r19, r1
    489c:	2c f4       	brge	.+10     	; 0x48a8 <LCD_moveCursor+0x3c>
    489e:	8c 81       	ldd	r24, Y+4	; 0x04
    48a0:	9d 81       	ldd	r25, Y+5	; 0x05
    48a2:	00 97       	sbiw	r24, 0x00	; 0
    48a4:	61 f0       	breq	.+24     	; 0x48be <LCD_moveCursor+0x52>
    48a6:	1a c0       	rjmp	.+52     	; 0x48dc <LCD_moveCursor+0x70>
    48a8:	2c 81       	ldd	r18, Y+4	; 0x04
    48aa:	3d 81       	ldd	r19, Y+5	; 0x05
    48ac:	22 30       	cpi	r18, 0x02	; 2
    48ae:	31 05       	cpc	r19, r1
    48b0:	71 f0       	breq	.+28     	; 0x48ce <LCD_moveCursor+0x62>
    48b2:	8c 81       	ldd	r24, Y+4	; 0x04
    48b4:	9d 81       	ldd	r25, Y+5	; 0x05
    48b6:	83 30       	cpi	r24, 0x03	; 3
    48b8:	91 05       	cpc	r25, r1
    48ba:	69 f0       	breq	.+26     	; 0x48d6 <LCD_moveCursor+0x6a>
    48bc:	0f c0       	rjmp	.+30     	; 0x48dc <LCD_moveCursor+0x70>
	{
		case 0:
		lcd_memory_address=col + 0x80;
    48be:	8b 81       	ldd	r24, Y+3	; 0x03
    48c0:	80 58       	subi	r24, 0x80	; 128
    48c2:	89 83       	std	Y+1, r24	; 0x01
    48c4:	0b c0       	rjmp	.+22     	; 0x48dc <LCD_moveCursor+0x70>
		break;
		case 1:
		lcd_memory_address=col+ 0xC0;
    48c6:	8b 81       	ldd	r24, Y+3	; 0x03
    48c8:	80 54       	subi	r24, 0x40	; 64
    48ca:	89 83       	std	Y+1, r24	; 0x01
    48cc:	07 c0       	rjmp	.+14     	; 0x48dc <LCD_moveCursor+0x70>
		break;
		case 2:
		lcd_memory_address=col+ 0x94;
    48ce:	8b 81       	ldd	r24, Y+3	; 0x03
    48d0:	8c 56       	subi	r24, 0x6C	; 108
    48d2:	89 83       	std	Y+1, r24	; 0x01
    48d4:	03 c0       	rjmp	.+6      	; 0x48dc <LCD_moveCursor+0x70>
		break;
		case 3:
		lcd_memory_address=col+ 0xD4;
    48d6:	8b 81       	ldd	r24, Y+3	; 0x03
    48d8:	8c 52       	subi	r24, 0x2C	; 44
    48da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    48dc:	89 81       	ldd	r24, Y+1	; 0x01
    48de:	80 68       	ori	r24, 0x80	; 128
    48e0:	0e 94 0d 1b 	call	0x361a	; 0x361a <LCD_sendCommand>
}
    48e4:	0f 90       	pop	r0
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	cf 91       	pop	r28
    48f0:	df 91       	pop	r29
    48f2:	08 95       	ret

000048f4 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <LCD_displayStringRowColumn+0x6>
    48fa:	00 d0       	rcall	.+0      	; 0x48fc <LCD_displayStringRowColumn+0x8>
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	89 83       	std	Y+1, r24	; 0x01
    4902:	6a 83       	std	Y+2, r22	; 0x02
    4904:	5c 83       	std	Y+4, r21	; 0x04
    4906:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);				/* go to to the required LCD position */
    4908:	89 81       	ldd	r24, Y+1	; 0x01
    490a:	6a 81       	ldd	r22, Y+2	; 0x02
    490c:	0e 94 36 24 	call	0x486c	; 0x486c <LCD_moveCursor>
	LCD_displayString(Str);					/* display the string */
    4910:	8b 81       	ldd	r24, Y+3	; 0x03
    4912:	9c 81       	ldd	r25, Y+4	; 0x04
    4914:	0e 94 03 24 	call	0x4806	; 0x4806 <LCD_displayString>
}
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	cf 91       	pop	r28
    4922:	df 91       	pop	r29
    4924:	08 95       	ret

00004926 <LCD_integerToString>:
void LCD_integerToString(int data)
{
    4926:	df 93       	push	r29
    4928:	cf 93       	push	r28
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	62 97       	sbiw	r28, 0x12	; 18
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	f8 94       	cli
    4934:	de bf       	out	0x3e, r29	; 62
    4936:	0f be       	out	0x3f, r0	; 63
    4938:	cd bf       	out	0x3d, r28	; 61
    493a:	9a 8b       	std	Y+18, r25	; 0x12
    493c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];						/* String to hold the ascii result */
	itoa(data,buff,10);					/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    493e:	89 89       	ldd	r24, Y+17	; 0x11
    4940:	9a 89       	ldd	r25, Y+18	; 0x12
    4942:	9e 01       	movw	r18, r28
    4944:	2f 5f       	subi	r18, 0xFF	; 255
    4946:	3f 4f       	sbci	r19, 0xFF	; 255
    4948:	b9 01       	movw	r22, r18
    494a:	4a e0       	ldi	r20, 0x0A	; 10
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	0e 94 d5 29 	call	0x53aa	; 0x53aa <itoa>
	LCD_displayString(buff);			 /* Display the string */
    4952:	ce 01       	movw	r24, r28
    4954:	01 96       	adiw	r24, 0x01	; 1
    4956:	0e 94 03 24 	call	0x4806	; 0x4806 <LCD_displayString>
}
    495a:	62 96       	adiw	r28, 0x12	; 18
    495c:	0f b6       	in	r0, 0x3f	; 63
    495e:	f8 94       	cli
    4960:	de bf       	out	0x3e, r29	; 62
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	cf 91       	pop	r28
    4968:	df 91       	pop	r29
    496a:	08 95       	ret

0000496c <LCD_displayIntegerRowColumn>:
void LCD_displayIntegerRowColumn(uint8 row,uint8 col,int data){
    496c:	df 93       	push	r29
    496e:	cf 93       	push	r28
    4970:	cd b7       	in	r28, 0x3d	; 61
    4972:	de b7       	in	r29, 0x3e	; 62
    4974:	64 97       	sbiw	r28, 0x14	; 20
    4976:	0f b6       	in	r0, 0x3f	; 63
    4978:	f8 94       	cli
    497a:	de bf       	out	0x3e, r29	; 62
    497c:	0f be       	out	0x3f, r0	; 63
    497e:	cd bf       	out	0x3d, r28	; 61
    4980:	89 8b       	std	Y+17, r24	; 0x11
    4982:	6a 8b       	std	Y+18, r22	; 0x12
    4984:	5c 8b       	std	Y+20, r21	; 0x14
    4986:	4b 8b       	std	Y+19, r20	; 0x13
		char buff[16];						/* String to hold the ascii result */
			LCD_moveCursor(row,col);				/* go to to the required LCD position */
    4988:	89 89       	ldd	r24, Y+17	; 0x11
    498a:	6a 89       	ldd	r22, Y+18	; 0x12
    498c:	0e 94 36 24 	call	0x486c	; 0x486c <LCD_moveCursor>
		itoa(data,buff,10);					/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4990:	8b 89       	ldd	r24, Y+19	; 0x13
    4992:	9c 89       	ldd	r25, Y+20	; 0x14
    4994:	9e 01       	movw	r18, r28
    4996:	2f 5f       	subi	r18, 0xFF	; 255
    4998:	3f 4f       	sbci	r19, 0xFF	; 255
    499a:	b9 01       	movw	r22, r18
    499c:	4a e0       	ldi	r20, 0x0A	; 10
    499e:	50 e0       	ldi	r21, 0x00	; 0
    49a0:	0e 94 d5 29 	call	0x53aa	; 0x53aa <itoa>
		LCD_displayString(buff);			 /* Display the string */
    49a4:	ce 01       	movw	r24, r28
    49a6:	01 96       	adiw	r24, 0x01	; 1
    49a8:	0e 94 03 24 	call	0x4806	; 0x4806 <LCD_displayString>
}
    49ac:	64 96       	adiw	r28, 0x14	; 20
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	f8 94       	cli
    49b2:	de bf       	out	0x3e, r29	; 62
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	cd bf       	out	0x3d, r28	; 61
    49b8:	cf 91       	pop	r28
    49ba:	df 91       	pop	r29
    49bc:	08 95       	ret

000049be <EEPROM_vidInit>:
/* Description     : Initialize EEPROM		                                  */
/* Input Arguments : void						          */
/* Return          : void						          */
/**********************************************************************************/
void EEPROM_vidInit(void)
{
    49be:	df 93       	push	r29
    49c0:	cf 93       	push	r28
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
	/* Initialize this Node as Master Node in the Network to Communicate with EEPROM (Slave Node) */
	TWI_vidMasterInit();
    49c6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <TWI_vidMasterInit>
}
    49ca:	cf 91       	pop	r28
    49cc:	df 91       	pop	r29
    49ce:	08 95       	ret

000049d0 <EEPROM_vidSendDataByte>:
/* Description     : Send data byte to be written on a specific byte of EEPROM    */
/* Input Arguments : u16 Copy_u16ByteAddress , u8 Copy_u8DataByteToBeSend	  */
/* Return          : void						          */
/**********************************************************************************/
void EEPROM_vidSendDataByte(uint16 Copy_u16ByteAddress , uint8 Copy_u8DataByteToBeSend)
{
    49d0:	df 93       	push	r29
    49d2:	cf 93       	push	r28
    49d4:	00 d0       	rcall	.+0      	; 0x49d6 <EEPROM_vidSendDataByte+0x6>
    49d6:	00 d0       	rcall	.+0      	; 0x49d8 <EEPROM_vidSendDataByte+0x8>
    49d8:	cd b7       	in	r28, 0x3d	; 61
    49da:	de b7       	in	r29, 0x3e	; 62
    49dc:	9b 83       	std	Y+3, r25	; 0x03
    49de:	8a 83       	std	Y+2, r24	; 0x02
    49e0:	6c 83       	std	Y+4, r22	; 0x04
	/* Local Variables Definitions */
	uint8 Local_u8Address;

	/* Send Start Condition on the Bus to Begin Communication with EEPROM */
	TWI_SendStartCondition();
    49e2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_SendStartCondition>

	/* Check EEPROM Number */
	#if   EEPROM_NUM == EEPROM_1

		/* Calculate Address */
		Local_u8Address = ((EEPROM_ADDRESS_FIXED_SEQENCE << 3) | (EEPROM_NUM << 2) | (Copy_u16ByteAddress >> 8));
    49e6:	8a 81       	ldd	r24, Y+2	; 0x02
    49e8:	9b 81       	ldd	r25, Y+3	; 0x03
    49ea:	89 2f       	mov	r24, r25
    49ec:	99 27       	eor	r25, r25
    49ee:	80 65       	ori	r24, 0x50	; 80
    49f0:	89 83       	std	Y+1, r24	; 0x01

		/* Send EEPROM Address (Slave Address) Plus Write Option On the bus (TWI Address Packet) */
		TWI_SendSlaveAddressWithWrite(Local_u8Address);
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_SendSlaveAddressWithWrite>
	#else
		#error " Wrong EEPROM Number Configuration ! "
	#endif

	/* Send On the Bus EEPROM Byte (Page) Address Desired to Write Data On (TWI Data Packet) */
	TWI_MasterSendDataByte((uint8)Copy_u16ByteAddress);
    49f8:	8a 81       	ldd	r24, Y+2	; 0x02
    49fa:	0e 94 1b 11 	call	0x2236	; 0x2236 <TWI_MasterSendDataByte>

	/* Send Desired Data To Be Written On Addressed Byte of EEPROM (TWI Data Packet) */
	TWI_MasterSendDataByte(Copy_u8DataByteToBeSend);
    49fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4a00:	0e 94 1b 11 	call	0x2236	; 0x2236 <TWI_MasterSendDataByte>

	/* Send Stop Condition on the Bus to End Communication with EEPROM */
	TWI_SendStopCondition();
    4a04:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <TWI_SendStopCondition>
}
    4a08:	0f 90       	pop	r0
    4a0a:	0f 90       	pop	r0
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	cf 91       	pop	r28
    4a12:	df 91       	pop	r29
    4a14:	08 95       	ret

00004a16 <EEPROM_vidReadDataByte>:
/* Description     : Read data byte from a specific byte of EEPROM                */
/* Input Arguments : u16 Copy_u16ByteAddress , u8* Copy_pu8DataByteToBeReceived	  */
/* Return          : void						          */
/**********************************************************************************/
void EEPROM_vidReadDataByte(uint16 Copy_u16ByteAddress , uint8* Copy_pu8DataByteToBeReceived)
{
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	00 d0       	rcall	.+0      	; 0x4a1c <EEPROM_vidReadDataByte+0x6>
    4a1c:	00 d0       	rcall	.+0      	; 0x4a1e <EEPROM_vidReadDataByte+0x8>
    4a1e:	0f 92       	push	r0
    4a20:	cd b7       	in	r28, 0x3d	; 61
    4a22:	de b7       	in	r29, 0x3e	; 62
    4a24:	9b 83       	std	Y+3, r25	; 0x03
    4a26:	8a 83       	std	Y+2, r24	; 0x02
    4a28:	7d 83       	std	Y+5, r23	; 0x05
    4a2a:	6c 83       	std	Y+4, r22	; 0x04
	/* Local Variables Definitions */
	uint8 Local_u8Address;

	/* Send Start Condition on the Bus to Begin Communication with EEPROM */
	TWI_SendStartCondition();
    4a2c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_SendStartCondition>

	/* Check EEPROM Number */
	#if   EEPROM_NUM == EEPROM_1

		/* Calculate Address */
		Local_u8Address = ((EEPROM_ADDRESS_FIXED_SEQENCE << 3) | (EEPROM_NUM << 2) | (Copy_u16ByteAddress >> 8));
    4a30:	8a 81       	ldd	r24, Y+2	; 0x02
    4a32:	9b 81       	ldd	r25, Y+3	; 0x03
    4a34:	89 2f       	mov	r24, r25
    4a36:	99 27       	eor	r25, r25
    4a38:	80 65       	ori	r24, 0x50	; 80
    4a3a:	89 83       	std	Y+1, r24	; 0x01

		/* Send EEPROM Address (Slave Address) Plus Write Option On the bus (TWI Address Packet) */
		TWI_SendSlaveAddressWithWrite(Local_u8Address);
    4a3c:	89 81       	ldd	r24, Y+1	; 0x01
    4a3e:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_SendSlaveAddressWithWrite>
	#else
		#error " Wrong EEPROM Number Configuration ! "
	#endif

	/* Send On the Bus EEPROM Byte (Page) Address Desired to Read Data From (TWI Data Packet) */
	TWI_MasterSendDataByte((uint8)Copy_u16ByteAddress);
    4a42:	8a 81       	ldd	r24, Y+2	; 0x02
    4a44:	0e 94 1b 11 	call	0x2236	; 0x2236 <TWI_MasterSendDataByte>

	/* Send Repeated Start Condition on the Bus to Start Receiving Data From Addressed EEPROM Byte  */
	TWI_SendRepeatedStartCondition();
    4a48:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <TWI_SendRepeatedStartCondition>

	/* Check EEPROM Number */
	#if   EEPROM_NUM == EEPROM_1

		/* Calculate Address */
		Local_u8Address = ((EEPROM_ADDRESS_FIXED_SEQENCE << 3) | (EEPROM_NUM << 2) | (Copy_u16ByteAddress >> 8));
    4a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a50:	89 2f       	mov	r24, r25
    4a52:	99 27       	eor	r25, r25
    4a54:	80 65       	ori	r24, 0x50	; 80
    4a56:	89 83       	std	Y+1, r24	; 0x01

		/* Send EEPROM Address (Slave Address) Plus Read Option On the bus (TWI Address Packet) */
		TWI_SendSlaveAddressWithRead(Local_u8Address);
    4a58:	89 81       	ldd	r24, Y+1	; 0x01
    4a5a:	0e 94 ac 10 	call	0x2158	; 0x2158 <TWI_SendSlaveAddressWithRead>
	#else
		#error " Wrong EEPROM Number Configuration ! "
	#endif

	/* Read Desired Data Byte From Addressed Byte of EEPROM (TWI Data Packet)*/
	TWI_MasterReadDataByte(Copy_pu8DataByteToBeReceived);
    4a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a60:	9d 81       	ldd	r25, Y+5	; 0x05
    4a62:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <TWI_MasterReadDataByte>

	/* Send Stop Condition on the Bus to End Communication with EEPROM */
	TWI_SendStopCondition();
    4a66:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <TWI_SendStopCondition>
}
    4a6a:	0f 90       	pop	r0
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	cf 91       	pop	r28
    4a76:	df 91       	pop	r29
    4a78:	08 95       	ret

00004a7a <COM_slaveInit>:
#include "../../MCAL/SPI/SPI_private.h"

#include "com.h"


void COM_slaveInit(void){
    4a7a:	df 93       	push	r29
    4a7c:	cf 93       	push	r28
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
/* initializations: */
	/* initializing pins direction */
	DIO_setupPinDirection(PORTB_ID , PIN4_ID , PIN_INPUT);
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	64 e0       	ldi	r22, 0x04	; 4
    4a86:	40 e0       	ldi	r20, 0x00	; 0
    4a88:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID , PIN5_ID , PIN_INPUT);
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	65 e0       	ldi	r22, 0x05	; 5
    4a90:	40 e0       	ldi	r20, 0x00	; 0
    4a92:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID , PIN6_ID , PIN_OUTPUT);
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	66 e0       	ldi	r22, 0x06	; 6
    4a9a:	41 e0       	ldi	r20, 0x01	; 1
    4a9c:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID , PIN7_ID , PIN_INPUT);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	67 e0       	ldi	r22, 0x07	; 7
    4aa4:	40 e0       	ldi	r20, 0x00	; 0
    4aa6:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	/* SPI initialization*/
	SPI_slaveInit();
    4aaa:	0e 94 0d 12 	call	0x241a	; 0x241a <SPI_slaveInit>

	/* Initialize EEPROM */
	EEPROM_vidInit();
    4aae:	0e 94 df 24 	call	0x49be	; 0x49be <EEPROM_vidInit>
}
    4ab2:	cf 91       	pop	r28
    4ab4:	df 91       	pop	r29
    4ab6:	08 95       	ret

00004ab8 <COM_masterInit>:

void COM_masterInit(void){
    4ab8:	df 93       	push	r29
    4aba:	cf 93       	push	r28
    4abc:	cd b7       	in	r28, 0x3d	; 61
    4abe:	de b7       	in	r29, 0x3e	; 62
/* initializations: */
	/* initializing pins direction */
	DIO_setupPinDirection(PORTB_ID , PIN4_ID , PIN_OUTPUT);
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	64 e0       	ldi	r22, 0x04	; 4
    4ac4:	41 e0       	ldi	r20, 0x01	; 1
    4ac6:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID , PIN5_ID , PIN_OUTPUT);
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	65 e0       	ldi	r22, 0x05	; 5
    4ace:	41 e0       	ldi	r20, 0x01	; 1
    4ad0:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID , PIN6_ID , PIN_INPUT);
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	66 e0       	ldi	r22, 0x06	; 6
    4ad8:	40 e0       	ldi	r20, 0x00	; 0
    4ada:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID , PIN7_ID , PIN_OUTPUT);
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	67 e0       	ldi	r22, 0x07	; 7
    4ae2:	41 e0       	ldi	r20, 0x01	; 1
    4ae4:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	/* SPI initialization*/
	SPI_masterInit();
    4ae8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <SPI_masterInit>
}
    4aec:	cf 91       	pop	r28
    4aee:	df 91       	pop	r29
    4af0:	08 95       	ret

00004af2 <COM_send>:


void COM_send(uint8 copy_data){
    4af2:	df 93       	push	r29
    4af4:	cf 93       	push	r28
    4af6:	0f 92       	push	r0
    4af8:	cd b7       	in	r28, 0x3d	; 61
    4afa:	de b7       	in	r29, 0x3e	; 62
    4afc:	89 83       	std	Y+1, r24	; 0x01
	SPI_transiver(copy_data);
    4afe:	89 81       	ldd	r24, Y+1	; 0x01
    4b00:	0e 94 1d 12 	call	0x243a	; 0x243a <SPI_transiver>
}
    4b04:	0f 90       	pop	r0
    4b06:	cf 91       	pop	r28
    4b08:	df 91       	pop	r29
    4b0a:	08 95       	ret

00004b0c <COM_receive>:

uint8 COM_receive(void){
    4b0c:	df 93       	push	r29
    4b0e:	cf 93       	push	r28
    4b10:	0f 92       	push	r0
    4b12:	cd b7       	in	r28, 0x3d	; 61
    4b14:	de b7       	in	r29, 0x3e	; 62
	uint8 receiveBuffer;
	receiveBuffer = SPI_transiver(DUMMY_DATA);
    4b16:	8e e6       	ldi	r24, 0x6E	; 110
    4b18:	0e 94 1d 12 	call	0x243a	; 0x243a <SPI_transiver>
    4b1c:	89 83       	std	Y+1, r24	; 0x01
	return receiveBuffer;
    4b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b20:	0f 90       	pop	r0
    4b22:	cf 91       	pop	r28
    4b24:	df 91       	pop	r29
    4b26:	08 95       	ret

00004b28 <Button_init>:
                Yousef Khaled Ahmed (558)
================================================================*/
#include "Button.h"

void Button_init(void)
{ 
    4b28:	df 93       	push	r29
    4b2a:	cf 93       	push	r28
    4b2c:	cd b7       	in	r28, 0x3d	; 61
    4b2e:	de b7       	in	r29, 0x3e	; 62
	/*Initializing  the pin directions of the pins that are connected to the keypad on the avr kit (Fares ATMega32 Kit)*/
	DIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_INPUT); 
    4b30:	83 e0       	ldi	r24, 0x03	; 3
    4b32:	67 e0       	ldi	r22, 0x07	; 7
    4b34:	40 e0       	ldi	r20, 0x00	; 0
    4b36:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN6_ID,PIN_INPUT);
    4b3a:	83 e0       	ldi	r24, 0x03	; 3
    4b3c:	66 e0       	ldi	r22, 0x06	; 6
    4b3e:	40 e0       	ldi	r20, 0x00	; 0
    4b40:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN5_ID,PIN_INPUT);
    4b44:	83 e0       	ldi	r24, 0x03	; 3
    4b46:	65 e0       	ldi	r22, 0x05	; 5
    4b48:	40 e0       	ldi	r20, 0x00	; 0
    4b4a:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN4_ID,PIN_INPUT);
    4b4e:	83 e0       	ldi	r24, 0x03	; 3
    4b50:	64 e0       	ldi	r22, 0x04	; 4
    4b52:	40 e0       	ldi	r20, 0x00	; 0
    4b54:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_INPUT);
    4b58:	83 e0       	ldi	r24, 0x03	; 3
    4b5a:	63 e0       	ldi	r22, 0x03	; 3
    4b5c:	40 e0       	ldi	r20, 0x00	; 0
    4b5e:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_setupPortDirection(PORTC_ID,PIN_INPUT);
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	60 e0       	ldi	r22, 0x00	; 0
    4b66:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DIO_setupPortDirection>
	
}
    4b6a:	cf 91       	pop	r28
    4b6c:	df 91       	pop	r29
    4b6e:	08 95       	ret

00004b70 <Button_Read>:

uint8_t Button_Read(uint8_t ButtonPinColumn, uint8_t ButtonPinRow){
    4b70:	df 93       	push	r29
    4b72:	cf 93       	push	r28
    4b74:	cd b7       	in	r28, 0x3d	; 61
    4b76:	de b7       	in	r29, 0x3e	; 62
    4b78:	61 97       	sbiw	r28, 0x11	; 17
    4b7a:	0f b6       	in	r0, 0x3f	; 63
    4b7c:	f8 94       	cli
    4b7e:	de bf       	out	0x3e, r29	; 62
    4b80:	0f be       	out	0x3f, r0	; 63
    4b82:	cd bf       	out	0x3d, r28	; 61
    4b84:	88 8b       	std	Y+16, r24	; 0x10
    4b86:	69 8b       	std	Y+17, r22	; 0x11

	uint8_t ButtonStatus;
	
	DIO_setupPinDirection(BUTTON_PORT_ROW_OUT,ButtonPinRow,PIN_OUTPUT);
    4b88:	82 e0       	ldi	r24, 0x02	; 2
    4b8a:	69 89       	ldd	r22, Y+17	; 0x11
    4b8c:	41 e0       	ldi	r20, 0x01	; 1
    4b8e:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
	DIO_writePin(BUTTON_PORT_ROW_OUT,ButtonPinRow,LOGIC_LOW);
    4b92:	82 e0       	ldi	r24, 0x02	; 2
    4b94:	69 89       	ldd	r22, Y+17	; 0x11
    4b96:	40 e0       	ldi	r20, 0x00	; 0
    4b98:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	a0 ea       	ldi	r26, 0xA0	; 160
    4ba2:	b1 e4       	ldi	r27, 0x41	; 65
    4ba4:	8b 87       	std	Y+11, r24	; 0x0b
    4ba6:	9c 87       	std	Y+12, r25	; 0x0c
    4ba8:	ad 87       	std	Y+13, r26	; 0x0d
    4baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	4a e7       	ldi	r20, 0x7A	; 122
    4bba:	55 e4       	ldi	r21, 0x45	; 69
    4bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	cb 01       	movw	r24, r22
    4bc4:	8f 83       	std	Y+7, r24	; 0x07
    4bc6:	98 87       	std	Y+8, r25	; 0x08
    4bc8:	a9 87       	std	Y+9, r26	; 0x09
    4bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bce:	78 85       	ldd	r23, Y+8	; 0x08
    4bd0:	89 85       	ldd	r24, Y+9	; 0x09
    4bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	40 e8       	ldi	r20, 0x80	; 128
    4bda:	5f e3       	ldi	r21, 0x3F	; 63
    4bdc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4be0:	88 23       	and	r24, r24
    4be2:	2c f4       	brge	.+10     	; 0x4bee <Button_Read+0x7e>
		__ticks = 1;
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	9e 83       	std	Y+6, r25	; 0x06
    4bea:	8d 83       	std	Y+5, r24	; 0x05
    4bec:	3f c0       	rjmp	.+126    	; 0x4c6c <Button_Read+0xfc>
	else if (__tmp > 65535)
    4bee:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf0:	78 85       	ldd	r23, Y+8	; 0x08
    4bf2:	89 85       	ldd	r24, Y+9	; 0x09
    4bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	3f ef       	ldi	r19, 0xFF	; 255
    4bfa:	4f e7       	ldi	r20, 0x7F	; 127
    4bfc:	57 e4       	ldi	r21, 0x47	; 71
    4bfe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c02:	18 16       	cp	r1, r24
    4c04:	4c f5       	brge	.+82     	; 0x4c58 <Button_Read+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c0e:	20 e0       	ldi	r18, 0x00	; 0
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	40 e2       	ldi	r20, 0x20	; 32
    4c14:	51 e4       	ldi	r21, 0x41	; 65
    4c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c1a:	dc 01       	movw	r26, r24
    4c1c:	cb 01       	movw	r24, r22
    4c1e:	bc 01       	movw	r22, r24
    4c20:	cd 01       	movw	r24, r26
    4c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c26:	dc 01       	movw	r26, r24
    4c28:	cb 01       	movw	r24, r22
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
    4c2e:	0f c0       	rjmp	.+30     	; 0x4c4e <Button_Read+0xde>
    4c30:	80 e9       	ldi	r24, 0x90	; 144
    4c32:	91 e0       	ldi	r25, 0x01	; 1
    4c34:	9c 83       	std	Y+4, r25	; 0x04
    4c36:	8b 83       	std	Y+3, r24	; 0x03
    4c38:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3c:	01 97       	sbiw	r24, 0x01	; 1
    4c3e:	f1 f7       	brne	.-4      	; 0x4c3c <Button_Read+0xcc>
    4c40:	9c 83       	std	Y+4, r25	; 0x04
    4c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c44:	8d 81       	ldd	r24, Y+5	; 0x05
    4c46:	9e 81       	ldd	r25, Y+6	; 0x06
    4c48:	01 97       	sbiw	r24, 0x01	; 1
    4c4a:	9e 83       	std	Y+6, r25	; 0x06
    4c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c50:	9e 81       	ldd	r25, Y+6	; 0x06
    4c52:	00 97       	sbiw	r24, 0x00	; 0
    4c54:	69 f7       	brne	.-38     	; 0x4c30 <Button_Read+0xc0>
    4c56:	14 c0       	rjmp	.+40     	; 0x4c80 <Button_Read+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c58:	6f 81       	ldd	r22, Y+7	; 0x07
    4c5a:	78 85       	ldd	r23, Y+8	; 0x08
    4c5c:	89 85       	ldd	r24, Y+9	; 0x09
    4c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	9e 83       	std	Y+6, r25	; 0x06
    4c6a:	8d 83       	std	Y+5, r24	; 0x05
    4c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c70:	9a 83       	std	Y+2, r25	; 0x02
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	9a 81       	ldd	r25, Y+2	; 0x02
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	f1 f7       	brne	.-4      	; 0x4c78 <Button_Read+0x108>
    4c7c:	9a 83       	std	Y+2, r25	; 0x02
    4c7e:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(20);
	
	ButtonStatus = GET_BIT(BUTTON_PORT_COLUMN_IN,(ButtonPinColumn));
    4c80:	e0 e3       	ldi	r30, 0x30	; 48
    4c82:	f0 e0       	ldi	r31, 0x00	; 0
    4c84:	80 81       	ld	r24, Z
    4c86:	48 2f       	mov	r20, r24
    4c88:	50 e0       	ldi	r21, 0x00	; 0
    4c8a:	88 89       	ldd	r24, Y+16	; 0x10
    4c8c:	28 2f       	mov	r18, r24
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	81 e0       	ldi	r24, 0x01	; 1
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	02 c0       	rjmp	.+4      	; 0x4c9a <Button_Read+0x12a>
    4c96:	88 0f       	add	r24, r24
    4c98:	99 1f       	adc	r25, r25
    4c9a:	2a 95       	dec	r18
    4c9c:	e2 f7       	brpl	.-8      	; 0x4c96 <Button_Read+0x126>
    4c9e:	9a 01       	movw	r18, r20
    4ca0:	28 23       	and	r18, r24
    4ca2:	39 23       	and	r19, r25
    4ca4:	88 89       	ldd	r24, Y+16	; 0x10
    4ca6:	88 2f       	mov	r24, r24
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	a9 01       	movw	r20, r18
    4cac:	02 c0       	rjmp	.+4      	; 0x4cb2 <Button_Read+0x142>
    4cae:	55 95       	asr	r21
    4cb0:	47 95       	ror	r20
    4cb2:	8a 95       	dec	r24
    4cb4:	e2 f7       	brpl	.-8      	; 0x4cae <Button_Read+0x13e>
    4cb6:	ca 01       	movw	r24, r20
    4cb8:	8f 87       	std	Y+15, r24	; 0x0f
	
	return ButtonStatus;
    4cba:	8f 85       	ldd	r24, Y+15	; 0x0f
	
	_delay_ms(20);
	
}
    4cbc:	61 96       	adiw	r28, 0x11	; 17
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	de bf       	out	0x3e, r29	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	cd bf       	out	0x3d, r28	; 61
    4cc8:	cf 91       	pop	r28
    4cca:	df 91       	pop	r29
    4ccc:	08 95       	ret

00004cce <Buzzer_Init>:

#include "Buzzer.h"


void Buzzer_Init (void)
{
    4cce:	df 93       	push	r29
    4cd0:	cf 93       	push	r28
    4cd2:	cd b7       	in	r28, 0x3d	; 61
    4cd4:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    4cd6:	82 e0       	ldi	r24, 0x02	; 2
    4cd8:	66 e0       	ldi	r22, 0x06	; 6
    4cda:	41 e0       	ldi	r20, 0x01	; 1
    4cdc:	0e 94 06 13 	call	0x260c	; 0x260c <DIO_setupPinDirection>
}
    4ce0:	cf 91       	pop	r28
    4ce2:	df 91       	pop	r29
    4ce4:	08 95       	ret

00004ce6 <Buzzer_TurnOnOff>:


void Buzzer_TurnOnOff (uint8 Turn)
{
    4ce6:	df 93       	push	r29
    4ce8:	cf 93       	push	r28
    4cea:	0f 92       	push	r0
    4cec:	cd b7       	in	r28, 0x3d	; 61
    4cee:	de b7       	in	r29, 0x3e	; 62
    4cf0:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,Turn);
    4cf2:	82 e0       	ldi	r24, 0x02	; 2
    4cf4:	66 e0       	ldi	r22, 0x06	; 6
    4cf6:	49 81       	ldd	r20, Y+1	; 0x01
    4cf8:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_writePin>
}
    4cfc:	0f 90       	pop	r0
    4cfe:	cf 91       	pop	r28
    4d00:	df 91       	pop	r29
    4d02:	08 95       	ret

00004d04 <SERV_s32Map>:
/* Return          : s32                 	      			          */
/**********************************************************************************/
sint32 SERV_s32Map(  sint32 Copy_s32InputMin  , sint32 Copy_s32InputMax
		, sint32 Copy_s32OutputMin , sint32 Copy_s32OutputMax
		, sint32 Copy_s32InputVal )
{
    4d04:	af 92       	push	r10
    4d06:	bf 92       	push	r11
    4d08:	cf 92       	push	r12
    4d0a:	df 92       	push	r13
    4d0c:	ef 92       	push	r14
    4d0e:	ff 92       	push	r15
    4d10:	0f 93       	push	r16
    4d12:	1f 93       	push	r17
    4d14:	df 93       	push	r29
    4d16:	cf 93       	push	r28
    4d18:	cd b7       	in	r28, 0x3d	; 61
    4d1a:	de b7       	in	r29, 0x3e	; 62
    4d1c:	68 97       	sbiw	r28, 0x18	; 24
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	69 87       	std	Y+9, r22	; 0x09
    4d2a:	7a 87       	std	Y+10, r23	; 0x0a
    4d2c:	8b 87       	std	Y+11, r24	; 0x0b
    4d2e:	9c 87       	std	Y+12, r25	; 0x0c
    4d30:	2d 87       	std	Y+13, r18	; 0x0d
    4d32:	3e 87       	std	Y+14, r19	; 0x0e
    4d34:	4f 87       	std	Y+15, r20	; 0x0f
    4d36:	58 8b       	std	Y+16, r21	; 0x10
    4d38:	e9 8a       	std	Y+17, r14	; 0x11
    4d3a:	fa 8a       	std	Y+18, r15	; 0x12
    4d3c:	0b 8b       	std	Y+19, r16	; 0x13
    4d3e:	1c 8b       	std	Y+20, r17	; 0x14
    4d40:	ad 8a       	std	Y+21, r10	; 0x15
    4d42:	be 8a       	std	Y+22, r11	; 0x16
    4d44:	cf 8a       	std	Y+23, r12	; 0x17
    4d46:	d8 8e       	std	Y+24, r13	; 0x18
	/* Local Variables Definitions */
	sint32 Local_s32MappingResult; /* Holds the mapping result */
	float32 Local_f32Slope = (float32)(Copy_s32OutputMax - Copy_s32OutputMin)/(float32)(Copy_s32InputMax - Copy_s32InputMin); /* Slope */
    4d48:	2d 89       	ldd	r18, Y+21	; 0x15
    4d4a:	3e 89       	ldd	r19, Y+22	; 0x16
    4d4c:	4f 89       	ldd	r20, Y+23	; 0x17
    4d4e:	58 8d       	ldd	r21, Y+24	; 0x18
    4d50:	89 89       	ldd	r24, Y+17	; 0x11
    4d52:	9a 89       	ldd	r25, Y+18	; 0x12
    4d54:	ab 89       	ldd	r26, Y+19	; 0x13
    4d56:	bc 89       	ldd	r27, Y+20	; 0x14
    4d58:	59 01       	movw	r10, r18
    4d5a:	6a 01       	movw	r12, r20
    4d5c:	a8 1a       	sub	r10, r24
    4d5e:	b9 0a       	sbc	r11, r25
    4d60:	ca 0a       	sbc	r12, r26
    4d62:	db 0a       	sbc	r13, r27
    4d64:	d6 01       	movw	r26, r12
    4d66:	c5 01       	movw	r24, r10
    4d68:	bc 01       	movw	r22, r24
    4d6a:	cd 01       	movw	r24, r26
    4d6c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4d70:	7b 01       	movw	r14, r22
    4d72:	8c 01       	movw	r16, r24
    4d74:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d76:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d78:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d7a:	58 89       	ldd	r21, Y+16	; 0x10
    4d7c:	89 85       	ldd	r24, Y+9	; 0x09
    4d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d80:	ab 85       	ldd	r26, Y+11	; 0x0b
    4d82:	bc 85       	ldd	r27, Y+12	; 0x0c
    4d84:	59 01       	movw	r10, r18
    4d86:	6a 01       	movw	r12, r20
    4d88:	a8 1a       	sub	r10, r24
    4d8a:	b9 0a       	sbc	r11, r25
    4d8c:	ca 0a       	sbc	r12, r26
    4d8e:	db 0a       	sbc	r13, r27
    4d90:	d6 01       	movw	r26, r12
    4d92:	c5 01       	movw	r24, r10
    4d94:	bc 01       	movw	r22, r24
    4d96:	cd 01       	movw	r24, r26
    4d98:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4d9c:	9b 01       	movw	r18, r22
    4d9e:	ac 01       	movw	r20, r24
    4da0:	c8 01       	movw	r24, r16
    4da2:	b7 01       	movw	r22, r14
    4da4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	89 83       	std	Y+1, r24	; 0x01
    4dae:	9a 83       	std	Y+2, r25	; 0x02
    4db0:	ab 83       	std	Y+3, r26	; 0x03
    4db2:	bc 83       	std	Y+4, r27	; 0x04

	/* Get Mapping Result From the Following Straight-Line Equation */
	Local_s32MappingResult = (Local_f32Slope * (float32)Copy_s32InputVal) - (Local_f32Slope * (float32)Copy_s32InputMin) + (float32)Copy_s32OutputMin;
    4db4:	6d a1       	ldd	r22, Y+37	; 0x25
    4db6:	7e a1       	ldd	r23, Y+38	; 0x26
    4db8:	8f a1       	ldd	r24, Y+39	; 0x27
    4dba:	98 a5       	ldd	r25, Y+40	; 0x28
    4dbc:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	bc 01       	movw	r22, r24
    4dc6:	cd 01       	movw	r24, r26
    4dc8:	29 81       	ldd	r18, Y+1	; 0x01
    4dca:	3a 81       	ldd	r19, Y+2	; 0x02
    4dcc:	4b 81       	ldd	r20, Y+3	; 0x03
    4dce:	5c 81       	ldd	r21, Y+4	; 0x04
    4dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	7c 01       	movw	r14, r24
    4dda:	8d 01       	movw	r16, r26
    4ddc:	69 85       	ldd	r22, Y+9	; 0x09
    4dde:	7a 85       	ldd	r23, Y+10	; 0x0a
    4de0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4de2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4de4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	bc 01       	movw	r22, r24
    4dee:	cd 01       	movw	r24, r26
    4df0:	29 81       	ldd	r18, Y+1	; 0x01
    4df2:	3a 81       	ldd	r19, Y+2	; 0x02
    4df4:	4b 81       	ldd	r20, Y+3	; 0x03
    4df6:	5c 81       	ldd	r21, Y+4	; 0x04
    4df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dfc:	dc 01       	movw	r26, r24
    4dfe:	cb 01       	movw	r24, r22
    4e00:	9c 01       	movw	r18, r24
    4e02:	ad 01       	movw	r20, r26
    4e04:	c8 01       	movw	r24, r16
    4e06:	b7 01       	movw	r22, r14
    4e08:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	cb 01       	movw	r24, r22
    4e10:	7c 01       	movw	r14, r24
    4e12:	8d 01       	movw	r16, r26
    4e14:	69 89       	ldd	r22, Y+17	; 0x11
    4e16:	7a 89       	ldd	r23, Y+18	; 0x12
    4e18:	8b 89       	ldd	r24, Y+19	; 0x13
    4e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e1c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4e20:	9b 01       	movw	r18, r22
    4e22:	ac 01       	movw	r20, r24
    4e24:	c8 01       	movw	r24, r16
    4e26:	b7 01       	movw	r22, r14
    4e28:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	bc 01       	movw	r22, r24
    4e32:	cd 01       	movw	r24, r26
    4e34:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	cb 01       	movw	r24, r22
    4e3c:	8d 83       	std	Y+5, r24	; 0x05
    4e3e:	9e 83       	std	Y+6, r25	; 0x06
    4e40:	af 83       	std	Y+7, r26	; 0x07
    4e42:	b8 87       	std	Y+8, r27	; 0x08

	return Local_s32MappingResult;
    4e44:	8d 81       	ldd	r24, Y+5	; 0x05
    4e46:	9e 81       	ldd	r25, Y+6	; 0x06
    4e48:	af 81       	ldd	r26, Y+7	; 0x07
    4e4a:	b8 85       	ldd	r27, Y+8	; 0x08
}
    4e4c:	bc 01       	movw	r22, r24
    4e4e:	cd 01       	movw	r24, r26
    4e50:	68 96       	adiw	r28, 0x18	; 24
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	cf 91       	pop	r28
    4e5e:	df 91       	pop	r29
    4e60:	1f 91       	pop	r17
    4e62:	0f 91       	pop	r16
    4e64:	ff 90       	pop	r15
    4e66:	ef 90       	pop	r14
    4e68:	df 90       	pop	r13
    4e6a:	cf 90       	pop	r12
    4e6c:	bf 90       	pop	r11
    4e6e:	af 90       	pop	r10
    4e70:	08 95       	ret

00004e72 <SERV_f32Mod>:
/* Description     : Function to get modulus of two numbers			  */
/* Input Arguments : f32 Copy_f32Num1 , f32 Copy_f32Num2		          */
/* Return          : f32						          */
/**********************************************************************************/
float32 SERV_f32Mod(float32 Copy_f32Num1 , float32 Copy_f32Num2)
{
    4e72:	df 93       	push	r29
    4e74:	cf 93       	push	r28
    4e76:	cd b7       	in	r28, 0x3d	; 61
    4e78:	de b7       	in	r29, 0x3e	; 62
    4e7a:	2c 97       	sbiw	r28, 0x0c	; 12
    4e7c:	0f b6       	in	r0, 0x3f	; 63
    4e7e:	f8 94       	cli
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	cd bf       	out	0x3d, r28	; 61
    4e86:	6d 83       	std	Y+5, r22	; 0x05
    4e88:	7e 83       	std	Y+6, r23	; 0x06
    4e8a:	8f 83       	std	Y+7, r24	; 0x07
    4e8c:	98 87       	std	Y+8, r25	; 0x08
    4e8e:	29 87       	std	Y+9, r18	; 0x09
    4e90:	3a 87       	std	Y+10, r19	; 0x0a
    4e92:	4b 87       	std	Y+11, r20	; 0x0b
    4e94:	5c 87       	std	Y+12, r21	; 0x0c
	/* Local Variables Definitions */
	float32 Local_f32Result;  		 	/* A variable to hold the result */

	/* Calculate the modulus */
        Local_f32Result = Copy_f32Num1 - ((uint32)(Copy_f32Num1/Copy_f32Num2) * Copy_f32Num2);
    4e96:	6d 81       	ldd	r22, Y+5	; 0x05
    4e98:	7e 81       	ldd	r23, Y+6	; 0x06
    4e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4e9c:	98 85       	ldd	r25, Y+8	; 0x08
    4e9e:	29 85       	ldd	r18, Y+9	; 0x09
    4ea0:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ea2:	4b 85       	ldd	r20, Y+11	; 0x0b
    4ea4:	5c 85       	ldd	r21, Y+12	; 0x0c
    4ea6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	bc 01       	movw	r22, r24
    4eb0:	cd 01       	movw	r24, r26
    4eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	bc 01       	movw	r22, r24
    4ebc:	cd 01       	movw	r24, r26
    4ebe:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	bc 01       	movw	r22, r24
    4ec8:	cd 01       	movw	r24, r26
    4eca:	29 85       	ldd	r18, Y+9	; 0x09
    4ecc:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ece:	4b 85       	ldd	r20, Y+11	; 0x0b
    4ed0:	5c 85       	ldd	r21, Y+12	; 0x0c
    4ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	9c 01       	movw	r18, r24
    4edc:	ad 01       	movw	r20, r26
    4ede:	6d 81       	ldd	r22, Y+5	; 0x05
    4ee0:	7e 81       	ldd	r23, Y+6	; 0x06
    4ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    4ee4:	98 85       	ldd	r25, Y+8	; 0x08
    4ee6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	89 83       	std	Y+1, r24	; 0x01
    4ef0:	9a 83       	std	Y+2, r25	; 0x02
    4ef2:	ab 83       	std	Y+3, r26	; 0x03
    4ef4:	bc 83       	std	Y+4, r27	; 0x04

	return Local_f32Result;
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    4efa:	ab 81       	ldd	r26, Y+3	; 0x03
    4efc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4efe:	bc 01       	movw	r22, r24
    4f00:	cd 01       	movw	r24, r26
    4f02:	2c 96       	adiw	r28, 0x0c	; 12
    4f04:	0f b6       	in	r0, 0x3f	; 63
    4f06:	f8 94       	cli
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	0f be       	out	0x3f, r0	; 63
    4f0c:	cd bf       	out	0x3d, r28	; 61
    4f0e:	cf 91       	pop	r28
    4f10:	df 91       	pop	r29
    4f12:	08 95       	ret

00004f14 <SERV_u32CeilDev>:
/* Description     : Function to get ceil of the result of two dividend numbers   */
/* Input Arguments : f32 Copy_f32Num1 , f32 Copy_f32Num2		          */
/* Return          : u32  	        	      			          */
/**********************************************************************************/
uint32 SERV_u32CeilDev(float32 Copy_f32Num1 , float32 Copy_f32Num2)
{
    4f14:	df 93       	push	r29
    4f16:	cf 93       	push	r28
    4f18:	cd b7       	in	r28, 0x3d	; 61
    4f1a:	de b7       	in	r29, 0x3e	; 62
    4f1c:	64 97       	sbiw	r28, 0x14	; 20
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	f8 94       	cli
    4f22:	de bf       	out	0x3e, r29	; 62
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	6d 83       	std	Y+5, r22	; 0x05
    4f2a:	7e 83       	std	Y+6, r23	; 0x06
    4f2c:	8f 83       	std	Y+7, r24	; 0x07
    4f2e:	98 87       	std	Y+8, r25	; 0x08
    4f30:	29 87       	std	Y+9, r18	; 0x09
    4f32:	3a 87       	std	Y+10, r19	; 0x0a
    4f34:	4b 87       	std	Y+11, r20	; 0x0b
    4f36:	5c 87       	std	Y+12, r21	; 0x0c
	/* Local Variables Definitions */
	uint32 Local_u32Result;			/* A variable to hold result after ceiling */

	/* Calculate result then ceil it */
	Local_u32Result = (uint32)(Copy_f32Num1/Copy_f32Num2) + (SERV_f32Mod(Copy_f32Num1,Copy_f32Num2)!= 0);
    4f38:	6d 81       	ldd	r22, Y+5	; 0x05
    4f3a:	7e 81       	ldd	r23, Y+6	; 0x06
    4f3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f3e:	98 85       	ldd	r25, Y+8	; 0x08
    4f40:	29 85       	ldd	r18, Y+9	; 0x09
    4f42:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f44:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f46:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	bc 01       	movw	r22, r24
    4f52:	cd 01       	movw	r24, r26
    4f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f58:	69 8b       	std	Y+17, r22	; 0x11
    4f5a:	7a 8b       	std	Y+18, r23	; 0x12
    4f5c:	8b 8b       	std	Y+19, r24	; 0x13
    4f5e:	9c 8b       	std	Y+20, r25	; 0x14
    4f60:	8d 81       	ldd	r24, Y+5	; 0x05
    4f62:	9e 81       	ldd	r25, Y+6	; 0x06
    4f64:	af 81       	ldd	r26, Y+7	; 0x07
    4f66:	b8 85       	ldd	r27, Y+8	; 0x08
    4f68:	29 85       	ldd	r18, Y+9	; 0x09
    4f6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f6c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f6e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f70:	bc 01       	movw	r22, r24
    4f72:	cd 01       	movw	r24, r26
    4f74:	0e 94 39 27 	call	0x4e72	; 0x4e72 <SERV_f32Mod>
    4f78:	dc 01       	movw	r26, r24
    4f7a:	cb 01       	movw	r24, r22
    4f7c:	1d 86       	std	Y+13, r1	; 0x0d
    4f7e:	1e 86       	std	Y+14, r1	; 0x0e
    4f80:	1f 86       	std	Y+15, r1	; 0x0f
    4f82:	18 8a       	std	Y+16, r1	; 0x10
    4f84:	bc 01       	movw	r22, r24
    4f86:	cd 01       	movw	r24, r26
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	40 e0       	ldi	r20, 0x00	; 0
    4f8e:	50 e0       	ldi	r21, 0x00	; 0
    4f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    4f94:	88 23       	and	r24, r24
    4f96:	41 f0       	breq	.+16     	; 0x4fa8 <SERV_u32CeilDev+0x94>
    4f98:	21 e0       	ldi	r18, 0x01	; 1
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	40 e0       	ldi	r20, 0x00	; 0
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	2d 87       	std	Y+13, r18	; 0x0d
    4fa2:	3e 87       	std	Y+14, r19	; 0x0e
    4fa4:	4f 87       	std	Y+15, r20	; 0x0f
    4fa6:	58 8b       	std	Y+16, r21	; 0x10
    4fa8:	89 89       	ldd	r24, Y+17	; 0x11
    4faa:	9a 89       	ldd	r25, Y+18	; 0x12
    4fac:	ab 89       	ldd	r26, Y+19	; 0x13
    4fae:	bc 89       	ldd	r27, Y+20	; 0x14
    4fb0:	2d 85       	ldd	r18, Y+13	; 0x0d
    4fb2:	3e 85       	ldd	r19, Y+14	; 0x0e
    4fb4:	4f 85       	ldd	r20, Y+15	; 0x0f
    4fb6:	58 89       	ldd	r21, Y+16	; 0x10
    4fb8:	82 0f       	add	r24, r18
    4fba:	93 1f       	adc	r25, r19
    4fbc:	a4 1f       	adc	r26, r20
    4fbe:	b5 1f       	adc	r27, r21
    4fc0:	89 83       	std	Y+1, r24	; 0x01
    4fc2:	9a 83       	std	Y+2, r25	; 0x02
    4fc4:	ab 83       	std	Y+3, r26	; 0x03
    4fc6:	bc 83       	std	Y+4, r27	; 0x04

	return Local_u32Result;
    4fc8:	89 81       	ldd	r24, Y+1	; 0x01
    4fca:	9a 81       	ldd	r25, Y+2	; 0x02
    4fcc:	ab 81       	ldd	r26, Y+3	; 0x03
    4fce:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4fd0:	bc 01       	movw	r22, r24
    4fd2:	cd 01       	movw	r24, r26
    4fd4:	64 96       	adiw	r28, 0x14	; 20
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	f8 94       	cli
    4fda:	de bf       	out	0x3e, r29	; 62
    4fdc:	0f be       	out	0x3f, r0	; 63
    4fde:	cd bf       	out	0x3d, r28	; 61
    4fe0:	cf 91       	pop	r28
    4fe2:	df 91       	pop	r29
    4fe4:	08 95       	ret

00004fe6 <SERV_u32Pow>:
/* Description     : Function to get the power of a number		          */
/* Input Arguments : u32 Copy_u32Base , u32 Copy_u32Power		          */
/* Return          : u32  	        	      			          */
/**********************************************************************************/
uint32 SERV_u32Pow(uint32 Copy_u32Base , uint32 Copy_u32Power)
{
    4fe6:	df 93       	push	r29
    4fe8:	cf 93       	push	r28
    4fea:	cd b7       	in	r28, 0x3d	; 61
    4fec:	de b7       	in	r29, 0x3e	; 62
    4fee:	2c 97       	sbiw	r28, 0x0c	; 12
    4ff0:	0f b6       	in	r0, 0x3f	; 63
    4ff2:	f8 94       	cli
    4ff4:	de bf       	out	0x3e, r29	; 62
    4ff6:	0f be       	out	0x3f, r0	; 63
    4ff8:	cd bf       	out	0x3d, r28	; 61
    4ffa:	6d 83       	std	Y+5, r22	; 0x05
    4ffc:	7e 83       	std	Y+6, r23	; 0x06
    4ffe:	8f 83       	std	Y+7, r24	; 0x07
    5000:	98 87       	std	Y+8, r25	; 0x08
    5002:	29 87       	std	Y+9, r18	; 0x09
    5004:	3a 87       	std	Y+10, r19	; 0x0a
    5006:	4b 87       	std	Y+11, r20	; 0x0b
    5008:	5c 87       	std	Y+12, r21	; 0x0c
	/* Local Variables Definitions */
	uint32 Local_u32Result ;              /* A variable to hold result of power process of passed number */

	/* Initialize Local_u32Result to be equal to 1 */
	Local_u32Result = 1;
    500a:	81 e0       	ldi	r24, 0x01	; 1
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	a0 e0       	ldi	r26, 0x00	; 0
    5010:	b0 e0       	ldi	r27, 0x00	; 0
    5012:	89 83       	std	Y+1, r24	; 0x01
    5014:	9a 83       	std	Y+2, r25	; 0x02
    5016:	ab 83       	std	Y+3, r26	; 0x03
    5018:	bc 83       	std	Y+4, r27	; 0x04

	/* Check if passed power value equal 0 or not */
	if(Copy_u32Power != 0)
    501a:	89 85       	ldd	r24, Y+9	; 0x09
    501c:	9a 85       	ldd	r25, Y+10	; 0x0a
    501e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5020:	bc 85       	ldd	r27, Y+12	; 0x0c
    5022:	00 97       	sbiw	r24, 0x00	; 0
    5024:	a1 05       	cpc	r26, r1
    5026:	b1 05       	cpc	r27, r1
    5028:	31 f1       	breq	.+76     	; 0x5076 <SERV_u32Pow+0x90>
    502a:	1d c0       	rjmp	.+58     	; 0x5066 <SERV_u32Pow+0x80>
	{
		/* Calculate the power of passed number */
		while(Copy_u32Power != 0)
		{
		    /* Decrease power value */
		    Copy_u32Power --;
    502c:	89 85       	ldd	r24, Y+9	; 0x09
    502e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5030:	ab 85       	ldd	r26, Y+11	; 0x0b
    5032:	bc 85       	ldd	r27, Y+12	; 0x0c
    5034:	01 97       	sbiw	r24, 0x01	; 1
    5036:	a1 09       	sbc	r26, r1
    5038:	b1 09       	sbc	r27, r1
    503a:	89 87       	std	Y+9, r24	; 0x09
    503c:	9a 87       	std	Y+10, r25	; 0x0a
    503e:	ab 87       	std	Y+11, r26	; 0x0b
    5040:	bc 87       	std	Y+12, r27	; 0x0c

		    /* Get the result */
		    Local_u32Result *= Copy_u32Base;
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	9a 81       	ldd	r25, Y+2	; 0x02
    5046:	ab 81       	ldd	r26, Y+3	; 0x03
    5048:	bc 81       	ldd	r27, Y+4	; 0x04
    504a:	2d 81       	ldd	r18, Y+5	; 0x05
    504c:	3e 81       	ldd	r19, Y+6	; 0x06
    504e:	4f 81       	ldd	r20, Y+7	; 0x07
    5050:	58 85       	ldd	r21, Y+8	; 0x08
    5052:	bc 01       	movw	r22, r24
    5054:	cd 01       	movw	r24, r26
    5056:	0e 94 5d 29 	call	0x52ba	; 0x52ba <__mulsi3>
    505a:	dc 01       	movw	r26, r24
    505c:	cb 01       	movw	r24, r22
    505e:	89 83       	std	Y+1, r24	; 0x01
    5060:	9a 83       	std	Y+2, r25	; 0x02
    5062:	ab 83       	std	Y+3, r26	; 0x03
    5064:	bc 83       	std	Y+4, r27	; 0x04

	/* Check if passed power value equal 0 or not */
	if(Copy_u32Power != 0)
	{
		/* Calculate the power of passed number */
		while(Copy_u32Power != 0)
    5066:	89 85       	ldd	r24, Y+9	; 0x09
    5068:	9a 85       	ldd	r25, Y+10	; 0x0a
    506a:	ab 85       	ldd	r26, Y+11	; 0x0b
    506c:	bc 85       	ldd	r27, Y+12	; 0x0c
    506e:	00 97       	sbiw	r24, 0x00	; 0
    5070:	a1 05       	cpc	r26, r1
    5072:	b1 05       	cpc	r27, r1
    5074:	d9 f6       	brne	.-74     	; 0x502c <SERV_u32Pow+0x46>
		    /* Get the result */
		    Local_u32Result *= Copy_u32Base;
		}
	}

	return Local_u32Result;
    5076:	89 81       	ldd	r24, Y+1	; 0x01
    5078:	9a 81       	ldd	r25, Y+2	; 0x02
    507a:	ab 81       	ldd	r26, Y+3	; 0x03
    507c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    507e:	bc 01       	movw	r22, r24
    5080:	cd 01       	movw	r24, r26
    5082:	2c 96       	adiw	r28, 0x0c	; 12
    5084:	0f b6       	in	r0, 0x3f	; 63
    5086:	f8 94       	cli
    5088:	de bf       	out	0x3e, r29	; 62
    508a:	0f be       	out	0x3f, r0	; 63
    508c:	cd bf       	out	0x3d, r28	; 61
    508e:	cf 91       	pop	r28
    5090:	df 91       	pop	r29
    5092:	08 95       	ret

00005094 <main>:
 */

#include "RTE/rte.h"
#include <util/delay.h>

int main(){
    5094:	df 93       	push	r29
    5096:	cf 93       	push	r28
    5098:	cd b7       	in	r28, 0x3d	; 61
    509a:	de b7       	in	r29, 0x3e	; 62
    509c:	6e 97       	sbiw	r28, 0x1e	; 30
    509e:	0f b6       	in	r0, 0x3f	; 63
    50a0:	f8 94       	cli
    50a2:	de bf       	out	0x3e, r29	; 62
    50a4:	0f be       	out	0x3f, r0	; 63
    50a6:	cd bf       	out	0x3d, r28	; 61
	/* variable to receive the data that should be saved in the    *
	 * memory.                                                     */
	uint8 receiveBuffer = '5';
    50a8:	85 e3       	ldi	r24, 0x35	; 53
    50aa:	8e 8f       	std	Y+30, r24	; 0x1e
	/* variable to receive whether to save data or get it from the memory. */
	uint8 saveOrGet;
	/* initialize the communication module */
	RTE_COM_slaveInit();
    50ac:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <COM_slaveInit>

	while(TRUE){
		/* receiving whether to save the data or get it from the memory. */
		saveOrGet = RTE_COM_receive();
    50b0:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <COM_receive>
    50b4:	8d 8f       	std	Y+29, r24	; 0x1d
	/* if save: */
		if(saveOrGet == SAVE){
    50b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50b8:	81 30       	cpi	r24, 0x01	; 1
    50ba:	09 f0       	breq	.+2      	; 0x50be <main+0x2a>
    50bc:	7c c0       	rjmp	.+248    	; 0x51b6 <main+0x122>
			/* receiving the data to be saved in the memory*/
			receiveBuffer = RTE_COM_receive();
    50be:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <COM_receive>
    50c2:	8e 8f       	std	Y+30, r24	; 0x1e
			/* Write Data to EEPROM */
			RTE_EEPROM_vidSendDataByte(0x0000,receiveBuffer);
    50c4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    50c6:	80 e0       	ldi	r24, 0x00	; 0
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	62 2f       	mov	r22, r18
    50cc:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <EEPROM_vidSendDataByte>
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	a0 e2       	ldi	r26, 0x20	; 32
    50d6:	b1 e4       	ldi	r27, 0x41	; 65
    50d8:	89 8f       	std	Y+25, r24	; 0x19
    50da:	9a 8f       	std	Y+26, r25	; 0x1a
    50dc:	ab 8f       	std	Y+27, r26	; 0x1b
    50de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50e0:	69 8d       	ldd	r22, Y+25	; 0x19
    50e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	4a e7       	ldi	r20, 0x7A	; 122
    50ee:	55 e4       	ldi	r21, 0x45	; 69
    50f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50f4:	dc 01       	movw	r26, r24
    50f6:	cb 01       	movw	r24, r22
    50f8:	8d 8b       	std	Y+21, r24	; 0x15
    50fa:	9e 8b       	std	Y+22, r25	; 0x16
    50fc:	af 8b       	std	Y+23, r26	; 0x17
    50fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5100:	6d 89       	ldd	r22, Y+21	; 0x15
    5102:	7e 89       	ldd	r23, Y+22	; 0x16
    5104:	8f 89       	ldd	r24, Y+23	; 0x17
    5106:	98 8d       	ldd	r25, Y+24	; 0x18
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	40 e8       	ldi	r20, 0x80	; 128
    510e:	5f e3       	ldi	r21, 0x3F	; 63
    5110:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5114:	88 23       	and	r24, r24
    5116:	2c f4       	brge	.+10     	; 0x5122 <main+0x8e>
		__ticks = 1;
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	9c 8b       	std	Y+20, r25	; 0x14
    511e:	8b 8b       	std	Y+19, r24	; 0x13
    5120:	3f c0       	rjmp	.+126    	; 0x51a0 <main+0x10c>
	else if (__tmp > 65535)
    5122:	6d 89       	ldd	r22, Y+21	; 0x15
    5124:	7e 89       	ldd	r23, Y+22	; 0x16
    5126:	8f 89       	ldd	r24, Y+23	; 0x17
    5128:	98 8d       	ldd	r25, Y+24	; 0x18
    512a:	20 e0       	ldi	r18, 0x00	; 0
    512c:	3f ef       	ldi	r19, 0xFF	; 255
    512e:	4f e7       	ldi	r20, 0x7F	; 127
    5130:	57 e4       	ldi	r21, 0x47	; 71
    5132:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5136:	18 16       	cp	r1, r24
    5138:	4c f5       	brge	.+82     	; 0x518c <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    513a:	69 8d       	ldd	r22, Y+25	; 0x19
    513c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    513e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5142:	20 e0       	ldi	r18, 0x00	; 0
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	40 e2       	ldi	r20, 0x20	; 32
    5148:	51 e4       	ldi	r21, 0x41	; 65
    514a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	bc 01       	movw	r22, r24
    5154:	cd 01       	movw	r24, r26
    5156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    515a:	dc 01       	movw	r26, r24
    515c:	cb 01       	movw	r24, r22
    515e:	9c 8b       	std	Y+20, r25	; 0x14
    5160:	8b 8b       	std	Y+19, r24	; 0x13
    5162:	0f c0       	rjmp	.+30     	; 0x5182 <main+0xee>
    5164:	80 e9       	ldi	r24, 0x90	; 144
    5166:	91 e0       	ldi	r25, 0x01	; 1
    5168:	9a 8b       	std	Y+18, r25	; 0x12
    516a:	89 8b       	std	Y+17, r24	; 0x11
    516c:	89 89       	ldd	r24, Y+17	; 0x11
    516e:	9a 89       	ldd	r25, Y+18	; 0x12
    5170:	01 97       	sbiw	r24, 0x01	; 1
    5172:	f1 f7       	brne	.-4      	; 0x5170 <main+0xdc>
    5174:	9a 8b       	std	Y+18, r25	; 0x12
    5176:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5178:	8b 89       	ldd	r24, Y+19	; 0x13
    517a:	9c 89       	ldd	r25, Y+20	; 0x14
    517c:	01 97       	sbiw	r24, 0x01	; 1
    517e:	9c 8b       	std	Y+20, r25	; 0x14
    5180:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5182:	8b 89       	ldd	r24, Y+19	; 0x13
    5184:	9c 89       	ldd	r25, Y+20	; 0x14
    5186:	00 97       	sbiw	r24, 0x00	; 0
    5188:	69 f7       	brne	.-38     	; 0x5164 <main+0xd0>
    518a:	92 cf       	rjmp	.-220    	; 0x50b0 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    518c:	6d 89       	ldd	r22, Y+21	; 0x15
    518e:	7e 89       	ldd	r23, Y+22	; 0x16
    5190:	8f 89       	ldd	r24, Y+23	; 0x17
    5192:	98 8d       	ldd	r25, Y+24	; 0x18
    5194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	9c 8b       	std	Y+20, r25	; 0x14
    519e:	8b 8b       	std	Y+19, r24	; 0x13
    51a0:	8b 89       	ldd	r24, Y+19	; 0x13
    51a2:	9c 89       	ldd	r25, Y+20	; 0x14
    51a4:	98 8b       	std	Y+16, r25	; 0x10
    51a6:	8f 87       	std	Y+15, r24	; 0x0f
    51a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    51aa:	98 89       	ldd	r25, Y+16	; 0x10
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	f1 f7       	brne	.-4      	; 0x51ac <main+0x118>
    51b0:	98 8b       	std	Y+16, r25	; 0x10
    51b2:	8f 87       	std	Y+15, r24	; 0x0f
    51b4:	7d cf       	rjmp	.-262    	; 0x50b0 <main+0x1c>
			/* wait for 10 ms till the EEPROM finishes writing */
			_delay_ms(10);
	/* if get: */
		} else if(saveOrGet == GET){
    51b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51b8:	82 30       	cpi	r24, 0x02	; 2
    51ba:	09 f0       	breq	.+2      	; 0x51be <main+0x12a>
    51bc:	79 cf       	rjmp	.-270    	; 0x50b0 <main+0x1c>
			/* Read Data from EEPROM that is at the address 0x0000 */
			RTE_EEPROM_vidReadDataByte(0x0000,&receiveBuffer);
    51be:	9e 01       	movw	r18, r28
    51c0:	22 5e       	subi	r18, 0xE2	; 226
    51c2:	3f 4f       	sbci	r19, 0xFF	; 255
    51c4:	80 e0       	ldi	r24, 0x00	; 0
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	b9 01       	movw	r22, r18
    51ca:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <EEPROM_vidReadDataByte>
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	a0 e2       	ldi	r26, 0x20	; 32
    51d4:	b1 e4       	ldi	r27, 0x41	; 65
    51d6:	8b 87       	std	Y+11, r24	; 0x0b
    51d8:	9c 87       	std	Y+12, r25	; 0x0c
    51da:	ad 87       	std	Y+13, r26	; 0x0d
    51dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51de:	6b 85       	ldd	r22, Y+11	; 0x0b
    51e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    51e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    51e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	4a e7       	ldi	r20, 0x7A	; 122
    51ec:	55 e4       	ldi	r21, 0x45	; 69
    51ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	8f 83       	std	Y+7, r24	; 0x07
    51f8:	98 87       	std	Y+8, r25	; 0x08
    51fa:	a9 87       	std	Y+9, r26	; 0x09
    51fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5200:	78 85       	ldd	r23, Y+8	; 0x08
    5202:	89 85       	ldd	r24, Y+9	; 0x09
    5204:	9a 85       	ldd	r25, Y+10	; 0x0a
    5206:	20 e0       	ldi	r18, 0x00	; 0
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	40 e8       	ldi	r20, 0x80	; 128
    520c:	5f e3       	ldi	r21, 0x3F	; 63
    520e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5212:	88 23       	and	r24, r24
    5214:	2c f4       	brge	.+10     	; 0x5220 <main+0x18c>
		__ticks = 1;
    5216:	81 e0       	ldi	r24, 0x01	; 1
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	9e 83       	std	Y+6, r25	; 0x06
    521c:	8d 83       	std	Y+5, r24	; 0x05
    521e:	3f c0       	rjmp	.+126    	; 0x529e <main+0x20a>
	else if (__tmp > 65535)
    5220:	6f 81       	ldd	r22, Y+7	; 0x07
    5222:	78 85       	ldd	r23, Y+8	; 0x08
    5224:	89 85       	ldd	r24, Y+9	; 0x09
    5226:	9a 85       	ldd	r25, Y+10	; 0x0a
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	3f ef       	ldi	r19, 0xFF	; 255
    522c:	4f e7       	ldi	r20, 0x7F	; 127
    522e:	57 e4       	ldi	r21, 0x47	; 71
    5230:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5234:	18 16       	cp	r1, r24
    5236:	4c f5       	brge	.+82     	; 0x528a <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5238:	6b 85       	ldd	r22, Y+11	; 0x0b
    523a:	7c 85       	ldd	r23, Y+12	; 0x0c
    523c:	8d 85       	ldd	r24, Y+13	; 0x0d
    523e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	40 e2       	ldi	r20, 0x20	; 32
    5246:	51 e4       	ldi	r21, 0x41	; 65
    5248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	bc 01       	movw	r22, r24
    5252:	cd 01       	movw	r24, r26
    5254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	9e 83       	std	Y+6, r25	; 0x06
    525e:	8d 83       	std	Y+5, r24	; 0x05
    5260:	0f c0       	rjmp	.+30     	; 0x5280 <main+0x1ec>
    5262:	80 e9       	ldi	r24, 0x90	; 144
    5264:	91 e0       	ldi	r25, 0x01	; 1
    5266:	9c 83       	std	Y+4, r25	; 0x04
    5268:	8b 83       	std	Y+3, r24	; 0x03
    526a:	8b 81       	ldd	r24, Y+3	; 0x03
    526c:	9c 81       	ldd	r25, Y+4	; 0x04
    526e:	01 97       	sbiw	r24, 0x01	; 1
    5270:	f1 f7       	brne	.-4      	; 0x526e <main+0x1da>
    5272:	9c 83       	std	Y+4, r25	; 0x04
    5274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5276:	8d 81       	ldd	r24, Y+5	; 0x05
    5278:	9e 81       	ldd	r25, Y+6	; 0x06
    527a:	01 97       	sbiw	r24, 0x01	; 1
    527c:	9e 83       	std	Y+6, r25	; 0x06
    527e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5280:	8d 81       	ldd	r24, Y+5	; 0x05
    5282:	9e 81       	ldd	r25, Y+6	; 0x06
    5284:	00 97       	sbiw	r24, 0x00	; 0
    5286:	69 f7       	brne	.-38     	; 0x5262 <main+0x1ce>
    5288:	14 c0       	rjmp	.+40     	; 0x52b2 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    528a:	6f 81       	ldd	r22, Y+7	; 0x07
    528c:	78 85       	ldd	r23, Y+8	; 0x08
    528e:	89 85       	ldd	r24, Y+9	; 0x09
    5290:	9a 85       	ldd	r25, Y+10	; 0x0a
    5292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22
    529a:	9e 83       	std	Y+6, r25	; 0x06
    529c:	8d 83       	std	Y+5, r24	; 0x05
    529e:	8d 81       	ldd	r24, Y+5	; 0x05
    52a0:	9e 81       	ldd	r25, Y+6	; 0x06
    52a2:	9a 83       	std	Y+2, r25	; 0x02
    52a4:	89 83       	std	Y+1, r24	; 0x01
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	9a 81       	ldd	r25, Y+2	; 0x02
    52aa:	01 97       	sbiw	r24, 0x01	; 1
    52ac:	f1 f7       	brne	.-4      	; 0x52aa <main+0x216>
    52ae:	9a 83       	std	Y+2, r25	; 0x02
    52b0:	89 83       	std	Y+1, r24	; 0x01
			/* waiting till the EEPROM finishes reading */
			_delay_ms(10);
			/* sending the data that is read from the EEPROM through *
			 * SPI to the master ECU.                                */
			RTE_COM_send(receiveBuffer);
    52b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52b4:	0e 94 79 25 	call	0x4af2	; 0x4af2 <COM_send>
    52b8:	fb ce       	rjmp	.-522    	; 0x50b0 <main+0x1c>

000052ba <__mulsi3>:
    52ba:	62 9f       	mul	r22, r18
    52bc:	d0 01       	movw	r26, r0
    52be:	73 9f       	mul	r23, r19
    52c0:	f0 01       	movw	r30, r0
    52c2:	82 9f       	mul	r24, r18
    52c4:	e0 0d       	add	r30, r0
    52c6:	f1 1d       	adc	r31, r1
    52c8:	64 9f       	mul	r22, r20
    52ca:	e0 0d       	add	r30, r0
    52cc:	f1 1d       	adc	r31, r1
    52ce:	92 9f       	mul	r25, r18
    52d0:	f0 0d       	add	r31, r0
    52d2:	83 9f       	mul	r24, r19
    52d4:	f0 0d       	add	r31, r0
    52d6:	74 9f       	mul	r23, r20
    52d8:	f0 0d       	add	r31, r0
    52da:	65 9f       	mul	r22, r21
    52dc:	f0 0d       	add	r31, r0
    52de:	99 27       	eor	r25, r25
    52e0:	72 9f       	mul	r23, r18
    52e2:	b0 0d       	add	r27, r0
    52e4:	e1 1d       	adc	r30, r1
    52e6:	f9 1f       	adc	r31, r25
    52e8:	63 9f       	mul	r22, r19
    52ea:	b0 0d       	add	r27, r0
    52ec:	e1 1d       	adc	r30, r1
    52ee:	f9 1f       	adc	r31, r25
    52f0:	bd 01       	movw	r22, r26
    52f2:	cf 01       	movw	r24, r30
    52f4:	11 24       	eor	r1, r1
    52f6:	08 95       	ret

000052f8 <__udivmodsi4>:
    52f8:	a1 e2       	ldi	r26, 0x21	; 33
    52fa:	1a 2e       	mov	r1, r26
    52fc:	aa 1b       	sub	r26, r26
    52fe:	bb 1b       	sub	r27, r27
    5300:	fd 01       	movw	r30, r26
    5302:	0d c0       	rjmp	.+26     	; 0x531e <__udivmodsi4_ep>

00005304 <__udivmodsi4_loop>:
    5304:	aa 1f       	adc	r26, r26
    5306:	bb 1f       	adc	r27, r27
    5308:	ee 1f       	adc	r30, r30
    530a:	ff 1f       	adc	r31, r31
    530c:	a2 17       	cp	r26, r18
    530e:	b3 07       	cpc	r27, r19
    5310:	e4 07       	cpc	r30, r20
    5312:	f5 07       	cpc	r31, r21
    5314:	20 f0       	brcs	.+8      	; 0x531e <__udivmodsi4_ep>
    5316:	a2 1b       	sub	r26, r18
    5318:	b3 0b       	sbc	r27, r19
    531a:	e4 0b       	sbc	r30, r20
    531c:	f5 0b       	sbc	r31, r21

0000531e <__udivmodsi4_ep>:
    531e:	66 1f       	adc	r22, r22
    5320:	77 1f       	adc	r23, r23
    5322:	88 1f       	adc	r24, r24
    5324:	99 1f       	adc	r25, r25
    5326:	1a 94       	dec	r1
    5328:	69 f7       	brne	.-38     	; 0x5304 <__udivmodsi4_loop>
    532a:	60 95       	com	r22
    532c:	70 95       	com	r23
    532e:	80 95       	com	r24
    5330:	90 95       	com	r25
    5332:	9b 01       	movw	r18, r22
    5334:	ac 01       	movw	r20, r24
    5336:	bd 01       	movw	r22, r26
    5338:	cf 01       	movw	r24, r30
    533a:	08 95       	ret

0000533c <__prologue_saves__>:
    533c:	2f 92       	push	r2
    533e:	3f 92       	push	r3
    5340:	4f 92       	push	r4
    5342:	5f 92       	push	r5
    5344:	6f 92       	push	r6
    5346:	7f 92       	push	r7
    5348:	8f 92       	push	r8
    534a:	9f 92       	push	r9
    534c:	af 92       	push	r10
    534e:	bf 92       	push	r11
    5350:	cf 92       	push	r12
    5352:	df 92       	push	r13
    5354:	ef 92       	push	r14
    5356:	ff 92       	push	r15
    5358:	0f 93       	push	r16
    535a:	1f 93       	push	r17
    535c:	cf 93       	push	r28
    535e:	df 93       	push	r29
    5360:	cd b7       	in	r28, 0x3d	; 61
    5362:	de b7       	in	r29, 0x3e	; 62
    5364:	ca 1b       	sub	r28, r26
    5366:	db 0b       	sbc	r29, r27
    5368:	0f b6       	in	r0, 0x3f	; 63
    536a:	f8 94       	cli
    536c:	de bf       	out	0x3e, r29	; 62
    536e:	0f be       	out	0x3f, r0	; 63
    5370:	cd bf       	out	0x3d, r28	; 61
    5372:	09 94       	ijmp

00005374 <__epilogue_restores__>:
    5374:	2a 88       	ldd	r2, Y+18	; 0x12
    5376:	39 88       	ldd	r3, Y+17	; 0x11
    5378:	48 88       	ldd	r4, Y+16	; 0x10
    537a:	5f 84       	ldd	r5, Y+15	; 0x0f
    537c:	6e 84       	ldd	r6, Y+14	; 0x0e
    537e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5380:	8c 84       	ldd	r8, Y+12	; 0x0c
    5382:	9b 84       	ldd	r9, Y+11	; 0x0b
    5384:	aa 84       	ldd	r10, Y+10	; 0x0a
    5386:	b9 84       	ldd	r11, Y+9	; 0x09
    5388:	c8 84       	ldd	r12, Y+8	; 0x08
    538a:	df 80       	ldd	r13, Y+7	; 0x07
    538c:	ee 80       	ldd	r14, Y+6	; 0x06
    538e:	fd 80       	ldd	r15, Y+5	; 0x05
    5390:	0c 81       	ldd	r16, Y+4	; 0x04
    5392:	1b 81       	ldd	r17, Y+3	; 0x03
    5394:	aa 81       	ldd	r26, Y+2	; 0x02
    5396:	b9 81       	ldd	r27, Y+1	; 0x01
    5398:	ce 0f       	add	r28, r30
    539a:	d1 1d       	adc	r29, r1
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	f8 94       	cli
    53a0:	de bf       	out	0x3e, r29	; 62
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	cd bf       	out	0x3d, r28	; 61
    53a6:	ed 01       	movw	r28, r26
    53a8:	08 95       	ret

000053aa <itoa>:
    53aa:	fb 01       	movw	r30, r22
    53ac:	9f 01       	movw	r18, r30
    53ae:	e8 94       	clt
    53b0:	42 30       	cpi	r20, 0x02	; 2
    53b2:	c4 f0       	brlt	.+48     	; 0x53e4 <itoa+0x3a>
    53b4:	45 32       	cpi	r20, 0x25	; 37
    53b6:	b4 f4       	brge	.+44     	; 0x53e4 <itoa+0x3a>
    53b8:	4a 30       	cpi	r20, 0x0A	; 10
    53ba:	29 f4       	brne	.+10     	; 0x53c6 <itoa+0x1c>
    53bc:	97 fb       	bst	r25, 7
    53be:	1e f4       	brtc	.+6      	; 0x53c6 <itoa+0x1c>
    53c0:	90 95       	com	r25
    53c2:	81 95       	neg	r24
    53c4:	9f 4f       	sbci	r25, 0xFF	; 255
    53c6:	64 2f       	mov	r22, r20
    53c8:	77 27       	eor	r23, r23
    53ca:	0e 94 06 2a 	call	0x540c	; 0x540c <__udivmodhi4>
    53ce:	80 5d       	subi	r24, 0xD0	; 208
    53d0:	8a 33       	cpi	r24, 0x3A	; 58
    53d2:	0c f0       	brlt	.+2      	; 0x53d6 <itoa+0x2c>
    53d4:	89 5d       	subi	r24, 0xD9	; 217
    53d6:	81 93       	st	Z+, r24
    53d8:	cb 01       	movw	r24, r22
    53da:	00 97       	sbiw	r24, 0x00	; 0
    53dc:	a1 f7       	brne	.-24     	; 0x53c6 <itoa+0x1c>
    53de:	16 f4       	brtc	.+4      	; 0x53e4 <itoa+0x3a>
    53e0:	5d e2       	ldi	r21, 0x2D	; 45
    53e2:	51 93       	st	Z+, r21
    53e4:	10 82       	st	Z, r1
    53e6:	c9 01       	movw	r24, r18
    53e8:	0c 94 f6 29 	jmp	0x53ec	; 0x53ec <strrev>

000053ec <strrev>:
    53ec:	dc 01       	movw	r26, r24
    53ee:	fc 01       	movw	r30, r24
    53f0:	67 2f       	mov	r22, r23
    53f2:	71 91       	ld	r23, Z+
    53f4:	77 23       	and	r23, r23
    53f6:	e1 f7       	brne	.-8      	; 0x53f0 <strrev+0x4>
    53f8:	32 97       	sbiw	r30, 0x02	; 2
    53fa:	04 c0       	rjmp	.+8      	; 0x5404 <strrev+0x18>
    53fc:	7c 91       	ld	r23, X
    53fe:	6d 93       	st	X+, r22
    5400:	70 83       	st	Z, r23
    5402:	62 91       	ld	r22, -Z
    5404:	ae 17       	cp	r26, r30
    5406:	bf 07       	cpc	r27, r31
    5408:	c8 f3       	brcs	.-14     	; 0x53fc <strrev+0x10>
    540a:	08 95       	ret

0000540c <__udivmodhi4>:
    540c:	aa 1b       	sub	r26, r26
    540e:	bb 1b       	sub	r27, r27
    5410:	51 e1       	ldi	r21, 0x11	; 17
    5412:	07 c0       	rjmp	.+14     	; 0x5422 <__udivmodhi4_ep>

00005414 <__udivmodhi4_loop>:
    5414:	aa 1f       	adc	r26, r26
    5416:	bb 1f       	adc	r27, r27
    5418:	a6 17       	cp	r26, r22
    541a:	b7 07       	cpc	r27, r23
    541c:	10 f0       	brcs	.+4      	; 0x5422 <__udivmodhi4_ep>
    541e:	a6 1b       	sub	r26, r22
    5420:	b7 0b       	sbc	r27, r23

00005422 <__udivmodhi4_ep>:
    5422:	88 1f       	adc	r24, r24
    5424:	99 1f       	adc	r25, r25
    5426:	5a 95       	dec	r21
    5428:	a9 f7       	brne	.-22     	; 0x5414 <__udivmodhi4_loop>
    542a:	80 95       	com	r24
    542c:	90 95       	com	r25
    542e:	bc 01       	movw	r22, r24
    5430:	cd 01       	movw	r24, r26
    5432:	08 95       	ret

00005434 <_exit>:
    5434:	f8 94       	cli

00005436 <__stop_program>:
    5436:	ff cf       	rjmp	.-2      	; 0x5436 <__stop_program>
